GTA SA mobile class names
Format based on GTA 3 class list.
Things are in the same order as it appears in the binary.

Class list:
No Class
EmulatedMatrixStack
ArrayState
RenderQueue

OSArray<LoadTask*>
OSArray<BankData>
LoadTask

CAnimatedBuilding
CBuilding
CEntity

CRGBA
CColourSet

CHoldEffect

CMBlur

CLinkList<CEntity*>

CBridge

CGeneral

CCheat

CConversationNode
CConversationForPed
CConversations
CPedToPlayerConversations

CPed
CDarkel

CCurves

CGameLogic

CPhone
CPhoneInfo

CPickups
CPickup

CVehicleRecording
CRemote
CReplay

CPlayerInfo
CPlayerPedData
CRestart
CRoadBlocks


CMissionCleanup
CRunningScript
CTheScripts
CScriptResourceManager
CStreamedScripts


CSetPieces
CSetPiece

CShopping
CBoundBox
CStuntJumpManager
CTagManager
CTrafficLights


CPedDamageResponseCalculator

CCutsceneMgr

CAccident
CAccidentManager

CHandShaker

CClock

CCrime

CDummy


CFire
CFireManager
CCreepingFire

CGame

CKeyGen

CLocalisation


CPlayerCrossHair

CProfile


CReferences


CCutsceneObject


CRopes
CRope


CStats
SurfaceInfos_c

CTimeCycle
CTimer

CPlaceName


CWanted
CWorld
CZone
CTheZones

CProjectile

CCredits

CPopulation
CFont

CPedStats

CPopCycle

C3dMarkers

SArray<CVector>
CMoveStateStrings

CPedGeometryAnalyser
CPedStuckChecker
CPedPlacement

CAcquaintance

CDate

CCover
CCoverPoint
CPlayerRelationshipRecorder

CFollowLeaderOffSets

CPedList
CPointList
CFormation

CBirds
CClouds

CCustomRoadsignMgr

CMovingThings

CEscalator
CEscalators

CFontDetails
CFontRenderState

CGlass
CFallingGlassPane

CGridRef
CLines


CRubbish



CShinyTexts
C3dMarker


CCheckpoint
CCheckpoints

CWaterCannon
CWaterCannons

CWeather
CWindModifiers

CWorldScan

CZoneDef

CVisibilityPlugins
CLinkList<CVisibilityPlugins::AlphaObjectInfo>






Toggle all classList for search (CTRL+F)

No Class (2194 variables, 3451 functions)
Variables list:
	* ACQUIRED_FREEAIM_STATIC_LIM_A
	* ACQUIRED_FREEAIM_STATIC_LIM_B
	* AEAmbienceTrackManager
	* AEAudioHardware
	* AECutsceneTrackManager
	* AERadioTrackManager
	* AESmoothFadeThread
	* AESoundManager
	* AEStreamTransformer
	* AIMWEAPON_DRIVE_CLOSE_ENOUGH
	* AIMWEAPON_DRIVE_SENS_MULT
	* AIMWEAPON_FREETARGET_SENS
	* AIMWEAPON_RIFLE1_ZOOM
	* AIMWEAPON_RIFLE2_ZOOM
	* AIMWEAPON_SETTINGS
	* AIMWEAPON_STICK_SENS
	* ARM_IK_AIM_BLEND_TIME
	* ARM_IK_AIM_RATE
	* ARRESTCAM_LAMPPOST_ROTATEDIST
	* ARRESTCAM_LAMPPOST_TRANSLATE
	* ARRESTCAM_LAMP_BEST_DIST
	* ARRESTCAM_ROTATION_SPEED
	* ARRESTCAM_ROTATION_UP
	* ARRESTCAM_S_ROTATION_UP
	* ARRESTDIST_ABOVE_COP
	* ARRESTDIST_ABOVE_GROUND
	* ARRESTDIST_ALONG_GROUND
	* ARRESTDIST_BEHIND_COP
	* ARRESTDIST_MINFROM_PLAYER
	* ARRESTDIST_RIGHTOF_COP
	* ARRESTDIST_SIDE_GROUND
	* AUTOGYRO_ROTORLIFT_FALLOFF
	* AUTOGYRO_ROTORLIFT_MULT
	* AUTOGYRO_ROTORSPIN_DAMP
	* AUTOGYRO_ROTORSPIN_MULT
	* AUTOGYRO_ROTORSPIN_MULTLIMIT
	* AUTOGYRO_ROTORTILT_ANGLE
	* AllValidWinJoys
	* AllowMissionReplay
	* AlreadyAsked
	* AmazonDownloadFilenames
	* AmbientLightColor
	* AmbientLightColourForFrame
	* AmbientLightColourForFrame_PedsCarsAndObjects
	* AmbientLightDirty
	* AmmoForWeapon_OnStreet
	* AndroidEGLContext
	* AndroidResume
	* AnisoAvailable
	* AssignedLights
	* AudioEngine
	* BMX_PEDAL_LEANMULT
	* BMX_PEDAL_LEANSTART
	* BMX_PUSHOFF_FORCE_MULT
	* BMX_PUSHOFF_START_FRAME
	* BMX_SPRINT_LEANMULT
	* BMX_SPRINT_LEANSTART
	* BOAT_1STPERSON_LR_OFFSETZ
	* BOAT_1STPERSON_L_OFFSETX
	* BOAT_1STPERSON_R_OFFSETX
	* BOAT_BUOYANCY_DAMPING
	* BOAT_UNDERWATER_CAM_ALPHA_LIMIT
	* BOAT_UNDERWATER_CAM_BLUR
	* BOAT_UNDERWATER_CAM_COLORMAG_LIMIT
	* BOAT_UNDERWATER_CAM_DEPTH_SCALE
	* BannerWindTabel
	* BasePath
	* BigMessageAlpha
	* BigMessageInUse
	* BigMessageX
	* Blues
	* BrightTextColourTable
	* CARCAM_SET
	* CAR_BALANCE_MULT
	* CAR_FOV_FADE_MULT
	* CAR_FOV_START_SPEED
	* CAR_NOS_EXTRA_SKID_LOSS
	* CBArray
	* CHAIN_COUNT_LIMIT
	* CPIndex
	* CameraFocusX
	* CameraFocusY
	* CameraFocusZ
	* CameraRangeMaxX
	* CameraRangeMaxY
	* CameraRangeMinX
	* CameraRangeMinY
	* CentersWithTriangle
	* ChunkError
	* ClearAfterSwap
	* CloudColor
	* CloudSaveState
	* ClumpOffset
	* CollectPickupBuffer
	* Colours
	* CommandList
	* ConeShift
	* ConnectsToGiven
	* ControlsManager
	* CurrentDownloadingError
	* CurrentGangMemberToLoad
	* CurrentScriptName
	* CurrentTextureShiftSecondU
	* CurrentTextureShiftSecondV
	* CurrentTextureShiftU
	* CurrentTextureShiftV
	* DAMAGE_THESHOLD
	* DAMPING_LIMIT_IN_FRAME
	* DAMPING_LIMIT_OF_SPRING_FORCE
	* DEADCAM_HEIGHT_RATE
	* DEADCAM_HEIGHT_START
	* DEADCAM_WAFT_AMPLITUDE
	* DEADCAM_WAFT_RATE
	* DEADCAM_WAFT_TILT_AMP
	* DEFAULT_COLLISION_EXTENDLIMIT
	* DETAILEDWATERDIST
	* DIFF_DAMP_MULT_X
	* DIFF_DAMP_MULT_Y
	* DIFF_DAMP_MULT_Z
	* DIFF_LIMIT
	* DIFF_SPRING_COMPRESS_MULT
	* DIFF_SPRING_MULT_X
	* DIFF_SPRING_MULT_Y
	* DIFF_SPRING_MULT_Z
	* DOZER_COL_PIVOT
	* DWCineyCamLastFov
	* DWCineyCamLastFwd
	* DWCineyCamLastNearClip
	* DWCineyCamLastPos
	* DWCineyCamLastRight
	* DWCineyCamLastUp
	* DataFence
	* DbgLineColour
	* DecisionMakers
	* DefaultPCSaveFileName
	* DefaultResampler
	* DetachedInfoForTileCars
	* DetachedInfoForTilePeds
	* DirectionalLightColourForFrame
	* DirectionalLightColourFromDay
	* DisabledEffects
	* DoInitGraphics
	* DoLowMemoryCleanup
	* DoMissionCleanup
	* DoMissionSkip
	* DoingCheckpointLoad
	* DontWanderGiven
	* DownloadFileCount
	* DummyResult
	* DummyResult2
	* EmptyNodeAddress
	* EmulatorLights
	* ExtraBlocksX
	* ExtraBlocksY
	* FIGHTER_STICK_BACKWARD_LIMIT
	* FIGHTER_STICK_TURNONSPOT_LIMIT
	* FIGHTING_MAX_HEADING_DIFF
	* FIGHT_CONTROL_BLOCK_CHANCE
	* FIGHT_CONTROL_BLOCK_MAXTIME
	* FIGHT_CONTROL_BLOCK_MINTIME
	* FIGHT_CONTROL_TIME_TO_IDLE
	* FRONT_DAMAGE_MAG_MIN_BONNET
	* FRONT_DAMAGE_MAG_MIN_WING
	* FRONT_DAMAGE_MAG_MIN_WSCREEN
	* FX_SPEED_VARS
	* FadeDistMult
	* FilledColPointIndex
	* ForceGermanBuild
	* ForiegnCharFontStart
	* FovTweakValue
	* FrontEndFilenames
	* FrontEndMenuManager
	* FrontOffsetSyphon
	* FullLight
	* FullWidthSpaceChar
	* GLOBAL_FONT_SCALE
	* G_aComponentDamage
	* G_bRenderDebug
	* GamepadType
	* GcurSel
	* GcurSelVM
	* GlobalColor
	* GlobalColorDirty
	* GraphicsFlushSemaphore
	* GraphicsThreadHandle
	* Greens
	* GridRefList
	* GxtErrorString
	* HARRIER_NOZZLE_ROTATERATE
	* HIGHSPEED_ELASTICITY_MULT_COPCAR
	* HandlingFilename
	* HasTimeError
	* HeadLightsFlareDef
	* HudColour
	* INIT_SYPHON_ALPHA_OFFSET
	* INIT_SYPHON_DEGREE_OFFSET
	* INIT_SYPHON_GROUND_DIST
	* INIT_SYPHON_Z_OFFSET
	* INT123_COS9
	* INT123_pnts
	* INT123_tfcos36
	* Imm
	* ImmArrayMode
	* IndicateB
	* IndicateG
	* IndicateR
	* InteriorIDBeingBuilt
	* IsAndroidPaused
	* IsInitGraphics
	* IsInitialized
	* IsJapanese
	* IsMissionLoad
	* IsMissionSave
	* IsOddJob
	* IsWaitingForCloud
	* JETPACK_POS_OFFSET
	* JETPACK_ROT_AXIS
	* JMet
	* JPNIndexPunct
	* JPNUnicodePunct
	* JustLoadedDontFadeInYet
	* KKDown
	* KKtoChar
	* KKtoShiftedChar
	* KillGraphicsThread
	* LIGHT_AI_LEVEL_MAX
	* LIGHT_AI_SCALE_MIN
	* LIGHT_AI_SCALE_MIN_SEEN
	* LIGHT_AI_SCALE_RANGE
	* LIGHT_AI_SCALE_RANGE2
	* LIGHT_AI_SCALE_THRESHOLD_DIST
	* LastBigMessage
	* LastFiveKeyPresses
	* LastUpdateCoors
	* LightStrengths
	* Lighting
	* LinesVertexBuffer
	* LookatOffset
	* MAX_ANGLE_BEFORE_AIMWEAPON_JUMPCUT
	* MAX_CUTJUMP_TIME
	* MAX_DISTANCE_PED_SHADOWS
	* MAX_DISTANCE_PED_SHADOWS_SQR
	* MI_AIRPORTRADAR
	* MI_ATM
	* MI_BARRIER1
	* MI_BASKETBALL
	* MI_BEACHBALL
	* MI_BEACHTOWEL01
	* MI_BEACHTOWEL02
	* MI_BEACHTOWEL03
	* MI_BEACHTOWEL04
	* MI_BIN
	* MI_BLIMP_DAY
	* MI_BLIMP_NIGHT
	* MI_BOLLARDLIGHT
	* MI_BRIEFCASE
	* MI_BUOY
	* MI_BUSSIGN1
	* MI_CARMINE
	* MI_COLLECTABLE1
	* MI_CRANETROLLEY
	* MI_CRANE_HARNESS
	* MI_CRANE_MAGNET
	* MI_DEAD_TIED_COP
	* MI_DOLPHIN
	* MI_DOUBLESTREETLIGHTS
	* MI_DUMP1
	* MI_ESCALATORSTEP
	* MI_ESCALATORSTEP8
	* MI_EXPLODINGBARREL
	* MI_FENCE
	* MI_FENCE2
	* MI_FIRE_HYDRANT
	* MI_FISH1S
	* MI_FISH1SINGLE
	* MI_FISH2S
	* MI_FISH2SINGLE
	* MI_FISH3S
	* MI_FISH3SINGLE
	* MI_FLARE
	* MI_FREEFALL_BOMB
	* MI_GANG_DRINK
	* MI_GANG_SMOKE
	* MI_GASSTATION
	* MI_GLASS1
	* MI_GLASS8
	* MI_GRASSHOUSE
	* MI_GRASSPLANT
	* MI_HANGING_CARCASS
	* MI_HARVESTERBODYPART1
	* MI_HARVESTERBODYPART2
	* MI_HARVESTERBODYPART3
	* MI_HARVESTERBODYPART4
	* MI_HORSESHOE
	* MI_HOTELFAN_DAY
	* MI_HOTELFAN_NIGHT
	* MI_HOTROOMFAN
	* MI_HYDRAULICS
	* MI_IMY_GRAY_CRATE
	* MI_IMY_SHASH_WALL
	* MI_JELLYFISH
	* MI_JELLYFISH01
	* MI_KMB_BOMB
	* MI_KMB_PLANK
	* MI_KMB_ROCK
	* MI_LAMPPOST1
	* MI_LIGHTBEAM
	* MI_LITTLEHA_POLICE
	* MI_LOTION
	* MI_LOUNGE_TOWEL_UP
	* MI_LOUNGE_WOOD_DN
	* MI_LOUNGE_WOOD_UP
	* MI_MAGNOCRANE
	* MI_MAGNOCRANE_HOOK
	* MI_MALLFAN
	* MI_MINI_MAGNET
	* MI_MLAMPPOST
	* MI_MONEY
	* MI_NAUTICALMINE
	* MI_NEWSSTAND
	* MI_NITRO_BOTTLE_DOUBLE
	* MI_NITRO_BOTTLE_LARGE
	* MI_NITRO_BOTTLE_SMALL
	* MI_NOPARKINGSIGN1
	* MI_OBJECTFORBUILDINGSITECRANE1
	* MI_OBJECTFORMAGNOCRANE1
	* MI_OBJECTFORMAGNOCRANE2
	* MI_OBJECTFORMAGNOCRANE3
	* MI_OBJECTFORMAGNOCRANE4
	* MI_OBJECTFORMAGNOCRANE5
	* MI_OFFROAD_WHEEL
	* MI_OYSTER
	* MI_PARACHUTE_BACKPACK
	* MI_PARKBENCH
	* MI_PARKINGMETER
	* MI_PARKINGMETER2
	* MI_PARKTABLE
	* MI_PHONEBOOTH1
	* MI_PHONESIGN
	* MI_PICKUP_2P_COOP
	* MI_PICKUP_2P_KILLFRENZY
	* MI_PICKUP_ADRENALINE
	* MI_PICKUP_BODYARMOUR
	* MI_PICKUP_BONUS
	* MI_PICKUP_BRIBE
	* MI_PICKUP_CAMERA
	* MI_PICKUP_CLOTHES
	* MI_PICKUP_HEALTH
	* MI_PICKUP_INFO
	* MI_PICKUP_KILLFRENZY
	* MI_PICKUP_PARACHUTE
	* MI_PICKUP_PROPERTY
	* MI_PICKUP_PROPERTY_FORSALE
	* MI_PICKUP_REVENUE
	* MI_PICKUP_SAVEGAME
	* MI_POOL_CUE_BALL
	* MI_POSTBOX1
	* MI_PUNCHBAG
	* MI_QUARRYCRANE_ARM
	* MI_QUARY_ROCK1
	* MI_QUARY_ROCK2
	* MI_QUARY_ROCK3
	* MI_RCBOMB
	* MI_RHYMESBOOK
	* MI_ROADBLOCKFUCKEDCAR1
	* MI_ROADBLOCKFUCKEDCAR2
	* MI_ROADWORKBARRIER1
	* MI_SAMSITE
	* MI_SAMSITE2
	* MI_SANDCASTLE1
	* MI_SANDCASTLE2
	* MI_SHARK
	* MI_SINGLESTREETLIGHTS1
	* MI_SINGLESTREETLIGHTS2
	* MI_SINGLESTREETLIGHTS3
	* MI_STEREO_UPGRADE
	* MI_STREETLAMP1
	* MI_STREETLAMP2
	* MI_SUBMARINE
	* MI_TELLY
	* MI_TELPOLE02
	* MI_TRAFFICCONE
	* MI_TRAFFICLIGHT01
	* MI_TRAFFICLIGHTS
	* MI_TRAFFICLIGHTS_3
	* MI_TRAFFICLIGHTS_4
	* MI_TRAFFICLIGHTS_5
	* MI_TRAFFICLIGHTS_GAY
	* MI_TRAFFICLIGHTS_MIAMI
	* MI_TRAFFICLIGHTS_TWOVERTICAL
	* MI_TRAFFICLIGHTS_VEGAS
	* MI_TRAFFICLIGHTS_VERTICAL
	* MI_TRAINCROSSING
	* MI_TRAINCROSSING1
	* MI_TURTLE
	* MI_WASTEBIN
	* MI_WINDSOCK
	* MI_WONG_DISH
	* MI_WRECKING_BALL
	* MI_YT_MAIN_BODY
	* MI_YT_MAIN_BODY2
	* MODELID_CRANE_1
	* MODELID_CRANE_2
	* MODELID_CRANE_3
	* MODELID_CRANE_4
	* MODELID_CRANE_5
	* MODELID_CRANE_6
	* MOVE_UNDERWATER_BUBBLE_MOVESPDSQR
	* MOVE_UNDERWATER_CAR_COB
	* MTB_PEDAL_LEANMULT
	* MTB_SPRINT_LEANMULT
	* MarketingCamBaseOffset
	* MarketingCamBaseRotation
	* MarketingCamOffset
	* MarketingCamRotation
	* MarketingCheatsOff
	* MarketingControllerEnabled
	* MarketingDebugCamera
	* MarketingPCSaveFileName
	* MarketingScreenshot
	* MarketingToggleBackZone
	* MarketingToggleForwardZone
	* MarketingToggleMission
	* MatFXInfo
	* MatFXMaterialDataOffset
	* MaterialAmbient
	* MaterialDiffuse
	* MaterialDirty
	* MaterialEmissive
	* MaterialShininess
	* MaterialSpecular
	* MaxAsyncReadMultiply
	* MenuCounts
	* MenuNumber
	* ModelViewStack
	* MousePointerStateHelper
	* NVLog
	* NVLogDebug
	* NVLogError
	* NVLogFatal
	* NVLogInfo
	* NVLogMessage
	* NVLogOutput
	* NVLogWarn
	* NVtoKK
	* NativeFormat
	* NewInteriorSlot
	* NoRenderTarget
	* NodeList
	* NumDetachedCarNodeGroups
	* NumDetachedPedNodeGroups
	* NumExtraBlocks
	* NumExtraDirLightsInWorld
	* NumLinksToExteriorNodes
	* NumNodesGiven
	* NumTempExternalNodes
	* NumTrackNodes
	* OddJob2OffTimer
	* OddJob2On
	* OddJob2Timer
	* OddJob2XOffset
	* PACKER_COL_PIVOT
	* PC_Scratch
	* PEDCAM_SET
	* PELLET_COL_SCALE_RATIO_MULT
	* PHYSICAL_CARCAR_FRICTION_MULT
	* PHYSICAL_CAR_FRICTION_MULT
	* PHYSICAL_CAR_FRICTION_SPEED_LIMSQR
	* PHYSICAL_CAR_FRICTION_TURN_LIMSQR
	* PHYSICAL_SHIFT_SPEED_DAMP
	* PLANE_DAMAGE_DESTROY_THRESHHOLD
	* PLANE_DAMAGE_SCALE_MASS
	* PLANE_DAMAGE_THRESHHOLD
	* PLANE_DAMAGE_WAVE_COUNTER_VAR
	* PLAYERFIGHT_LEVEL_SMOOTHING_CONST
	* PLAYERFIGHT_TREND_SMOOTHING_CONST
	* PLAYERPED_LEVEL_SMOOTHING_CONST_INV
	* PLAYERPED_TREND_SMOOTHING_CONST_INV
	* PLAYER_SPRINT_HOLDSUB
	* PLAYER_SPRINT_RELEASESUB
	* PLAYER_SPRINT_SET
	* PLAYER_SPRINT_TAPADD
	* PLAYER_SPRINT_THRESHOLD
	* PS2Keyboard
	* Pads
	* PagerXOffset
	* PcSaveHelper
	* PersonalityTypeTexts
	* PlayerSniperBulletEnd
	* PlayerSniperBulletStart
	* Points
	* PositionIDs
	* PrintDebugCode
	* PrintScriptCommands
	* PrintScriptCommandsAll
	* ProjectionStack
	* PsGlobal
	* QUAD_HBSTEER_ANIM_MULT
	* RELINK_TRAILER_DIFF_LIMIT_XY
	* RELINK_TRAILER_DIFF_LIMIT_Z
	* ROLL_ONTO_WHEELS_FORCE
	* ROTOR_SEMI_THICKNESS
	* ROT_DAMP_MULT_X
	* ROT_DAMP_MULT_Y
	* ROT_DAMP_MULT_Z
	* RQCaps
	* RQMaxBones
	* RadarBlipSpriteFilenames
	* RandomWindowVals
	* RasterExtOffset
	* Reds
	* RegEntries
	* ResamplerPadding
	* ResamplerPrePadding
	* RopeIndices
	* RpHAnimAtomicGlobals
	* RpUVAnimMaterialGlobals
	* RsGlobal
	* RtAnimAnimationFreeList
	* RtAnimAnimationFreeListSpace
	* RtAnimInterpolatorInfoBlock
	* RtAnimInterpolatorInfoBlockNumEntries
	* RwEngineInstance
	* RwHackNoCompressedTexCoords
	* RwInitialized
	* RxClCamNorms
	* RxClCamSpace3DVertices
	* RxClIndices
	* RxClInterpolants
	* RxClMeshState
	* RxClObjSpace3DVertices
	* RxClRGBAs
	* RxClRenderState
	* RxClScatter
	* RxClScrSpace2DVertices
	* RxClTriPlanes
	* RxClUVs
	* RxClVSteps
	* RxPipelineInstanced
	* SHOTGUN_NUM_PELLETS
	* SHOTGUN_SPREAD_RATE
	* SKID_COLOR_BLOOD
	* SKID_COLOR_DEFAULT
	* SKID_COLOR_MUD
	* SKID_COLOR_SAND
	* SOFTCOL_CARLINE_SPEED_MULT
	* SOFTCOL_DEPTH_MIN
	* SOFTCOL_DEPTH_MULT
	* SOFTCOL_SPEED_MULT
	* SOFTCOL_SPEED_MULT2
	* SPAS_NUM_PELLETS
	* STEALTH_KILL_RANGE
	* SaveAnyway
	* SaveGameFromMenu
	* SaveGameStateType
	* SaveStreamedScripts
	* Scene
	* Screens8Track
	* ScriptParams
	* ScrollCharSet
	* SequenceElements
	* SequenceOfBoatCams
	* SequenceOfCarCams
	* SequenceOfHeliCams
	* SequenceOfPlaneCams
	* SequenceOfTrainCams
	* SequenceRandomOffset
	* ShaderClosetInitialized
	* ShowSaveLog
	* ShowTimeErrors
	* SkipAllMPEGs
	* SkipIntroCutscene
	* SkipPauseSave
	* SkipToMissionNumber
	* SkipToMissionPage
	* SlotSaveDate
	* StationDist
	* StatsAchievementList
	* StatsCriminalList
	* StatsGangList
	* StatsMiscList
	* StatsMissionList
	* StatsMoneyList
	* StatsPlayerList
	* StatsWeaponList
	* StillToFadeOut
	* StorageBaseRootBuffer
	* StorageRootBuffer
	* StoreMatrixForMirror
	* SunFlareDef
	* TEST_ADD_AMBIENT_LIGHT_FRAC
	* TEST_AI_LIGHTING_DAY_ADD
	* TEST_AI_LIGHTING_DAY_MULT
	* TEST_FOLLOW_CAR_USING_FOLLOW_PED_CODE
	* TEST_SPEEDFX_OLD_VALUES
	* TIGER_GUNFIRE_RATE
	* TIGER_GUN_POS
	* TOWTRUCK_HOIST_DOWN_LIMIT
	* TOWTRUCK_HOIST_UP_LIMIT
	* TOWTRUCK_ROT_ANGLE
	* TOWTRUCK_WIRE_LENGTH
	* TRAILER_TOWED_MINRATIO
	* TRANSMISSION_AI_CHEAT_INERTIA_MULT
	* TRANSMISSION_AI_CHEAT_MULT
	* TRANSMISSION_FREE_ACCELERATION
	* TRANSMISSION_NITROS_INERTIA_MULT
	* TRANSMISSION_NITROS_MULT
	* TRANSMISSION_SMOOTHER_FRAC
	* TargetAngleCone
	* TempBufferIndicesStored
	* TempBufferIndicesStoredHiLight
	* TempBufferIndicesStoredReflection
	* TempBufferIndicesStoredShattered
	* TempBufferRenderIndexList
	* TempBufferVerticesStored
	* TempBufferVerticesStoredHiLight
	* TempBufferVerticesStoredReflection
	* TempBufferVerticesStoredShattered
	* TempColourBufferB
	* TempColourBufferG
	* TempColourBufferIndex
	* TempColourBufferR
	* TempExternalNodes
	* TempVertexBuffer
	* TestScriptIndex
	* TextColourTable
	* TextureShiftHighLightU
	* TextureShiftHighLightV
	* TextureShiftSecondU
	* TextureShiftSecondV
	* TextureShiftU
	* TextureShiftV
	* TextureStack
	* TheCamera
	* ThePaths
	* TheText
	* TiltOverShoot
	* TiltSpeedStep
	* TiltTopSpeed
	* TimeStartedCountingForFade
	* TimeToStayFadedBeforeFadeOut
	* ToBeStreamed
	* ToBeStreamedForScript
	* TopLineEmptyFile
	* TotalDownloadPayloadMB
	* TotalDownloadSizeMB
	* TotalSizeDownloadedMB
	* TrafficLightIndices
	* TrafficLightsSide
	* TrafficLightsUp
	* TrailIndices
	* TriggerMissionJumpWidget
	* USE_GUN_REQ_PISTOL_WHIP_ANGLE_TAN
	* USE_GUN_REQ_PISTOL_WHIP_RANGE
	* UncompressedRead
	* UseAssetFile
	* UseDataFence
	* UseGpuSkinning
	* VecForWaterNormalCalculation
	* VehicleNames
	* WORLD_PLAYER_SHIFT_DAMPING
	* WS_ALREADY_SPINNING_LOSS
	* WS_TRAC_FRAC_LIMIT
	* WarKeyboard_class
	* WasAndroidPaused
	* WasDoingResumeBeforeRate
	* WasForegroundApp
	* WaterColor
	* WaterColorDebug
	* WeatherTypesListDefault
	* WeatherTypesListDesert
	* WeatherTypesListLA
	* WeatherTypesListSF
	* WeatherTypesListVegas
	* WiderTargetAngleCone
	* WidgetIDs
	* WindTabel
	* Windyness
	* XCoorGiven
	* YCoorGiven
	* ZCoorGiven
	* ZOOM_ONE_DISTANCE
	* ZOOM_THREE_DISTANCE
	* ZOOM_TWO_DISTANCE
	* ZmOneAlphaOffset
	* ZmThreeAlphaOffset
	* ZmTwoAlphaOffset
	* _dist_code
	* _length_code
	* _numOfQuadWords
	* _rpMatFXOpenGLBumpMapRender
	* _rpMatFXOpenGLDualRender
	* _rpMatFXOpenGLEnvMapRender
	* _rpMatFXOpenGLUVAnimRender
	* _rpMultiTextureModule
	* _rpSkinGlobals
	* _rpUVAnimDictSchema
	* _rpUVAnimLinearInterpolatorInfo
	* _rpUVAnimParamInterpolatorInfo
	* _rtgBuffer
	* _rwIm3DGlobals
	* _rwIm3DModule
	* _rwMsbBit
	* _rwOpenGLColorArrayEnabled
	* _rwOpenGLColorMaterialEnabled
	* _rwOpenGLLightingEnabled
	* _rwOpenGLNormalArrayEnabled
	* _rwOpenGLNormalizeEnabled
	* _rwOpenGLOpaqueBlack
	* _rwOpenGLPrimConvTbl
	* _rwOpenGLTexCoordArrayEnabled
	* _rwOpenGLVertexArrayEnabled
	* _rwRaster_cFlags
	* _rwRaster_cType
	* _rwRaster_cpPixels
	* _rwRaster_nDepth
	* _rwRaster_nHeight
	* _rwRaster_nStride
	* _rwRaster_nWidth
	* _rwV2d_nX
	* _rwV2d_nY
	* _rwV3d_nX
	* _rwV3d_nY
	* _rwV3d_nZ
	* _rxExecCtxGlobal
	* _rxHeapGlobal
	* _rxHeapInitialSize
	* _rxPipelineGlobalsOffset
	* _rxPipelineMaxNodes
	* aAlphaFade
	* aAudioPedTypeNames
	* aAutomobileColPoints
	* aBONETAG_ENUM_TAB
	* aCarsToKeepTime
	* aDriveAnimIdsBad
	* aDriveAnimIdsBadSlow
	* aDriveAnimIdsBoat
	* aDriveAnimIdsKart
	* aDriveAnimIdsLow
	* aDriveAnimIdsPro
	* aDriveAnimIdsProSlow
	* aDriveAnimIdsStd
	* aDriveAnimIdsStdSlow
	* aDriveAnimIdsTruck
	* aExteriorNodeLinkedTo
	* aInteriorNodeLinkedToExterior
	* aPedTypeNames
	* aScreens
	* aStdAnimDescs
	* aStdAnimations
	* aStdBonePosisions
	* aTestAnimList
	* aTrafficLightColoursB
	* aTrafficLightColoursG
	* aTrafficLightColoursR
	* aWeaponInfo
	* abTempNeverLeavesGroup
	* accelerometerValues
	* achievementCount
	* achievements
	* activeDesc
	* airstrip_table
	* anytimeMissionScript
	* apCarsToKeep
	* apportableOpenALFuncs
	* bAvoidTest1
	* bAvoidTest2
	* bAvoidTest3
	* bDidWeProcessAnyCinemaCam
	* bDispayOccDebugStuff
	* bDoQuadDamping
	* bDontBuildPaths
	* bFirstTime
	* bForceOldWaft
	* bFudgeNow
	* bHeliControl
	* bInteriorBeingBuilt
	* bPendingPause
	* bPlayerInRCBuggy
	* bSaveSettings
	* bSequenceOtherWay
	* bSplitBigPolys
	* bSuppressPrintfs
	* bTestDbg
	* bTestScriptGoing
	* backTarget
	* bankInfo
	* base_time
	* billingMutex
	* blurPShader
	* bufferChanged
	* bytesAddedToSave
	* cachedDescription
	* cameraTKList
	* capsLockOn
	* carLodLerp
	* circleTex
	* clearInputNextUpdate
	* clothesIDs
	* clothesTextureNames
	* cloudFilename
	* colorInterp
	* contrastAdd
	* contrastMult
	* contrastPShader
	* contrastVShader
	* cullDisabled
	* cullEnabled
	* curAlphaModulate
	* curAssignedShader
	* curEmulatorStateFlags
	* curGPUResource
	* curGlobalMode
	* curMS
	* curMode
	* curNumShaders
	* curPreallocSource
	* curShaderStateFlags
	* curStack
	* curWakeLock
	* currentLoops
	* currentMissionPage
	* currentSkipToMissionNumber
	* debug_AlphaTest
	* debug_BlendDrawing
	* debug_DrawCalls
	* debug_Lighting
	* debug_Texturing
	* defaultFullscreenRes
	* defaultName
	* defaultValues
	* definedDevice
	* deflate_copyright
	* deletingEscalator
	* desc
	* detailTilingFactor
	* deviceChip
	* deviceForm
	* deviceRegion
	* dgGGlobals
	* dirtyCache
	* displayCollisionInMemory
	* doubleClickDelay
	* emu_4444Conversion
	* emu_InternalBlendEnabled
	* emu_TrilinearEnabled
	* emu_cameraPosition
	* emu_cameraPositionDirty
	* emu_fogcolor
	* emu_fogdirty
	* emu_fogdistances
	* envMapCoefficient
	* es2TexPool
	* es2TextureType
	* fAngleDist
	* fAvoidGeomReturnRate
	* fAvoidGeomThreshhold
	* fAvoidProbTimerDamp
	* fAvoidTweakFOV
	* fBaseDist
	* fBike1stPersonOffsetZ
	* fBikeBurstFallSpeed
	* fBikeBurstFallSpeedPlayer
	* fBikeBurstForceMult
	* fBoatVolumeDistribution
	* fBoatVolumeDistributionCat
	* fBoatVolumeDistributionDinghy
	* fBoatVolumeDistributionSail
	* fBoatVolumeDistributionSpeed
	* fBurstBikeSpeedMax
	* fBurstBikeTyreMod
	* fBurstForceMult
	* fBurstSpeedMax
	* fBurstTyreMod
	* fCloseNearClipLimit
	* fDamagePosSpeedShift
	* fDefaultAlphaOrient
	* fDefaultSpeedLimit
	* fDefaultSpeedLimit4Avoid
	* fDefaultSpeedMultiplier
	* fDefaultSpeedMultiplier4Avoid
	* fDefaultSpeedStep
	* fDefaultSpeedStep4Avoid
	* fDuckingBackOffset
	* fDuckingRightOffset
	* fFalloff
	* fFlySpeedMult
	* fHeliMinHeightAboveWater
	* fMiniGunBetaOffset
	* fPlayerAimRotRate
	* fPlayerAimScale
	* fPlayerAimScaleDist
	* fRangeMult
	* fRangePlayerRadius
	* fReloadAnimSampleFraction
	* fRotRamp
	* fSeaplaneMinHeightAboveWater
	* fShapeLength
	* fShapeTime
	* fShootingRange
	* fSpeedMult
	* fSteerAng1
	* fSteerAng2
	* fSteerAng3
	* fStickSens
	* fTempBikeY
	* fTempBikeZ
	* fTempTestTorsoRoll
	* fTestPlayerWeaponReAimRate
	* fTestRotateAngle
	* fTestShiftHeliCamTarget
	* fTimeMult
	* fTranslateCamUp
	* fTweakBikeWheelTurnForce
	* fTweakLimitMaxY
	* fTweakLimitMinY
	* fTweakLimitMinZ
	* fUnder1
	* fUnder2
	* fUnder3
	* fVolMultiplier
	* fWave2Ampl
	* fWave2InvLength
	* fWave2NormScale
	* fWheelCamBikeXOffset
	* fWheelCamCarXOffset
	* fWheelExtensionRate
	* faceTex
	* faceTxdName
	* fatFaceTex
	* fatLegsTex
	* fatTorsoTex
	* feetDffName
	* feetTxdName
	* fileMutex
	* finishedTasks
	* flushedSinceSwap
	* foreign_table
	* formatTable
	* frameTKList
	* g2dEffectPluginOffset
	* gAllowScriptedFixedCameraCollision
	* gArse1
	* gArse2
	* gAudioZoneToReverbEnvironmentMap
	* gBeatTrackLookup
	* gBoneIndices
	* gBuildings
	* gCamColVars
	* gCdImageNames
	* gCenterOnScreen
	* gCinematicModeSwitchDir
	* gCollisionLookup
	* gColourBottom
	* gColourTop
	* gCrossHair
	* gCurCamColVars
	* gCurDistForCam
	* gDWCamMaxDurationMs
	* gDWCineyCamEndTime
	* gDWCineyCamStartTime
	* gDWLastModeForCineyCam
	* gDummyMatrix
	* gEmgSpeechLookup
	* gEmgSpeechVoiceLookup
	* gEmgSpeechVoiceToBankLookup
	* gFaceFacingCamera
	* gFireManager
	* gForceCamBehindPlayer
	* gGameCracked1
	* gGameCracked2
	* gGameState
	* gGenSpeechLookup
	* gGenSpeechVoiceLookup
	* gGenSpeechVoiceToBankLookup
	* gGfdSpeechLookup
	* gGfdSpeechVoiceLookup
	* gGfdSpeechVoiceToBankLookup
	* gGlobalSpeechContextNextPlayTime
	* gGngSpeechLookup
	* gGngSpeechVoiceLookup
	* gGngSpeechVoiceToBankLookup
	* gGxtString
	* gGxtString2
	* gHCM
	* gHandShaker
	* gHorZ
	* gIdleCam
	* gLastCamDist
	* gLastFrameProcessedDWCineyCam
	* gLastRadiusUsedInCollisionPreventionOfCamera
	* gLightOffSurfProps
	* gLightSurfProps
	* gLimitPrecisionOfBinarySearch
	* gMatrixList
	* gMaxXInOccluder
	* gMaxYInOccluder
	* gMinXInOccluder
	* gMinYInOccluder
	* gMobileMenu
	* gModelVoiceLookup
	* gMovieCamMaxDist
	* gMovieCamMinDist
	* gNoDetailTextures
	* gNumColCacheEntries
	* gNumEntitiesSetInvisible
	* gNumVidModes
	* gOccluderCoors
	* gOccluderCoorsOnScreen
	* gOccluderCoorsValid
	* gOldArse
	* gPainLookup
	* gPainVoiceLookup
	* gPainVoiceToBankLookup
	* gPedClipDist
	* gPedCylinderWidth
	* gPedMaxHeight
	* gPerfCounter1
	* gPerfCounter2
	* gPerfCounter3
	* gPerfCounter4
	* gPhoneInfo
	* gPlayerPedVisible
	* gPlySpeechLookup
	* gPlySpeechVoiceLookup
	* gPlySpeechVoiceToBankLookup
	* gPrintStuff
	* gRadarTextures
	* gRadioAdverts
	* gRadioDJBanterBB
	* gRadioDJBanterBC
	* gRadioDJBanterBO
	* gRadioDJBanterGN
	* gRadioDJBanterNW
	* gRadioDJBanterTE
	* gRadioDJBanterTM
	* gRadioDJBanterTN
	* gRadioDJBanterWF
	* gRadioDJBanterWR
	* gRadioDJBanterWS
	* gRadioIdents
	* gRadioMusicIntros
	* gRadioMusicOutros
	* gRadioMusicTracks
	* gRadioNumMusicTracksPerStation
	* gRadiusScalarForLengthToVehicle
	* gScriptBanksLookup
	* gSpecialPedVoiceLookup
	* gSpecialPedVoiceNameLookup
	* gSpeechContextLookup
	* gString
	* gString2
	* gTargetCoordsForLookingBehind
	* gTopSphereCastTest
	* gVehicleDistanceFromCamera
	* g_BreakablePlugin
	* g_InterestingEvents
	* g_LoadMonitor
	* g_NVLogFile
	* g_NVLogMask
	* g_accessMutex
	* g_bUsingAnimViewer
	* g_blendFunctions
	* g_boneNodeMan
	* g_breakMan
	* g_cond
	* g_currFurnitureId
	* g_currSubGroupId
	* g_furnitureMan
	* g_furnitureStore
	* g_fx
	* g_fxMan
	* g_ikChainMan
	* g_interiorMan
	* g_numSoundChannelsUsed
	* g_numTris
	* g_numVertices
	* g_pMatrix
	* g_pRaster
	* g_pVertex3d
	* g_procObjMan
	* g_protCheck_00
	* g_protCheck_01
	* g_protCheck_02
	* g_protCheck_03
	* g_protCheck_04
	* g_protCheck_05
	* g_protCheck_06
	* g_protCheck_07
	* g_protCheck_08
	* g_protCheck_09
	* g_protCheck_10
	* g_protCheck_11
	* g_protCheck_12
	* g_protCheck_13
	* g_protCheck_14
	* g_protCheck_15
	* g_protCheck_16
	* g_protCheck_17
	* g_protCheck_18
	* g_protCheck_19
	* g_protCheck_20
	* g_protCheck_21
	* g_protCheck_22
	* g_protCheck_23
	* g_protCheck_24
	* g_protCheck_25
	* g_protCheck_26
	* g_protCheck_27
	* g_protCheck_28
	* g_protCheck_29
	* g_protCheck_30
	* g_protCheck_31
	* g_realTimeShadowMan
	* g_rwFlags
	* g_subGroupStore
	* g_surfaceInfos
	* g_thread
	* g_tmp_buffer
	* g_tmp_buffer_offset
	* g_tmp_buffer_size
	* g_touchSense
	* g_waterCreatureMan
	* g_windDir
	* g_windStrength
	* gaGangColoursB
	* gaGangColoursG
	* gaGangColoursR
	* gaProjectileInfo
	* gaTempSphereColPoints
	* gameAlreadyInitialised
	* gameServiceMutex
	* gameTxdSlot
	* gamepads
	* gbBigWhiteDebugLightSwitchedOn
	* gbCineyCamMessageDisplayed
	* gbCineyCamProcessedOnFrame
	* gbDebugStuffInRelease
	* gbExitCam
	* gbFirstPersonRunThisFrame
	* gbInAnimCallback
	* gbLARiots
	* gbLARiots_NoPoliceCars
	* gbModelViewer
	* gbShowCarRoadGroups
	* gbShowPedRoadGroups
	* gbUseCarColTex
	* gfCarriageFrequencyVariations
	* gfExplosionFrequencyVariations
	* gfFireFrequencyVariations
	* gfLaRiotsLightMult
	* gfRocketFrequencyVariations
	* gfThunderFrequencyVariations
	* gfTommyFatness
	* gfWeaponPlaneFrequencyVariations
	* globalVM
	* gnBottom
	* gnLeft
	* gnNumMLO
	* gnNumSimple
	* gnRadioStationRestrictedAdverts
	* gnRadioStationSpecificNewsLookup
	* gnRight
	* gnTalkRadioShowLengthsMs
	* gnTop
	* gpBloodPoolTex
	* gpBoat
	* gpCamColVars
	* gpCar
	* gpCloudTex
	* gpColCache
	* gpColCache2
	* gpCoronaTexture
	* gpCrackedGlassTex
	* gpCrossHairTex
	* gpCrossHairTexFlight
	* gpFinishFlagTex
	* gpHandManTex
	* gpMadeInvisibleEntities
	* gpMoonMask
	* gpPhysicsCar
	* gpPostShadowTex
	* gpSeaBedTex
	* gpShadowBaronTex
	* gpShadowBikeTex
	* gpShadowCarTex
	* gpShadowExplosionTex
	* gpShadowHeadLightsTex
	* gpShadowHeadLightsTex2
	* gpShadowHeliTex
	* gpShadowPedTex
	* gpTestCar
	* gpTraceObject
	* gpVehicleGettingInto
	* gpWaterTex
	* gpWaterWakeTex
	* gpWhiteTexture
	* gradeBlur
	* gradingPShader
	* gs_iNumWorldProcessLineOfSightUnCached
	* hackNextTick
	* hackTarget
	* handsDffName
	* headDffName
	* inflate_copyright
	* inflate_mask
	* inputUpdateFromApp
	* invalidateActiveAttribs
	* isDirty
	* isLowMemoryDevice
	* isWatching
	* items
	* jCount
	* jpeg_natural_order
	* keepingCPU
	* keys
	* killLoaderThread
	* lastDevice
	* lastEnterWasTouch
	* lastGamepadAxis
	* lastGamepadMask
	* lastGamepadType
	* lastSaveForResume
	* lastScriptname
	* lastTelemetrySend
	* last_tv
	* leftStickPos
	* legsDffName
	* legsTex
	* legsTxdName
	* loaderMutex
	* loaderSemaphore
	* loaderTasks
	* loaderThread
	* loadingPed
	* maVertices
	* mainThread
	* mapModeOpacity
	* mapScroll
	* mat_mwx
	* mat_mwy
	* mat_mwz
	* mat_mxx
	* mat_mxy
	* mat_mxz
	* mat_myx
	* mat_myy
	* mat_myz
	* mat_mzx
	* mat_mzy
	* mat_mzz
	* maxIndex
	* memMoved
	* meshModule
	* missionLabel
	* missionList
	* missionReplaySetting
	* missionRetryScriptIndex
	* missionScript
	* mod_Buoyancy
	* mod_HandlingManager
	* msCollected
	* myCloudSaves
	* nAdjustmentModeFlags
	* nFadeControlThreshhold
	* nMaskAlpha
	* nTestPlayerWeaponAccuracy
	* nTestRotateAxis
	* nUsingWhichCamera
	* nWakeAlpha
	* needsAmazonDownload
	* null_funcs
	* numBBfailed
	* numItems
	* numMatrices
	* numMissions
	* numOfPunctIndexes
	* numTris
	* obrstr
	* obrstr2
	* oldTarget
	* openglAmbientLight
	* openglLightApplied
	* pAmbient
	* pDirect
	* pDriveByCar
	* pDst
	* pExtraDirectionals
	* pFogHorn
	* pNastyClump
	* pOldToGarageWeAreIn
	* pStoredCopPed
	* pTempStrings
	* pTestPlaneO
	* pTrackNodes
	* pWaterfall
	* pixelShaders
	* png_IDAT
	* png_IEND
	* png_IHDR
	* png_PLTE
	* png_bKGD
	* png_cHRM
	* png_gAMA
	* png_hIST
	* png_iCCP
	* png_iTXt
	* png_libpng_ver
	* png_oFFs
	* png_pCAL
	* png_pHYs
	* png_pass_dsp_mask
	* png_pass_inc
	* png_pass_mask
	* png_pass_start
	* png_pass_yinc
	* png_pass_ystart
	* png_sBIT
	* png_sCAL
	* png_sPLT
	* png_sRGB
	* png_sig
	* png_tEXt
	* png_tIME
	* png_tRNS
	* png_zTXt
	* pointers
	* preAlloc
	* priceBuffer
	* rasLoadTime
	* rasNumLoaded
	* regShaders
	* renderHeight
	* renderQueue
	* renderWidth
	* resourcesModule
	* rightStickPos
	* rippedLegsTex
	* rippedTorsoTex
	* rpUVAnimInvPivot
	* rpUVAnimModule
	* rpUVAnimPivot
	* rqRenderer
	* rqVendor
	* russian_table
	* russian_unicode_table
	* rw_errcomcstr
	* rw_errcomstr
	* s_DeleteFile
	* s_FileGetArchiveName
	* s_FileRename
	* s_GetAndroidBuildinfo
	* s_GetAppId
	* s_GetDeviceID
	* s_GetDeviceLocale
	* s_GetDeviceType
	* s_GetSpecialBuildType
	* s_IsAppInstalled
	* s_IsCloudAvailable
	* s_IsKeyboardShown
	* s_IsMoviePlaying
	* s_LoadAllGamesFromCloud
	* s_LoadGameFromCloud
	* s_MovieClearText
	* s_MovieDisplayText
	* s_MovieIsSkippable
	* s_MovieKeepAspectRatio
	* s_MovieSetText
	* s_MovieTextScale
	* s_NewCloudSaveAvailable
	* s_OpenLink
	* s_PlayMovie
	* s_PlayMovieInFile
	* s_PlayMovieInWindow
	* s_SaveGameToCloud
	* s_ScreenSetWakeLock
	* s_SendStatEvent
	* s_SendStatEventParam
	* s_ServiceAppCommand
	* s_ServiceAppCommandValue
	* s_ShowKeyboard
	* s_StopMovie
	* s_addSku
	* s_getAvailableMemory
	* s_getConnectionStatus
	* s_getGamepadAxis
	* s_getGamepadButtons
	* s_getGamepadTrack
	* s_getGamepadType
	* s_getLowThreshhold
	* s_getScreenWidthInches
	* s_getTotalMemory
	* s_incrementAchievement
	* s_initBilling
	* s_localizedPrice
	* s_refreshData
	* s_requestPurchase
	* s_setBillingKey
	* s_showAchievementList
	* s_showLeaderboard
	* s_showLeaderboards
	* s_showSignInUI
	* s_signOut
	* s_submitScore
	* s_unlockAchievement
	* s_warGameService
	* s_warGameService_class
	* s_warGameService_ctor
	* sectorTKList
	* separators
	* setupValues
	* shadowResolvePShader
	* shadowTarget
	* sharingGPUResource
	* sizeDownloadedMB
	* sizeof_rwRaster
	* sizeof_rwV2d
	* sizeof_rwV3d
	* skin_dirty
	* skin_map
	* skin_num
	* skipBlendRender
	* skipDebugLog
	* skipFirstMissionSave
	* skipFrame
	* skipMissionStartCount
	* skipNonblendRender
	* soundInfoFile
	* startupDeactivate
	* staticAppId
	* staticBuildinfo
	* staticDeviceID
	* staticState
	* storageInited
	* storageMutex
	* streams
	* strforjson
	* teleheader
	* telemFileName
	* tempTimeOffset
	* testIndex
	* texDictTKList
	* texLoadTime
	* texNumLoaded
	* textureCameraNormals
	* textureDecalZ
	* textureDetail
	* textureEnhanced
	* textureForceZOff
	* textureTKList
	* timeBeforeNextGangLoad
	* timeBeforeNextLoad
	* timerDef
	* torsoDffName
	* torsoTex
	* torsoTxdName
	* trapDisplay
	* trashMutex
	* triggerDisplay
	* typeinfo for __cxxabiv1::__class_type_info
	* typeinfo for __cxxabiv1::__forced_unwind
	* typeinfo for __cxxabiv1::__foreign_exception
	* typeinfo for __cxxabiv1::__si_class_type_info
	* typeinfo for __gnu_cxx::__concurrence_lock_error
	* typeinfo for __gnu_cxx::__concurrence_unlock_error
	* typeinfo for std::bad_exception
	* typeinfo for std::exception
	* typeinfo for std::type_info
	* typeinfo name for __cxxabiv1::__class_type_info
	* typeinfo name for __cxxabiv1::__forced_unwind
	* typeinfo name for __cxxabiv1::__foreign_exception
	* typeinfo name for __cxxabiv1::__si_class_type_info
	* typeinfo name for __gnu_cxx::__concurrence_lock_error
	* typeinfo name for __gnu_cxx::__concurrence_unlock_error
	* typeinfo name for std::bad_exception
	* typeinfo name for std::exception
	* typeinfo name for std::type_info
	* updateCount
	* useGPUForArrays
	* userSelectedLanguage
	* usingGrading
	* v
	* vecBmxHandleBarPos
	* vecChopperHandleBarPos
	* vecMtbHandleBarPos
	* vecQuadResistance
	* vecRCBaronGunPos
	* vecTestResistance
	* vecTestTemp
	* vecTweakHandleBarPos
	* vecTweakHandleBarPos2
	* vecWheelCamBoatOffset
	* vecWheelCamBoatOffsetAlt
	* version_name
	* version_number
	* vertexShaders
	* vertexbufferT
	* vtable for APKFile
	* vtable for AudioScreen
	* vtable for AudioScreen::RadioSelection
	* vtable for BriefScreen
	* vtable for CAEAudioChannel
	* vtable for CAEAudioEntity
	* vtable for CAECollisionAudioEntity
	* vtable for CAEDoorAudioEntity
	* vtable for CAEExplosionAudioEntity
	* vtable for CAEFireAudioEntity
	* vtable for CAEFrontendAudioEntity
	* vtable for CAEGlobalWeaponAudioEntity
	* vtable for CAEMP3BankLoader
	* vtable for CAEMP3Decoder
	* vtable for CAEPedAudioEntity
	* vtable for CAEPedSpeechAudioEntity
	* vtable for CAEPedWeaponAudioEntity
	* vtable for CAEPedlessSpeechAudioEntity
	* vtable for CAEPoliceScannerAudioEntity
	* vtable for CAEScriptAudioEntity
	* vtable for CAEStaticChannel
	* vtable for CAEStreamingChannel
	* vtable for CAEStreamingDecoder
	* vtable for CAETwinLoopSoundEntity
	* vtable for CAEVehicleAudioEntity
	* vtable for CAEWaterCannonAudioEntity
	* vtable for CAEWaveDecoder
	* vtable for CAEWeaponAudioEntity
	* vtable for CAEWeatherAudioEntity
	* vtable for CAnimBlendAssociation
	* vtable for CAnimBlendStaticAssociation
	* vtable for CAnimatedBuilding
	* vtable for CAtomicModelInfo
	* vtable for CAutomobile
	* vtable for CBaseModelInfo
	* vtable for CBike
	* vtable for CBmx
	* vtable for CBoat
	* vtable for CBugstarInterface
	* vtable for CBugstarNetwork
	* vtable for CBugstarPC
	* vtable for CBuilding
	* vtable for CCamera
	* vtable for CCivilianPed
	* vtable for CClumpModelInfo
	* vtable for CCopPed
	* vtable for CCutsceneObject
	* vtable for CDamageAtomicModelInfo
	* vtable for CDummy
	* vtable for CDummyObject
	* vtable for CDummyPed
	* vtable for CEmergencyPed
	* vtable for CEntity
	* vtable for CEntityScanner
	* vtable for CEntitySeekPosCalculator
	* vtable for CEntitySeekPosCalculatorDriving
	* vtable for CEntitySeekPosCalculatorEntitySurface
	* vtable for CEntitySeekPosCalculatorFixedPos
	* vtable for CEntitySeekPosCalculatorRadiusAngleOffset
	* vtable for CEntitySeekPosCalculatorStandard
	* vtable for CEntitySeekPosCalculatorVehicleId
	* vtable for CEntitySeekPosCalculatorXYOffset
	* vtable for CEvent
	* vtable for CEventAcquaintancePed
	* vtable for CEventAcquaintancePedDislike
	* vtable for CEventAcquaintancePedHate
	* vtable for CEventAcquaintancePedHateBadlyLit
	* vtable for CEventAcquaintancePedLike
	* vtable for CEventAcquaintancePedRespect
	* vtable for CEventAreaCodes
	* vtable for CEventAttractor
	* vtable for CEventBuildingCollision
	* vtable for CEventCarUpsideDown
	* vtable for CEventChatPartner
	* vtable for CEventCopCarBeingStolen
	* vtable for CEventCreatePartnerTask
	* vtable for CEventDamage
	* vtable for CEventDanger
	* vtable for CEventDeadPed
	* vtable for CEventDeath
	* vtable for CEventDontJoinPlayerGroup
	* vtable for CEventDraggedOutCar
	* vtable for CEventEditableResponse
	* vtable for CEventEscalator
	* vtable for CEventFireNearby
	* vtable for CEventGlobalGroup
	* vtable for CEventGotKnockedOverByCar
	* vtable for CEventGroup
	* vtable for CEventGroupEvent
	* vtable for CEventGunAimedAt
	* vtable for CEventGunShot
	* vtable for CEventGunShotWhizzedBy
	* vtable for CEventHealthLow
	* vtable for CEventHealthReallyLow
	* vtable for CEventHighAngerAtPlayer
	* vtable for CEventHitByWaterCannon
	* vtable for CEventInAir
	* vtable for CEventInWater
	* vtable for CEventInteriorUseInfo
	* vtable for CEventKnockOffBike
	* vtable for CEventLeaderEnteredCarAsDriver
	* vtable for CEventLeaderEntryExit
	* vtable for CEventLeaderExitedCarAsDriver
	* vtable for CEventLeaderQuitEnteringCarAsDriver
	* vtable for CEventLeanOnVehicle
	* vtable for CEventLowAngerAtPlayer
	* vtable for CEventNewGangMember
	* vtable for CEventObjectCollision
	* vtable for CEventOnFire
	* vtable for CEventPassObject
	* vtable for CEventPedCollisionWithPed
	* vtable for CEventPedCollisionWithPlayer
	* vtable for CEventPedEnteredMyVehicle
	* vtable for CEventPedToChase
	* vtable for CEventPedToFlee
	* vtable for CEventPlayerCollisionWithPed
	* vtable for CEventPlayerCommandToGroup
	* vtable for CEventPlayerCommandToGroupAttack
	* vtable for CEventPlayerCommandToGroupGather
	* vtable for CEventPotentialGetRunOver
	* vtable for CEventPotentialWalkIntoBuilding
	* vtable for CEventPotentialWalkIntoFire
	* vtable for CEventPotentialWalkIntoObject
	* vtable for CEventPotentialWalkIntoPed
	* vtable for CEventPotentialWalkIntoVehicle
	* vtable for CEventRevived
	* vtable for CEventScriptCommand
	* vtable for CEventScriptedAttractor
	* vtable for CEventSeenCop
	* vtable for CEventSeenPanickedPed
	* vtable for CEventSexyPed
	* vtable for CEventSexyVehicle
	* vtable for CEventSignalAtPed
	* vtable for CEventSoundLoud
	* vtable for CEventSoundQuiet
	* vtable for CEventSpecial
	* vtable for CEventStuckInAir
	* vtable for CEventVehicleCollision
	* vtable for CEventVehicleDamage
	* vtable for CEventVehicleDamageCollision
	* vtable for CEventVehicleDamageWeapon
	* vtable for CEventVehicleDied
	* vtable for CEventVehicleHitAndRun
	* vtable for CEventVehicleOnFire
	* vtable for CEventVehicleThreat
	* vtable for CEventVehicleToSteal
	* vtable for CHID
	* vtable for CHIDJoystick
	* vtable for CHIDJoystickIOSExtended
	* vtable for CHIDJoystickIOSSimple
	* vtable for CHIDJoystickMogaPocket
	* vtable for CHIDJoystickMogaPro
	* vtable for CHIDJoystickPS3
	* vtable for CHIDJoystickXbox360
	* vtable for CHIDKeyboard
	* vtable for CHIDKeyboardPC
	* vtable for CHandObject
	* vtable for CHeli
	* vtable for CLodAtomicModelInfo
	* vtable for CLodTimeModelInfo
	* vtable for CMonsterTruck
	* vtable for CNetworkPC
	* vtable for CObject
	* vtable for CObjectScanner
	* vtable for COctTree
	* vtable for COctTreeBase
	* vtable for CPed
	* vtable for CPedAtmAttractor
	* vtable for CPedAttractor
	* vtable for CPedGroupDefaultTaskAllocator
	* vtable for CPedGroupDefaultTaskAllocatorChat
	* vtable for CPedGroupDefaultTaskAllocatorFollowAnyMeans
	* vtable for CPedGroupDefaultTaskAllocatorFollowLimited
	* vtable for CPedGroupDefaultTaskAllocatorRandom
	* vtable for CPedGroupDefaultTaskAllocatorSitInLeaderCar
	* vtable for CPedGroupDefaultTaskAllocatorStandStill
	* vtable for CPedLookAtAttractor
	* vtable for CPedModelInfo
	* vtable for CPedParkAttractor
	* vtable for CPedPizzaAttractor
	* vtable for CPedScanner
	* vtable for CPedScriptedAttractor
	* vtable for CPedSeatAttractor
	* vtable for CPedShelterAttractor
	* vtable for CPedStepAttractor
	* vtable for CPedStopAttractor
	* vtable for CPedTriggerScriptAttractor
	* vtable for CPhysical
	* vtable for CPlaceable
	* vtable for CPlane
	* vtable for CPlayerPed
	* vtable for CProjectile
	* vtable for CQuadBike
	* vtable for CTask
	* vtable for CTaskAllocator
	* vtable for CTaskAllocatorAttack
	* vtable for CTaskAllocatorKillOnFoot
	* vtable for CTaskAllocatorKillThreatsBasic
	* vtable for CTaskAllocatorKillThreatsBasicRandomGroup
	* vtable for CTaskAllocatorKillThreatsDriveby
	* vtable for CTaskAllocatorPlayerCommandAttack
	* vtable for CTaskAllocatorPlayerCommandRetreat
	* vtable for CTaskAllocatorRetreat
	* vtable for CTaskComplex
	* vtable for CTaskComplexArrestPed
	* vtable for CTaskComplexAttractorPartnerWait
	* vtable for CTaskComplexAvoidEntity
	* vtable for CTaskComplexAvoidOtherPedWhileWandering
	* vtable for CTaskComplexBeCop
	* vtable for CTaskComplexBeInCouple
	* vtable for CTaskComplexBeInGroup
	* vtable for CTaskComplexBeStill
	* vtable for CTaskComplexCarDrive
	* vtable for CTaskComplexCarDriveMission
	* vtable for CTaskComplexCarDriveMissionFleeScene
	* vtable for CTaskComplexCarDriveMissionKillPed
	* vtable for CTaskComplexCarDriveWander
	* vtable for CTaskComplexCarSlowBeDraggedOut
	* vtable for CTaskComplexCarSlowBeDraggedOutAndStandUp
	* vtable for CTaskComplexChat
	* vtable for CTaskComplexClimb
	* vtable for CTaskComplexCopInCar
	* vtable for CTaskComplexCrossRoadLookAndAchieveHeading
	* vtable for CTaskComplexDestroyCar
	* vtable for CTaskComplexDestroyCarArmed
	* vtable for CTaskComplexDestroyCarMelee
	* vtable for CTaskComplexDie
	* vtable for CTaskComplexDieInCar
	* vtable for CTaskComplexDiveFromAttachedEntityAndGetUp
	* vtable for CTaskComplexDragPedFromCar
	* vtable for CTaskComplexDriveFireTruck
	* vtable for CTaskComplexDrivePointRoute
	* vtable for CTaskComplexDriveToPoint
	* vtable for CTaskComplexEnterAnyCarAsDriver
	* vtable for CTaskComplexEnterBoatAsDriver
	* vtable for CTaskComplexEnterCar
	* vtable for CTaskComplexEnterCarAsDriver
	* vtable for CTaskComplexEnterCarAsDriverTimed
	* vtable for CTaskComplexEnterCarAsPassenger
	* vtable for CTaskComplexEnterCarAsPassengerTimed
	* vtable for CTaskComplexEnterCarAsPassengerWait
	* vtable for CTaskComplexEvasiveCower
	* vtable for CTaskComplexEvasiveDiveAndGetUp
	* vtable for CTaskComplexEvasiveStep
	* vtable for CTaskComplexExtinguishFireOnFoot
	* vtable for CTaskComplexExtinguishFires
	* vtable for CTaskComplexFacial
	* vtable for CTaskComplexFallAndGetUp
	* vtable for CTaskComplexFallAndStayDown
	* vtable for CTaskComplexFallToDeath
	* vtable for CTaskComplexFleeAnyMeans
	* vtable for CTaskComplexFleeEntity
	* vtable for CTaskComplexFleePoint
	* vtable for CTaskComplexFleeShooting
	* vtable for CTaskComplexFollowLeaderAnyMeans
	* vtable for CTaskComplexFollowLeaderInFormation
	* vtable for CTaskComplexFollowNodeRoute
	* vtable for CTaskComplexFollowNodeRouteShooting
	* vtable for CTaskComplexFollowPatrolRoute
	* vtable for CTaskComplexFollowPedFootsteps
	* vtable for CTaskComplexFollowPointRoute
	* vtable for CTaskComplexGangFollower
	* vtable for CTaskComplexGangJoinRespond
	* vtable for CTaskComplexGangLeader
	* vtable for CTaskComplexGetOnBoatSeat
	* vtable for CTaskComplexGetUpAndStandStill
	* vtable for CTaskComplexGoPickUpEntity
	* vtable for CTaskComplexGoToAttractor
	* vtable for CTaskComplexGoToBoatSteeringWheel
	* vtable for CTaskComplexGoToCarDoorAndStandStill
	* vtable for CTaskComplexGoToPointAiming
	* vtable for CTaskComplexGoToPointAndStandStill
	* vtable for CTaskComplexGoToPointAndStandStillAndAchieveHeading
	* vtable for CTaskComplexGoToPointAndStandStillTimed
	* vtable for CTaskComplexGoToPointAnyMeans
	* vtable for CTaskComplexGoToPointShooting
	* vtable for CTaskComplexGoToPointUntilCollisionAndStandStill
	* vtable for CTaskComplexGotoDoorAndOpen
	* vtable for CTaskComplexHitByGunResponse
	* vtable for CTaskComplexHitPedWithCar
	* vtable for CTaskComplexHitResponse
	* vtable for CTaskComplexInAirAndLand
	* vtable for CTaskComplexInWater
	* vtable for CTaskComplexInvestigateDeadPed
	* vtable for CTaskComplexInvestigateDisturbance
	* vtable for CTaskComplexJump
	* vtable for CTaskComplexKillAllThreats
	* vtable for CTaskComplexKillCriminal
	* vtable for CTaskComplexKillPedFromBoat
	* vtable for CTaskComplexKillPedGroupOnFoot
	* vtable for CTaskComplexKillPedOnFoot
	* vtable for CTaskComplexKillPedOnFootArmed
	* vtable for CTaskComplexKillPedOnFootMelee
	* vtable for CTaskComplexKillPedOnFootStealth
	* vtable for CTaskComplexLeaveAnyCar
	* vtable for CTaskComplexLeaveBoat
	* vtable for CTaskComplexLeaveCar
	* vtable for CTaskComplexLeaveCarAndDie
	* vtable for CTaskComplexLeaveCarAndFlee
	* vtable for CTaskComplexLeaveCarAndWander
	* vtable for CTaskComplexLeaveCarAsPassengerWait
	* vtable for CTaskComplexMedicTreatInjuredPed
	* vtable for CTaskComplexMoveBackAndJump
	* vtable for CTaskComplexObserveTrafficLights
	* vtable for CTaskComplexObserveTrafficLightsAndAchieveHeading
	* vtable for CTaskComplexOnFire
	* vtable for CTaskComplexOpenDriverDoor
	* vtable for CTaskComplexOpenPassengerDoor
	* vtable for CTaskComplexPartner
	* vtable for CTaskComplexPartnerChat
	* vtable for CTaskComplexPartnerDeal
	* vtable for CTaskComplexPartnerGreet
	* vtable for CTaskComplexPartnerShove
	* vtable for CTaskComplexPassObject
	* vtable for CTaskComplexPlayHandSignalAnim
	* vtable for CTaskComplexPolicePursuit
	* vtable for CTaskComplexPresentIDToCop
	* vtable for CTaskComplexProstituteSolicit
	* vtable for CTaskComplexReactToAttack
	* vtable for CTaskComplexReactToGunAimedAt
	* vtable for CTaskComplexRoadRage
	* vtable for CTaskComplexScreamInCarThenLeave
	* vtable for CTaskComplexSeekCoverUntilTargetDead
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculator>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorDriving>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorEntitySurface>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorFixedPos>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorRadiusAngleOffset>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorStandard>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorVehicleId>
	* vtable for CTaskComplexSeekEntity<CEntitySeekPosCalculatorXYOffset>
	* vtable for CTaskComplexSeekEntityAiming
	* vtable for CTaskComplexSeekEntityAnyMeans<CEntitySeekPosCalculatorXYOffset>
	* vtable for CTaskComplexSequence
	* vtable for CTaskComplexShuffleSeats
	* vtable for CTaskComplexSignalAtPed
	* vtable for CTaskComplexSitDownThenIdleThenStandUp
	* vtable for CTaskComplexSmartFleeEntity
	* vtable for CTaskComplexSmartFleePoint
	* vtable for CTaskComplexStareAtPed
	* vtable for CTaskComplexStealCar
	* vtable for CTaskComplexStuckInAir
	* vtable for CTaskComplexSunbathe
	* vtable for CTaskComplexTrackEntity
	* vtable for CTaskComplexTreatAccident
	* vtable for CTaskComplexTurnToFaceEntityOrCoord
	* vtable for CTaskComplexUseAttractor
	* vtable for CTaskComplexUseAttractorPartner
	* vtable for CTaskComplexUseClosestFreeScriptedAttractor
	* vtable for CTaskComplexUseClosestFreeScriptedAttractorRun
	* vtable for CTaskComplexUseClosestFreeScriptedAttractorSprint
	* vtable for CTaskComplexUseEffect
	* vtable for CTaskComplexUseEffectRunning
	* vtable for CTaskComplexUseEffectSprinting
	* vtable for CTaskComplexUseEntryExit
	* vtable for CTaskComplexUseGoggles
	* vtable for CTaskComplexUseMobilePhone
	* vtable for CTaskComplexUsePairedAttractor
	* vtable for CTaskComplexUseScriptedAttractor
	* vtable for CTaskComplexUseScriptedBrain
	* vtable for CTaskComplexUseSequence
	* vtable for CTaskComplexUseSwatRope
	* vtable for CTaskComplexUseWaterCannon
	* vtable for CTaskComplexWaitAtAttractor
	* vtable for CTaskComplexWaitForBackup
	* vtable for CTaskComplexWaitForBus
	* vtable for CTaskComplexWaitForDryWeather
	* vtable for CTaskComplexWaitForPed
	* vtable for CTaskComplexWalkAlongsidePed
	* vtable for CTaskComplexWalkRoundBuildingAttempt
	* vtable for CTaskComplexWalkRoundCar
	* vtable for CTaskComplexWalkRoundFire
	* vtable for CTaskComplexWalkRoundObject
	* vtable for CTaskComplexWander
	* vtable for CTaskComplexWanderCop
	* vtable for CTaskComplexWanderCriminal
	* vtable for CTaskComplexWanderFlee
	* vtable for CTaskComplexWanderGang
	* vtable for CTaskComplexWanderMedic
	* vtable for CTaskComplexWanderProstitute
	* vtable for CTaskComplexWanderStandard
	* vtable for CTaskGangHasslePed
	* vtable for CTaskGangHassleVehicle
	* vtable for CTaskGoToVehicleAndLean
	* vtable for CTaskInteriorBeInHouse
	* vtable for CTaskInteriorBeInOffice
	* vtable for CTaskInteriorBeInShop
	* vtable for CTaskInteriorGoToInfo
	* vtable for CTaskInteriorLieInBed
	* vtable for CTaskInteriorShopKeeper
	* vtable for CTaskInteriorSitAtDesk
	* vtable for CTaskInteriorSitInChair
	* vtable for CTaskInteriorUseInfo
	* vtable for CTaskLeanOnVehicle
	* vtable for CTaskSimple
	* vtable for CTaskSimpleAbseil
	* vtable for CTaskSimpleAchieveHeading
	* vtable for CTaskSimpleAffectSecondaryBehaviour
	* vtable for CTaskSimpleAnim
	* vtable for CTaskSimpleArrestPed
	* vtable for CTaskSimpleBeHit
	* vtable for CTaskSimpleBeHitWhileMoving
	* vtable for CTaskSimpleBeKickedOnGround
	* vtable for CTaskSimpleBikeJacked
	* vtable for CTaskSimpleCarAlign
	* vtable for CTaskSimpleCarCloseDoorFromInside
	* vtable for CTaskSimpleCarCloseDoorFromOutside
	* vtable for CTaskSimpleCarDrive
	* vtable for CTaskSimpleCarDriveTimed
	* vtable for CTaskSimpleCarFallOut
	* vtable for CTaskSimpleCarForcePedOut
	* vtable for CTaskSimpleCarGetIn
	* vtable for CTaskSimpleCarGetOut
	* vtable for CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse
	* vtable for CTaskSimpleCarJumpOut
	* vtable for CTaskSimpleCarOpenDoorFromOutside
	* vtable for CTaskSimpleCarOpenLockedDoorFromOutside
	* vtable for CTaskSimpleCarSetPedInAsDriver
	* vtable for CTaskSimpleCarSetPedInAsPassenger
	* vtable for CTaskSimpleCarSetPedOut
	* vtable for CTaskSimpleCarSetPedSlowDraggedOut
	* vtable for CTaskSimpleCarSetTempAction
	* vtable for CTaskSimpleCarShuffle
	* vtable for CTaskSimpleCarSlowBeDraggedOut
	* vtable for CTaskSimpleCarSlowDragPedOut
	* vtable for CTaskSimpleCarWaitForDoorNotToBeInUse
	* vtable for CTaskSimpleCarWaitToSlowDown
	* vtable for CTaskSimpleChat
	* vtable for CTaskSimpleChoking
	* vtable for CTaskSimpleClearLookAt
	* vtable for CTaskSimpleClimb
	* vtable for CTaskSimpleCower
	* vtable for CTaskSimpleCreateCarAndGetIn
	* vtable for CTaskSimpleDead
	* vtable for CTaskSimpleDetonate
	* vtable for CTaskSimpleDie
	* vtable for CTaskSimpleDieInCar
	* vtable for CTaskSimpleDoHandSignal
	* vtable for CTaskSimpleDrown
	* vtable for CTaskSimpleDrownInCar
	* vtable for CTaskSimpleDuck
	* vtable for CTaskSimpleDuckToggle
	* vtable for CTaskSimpleDuckWhileShotsWhizzing
	* vtable for CTaskSimpleEvasiveDive
	* vtable for CTaskSimpleEvasiveStep
	* vtable for CTaskSimpleFacial
	* vtable for CTaskSimpleFall
	* vtable for CTaskSimpleFight
	* vtable for CTaskSimpleFightingControl
	* vtable for CTaskSimpleFinishBrain
	* vtable for CTaskSimpleGangDriveBy
	* vtable for CTaskSimpleGetUp
	* vtable for CTaskSimpleGiveCPR
	* vtable for CTaskSimpleGoTo
	* vtable for CTaskSimpleGoToPoint
	* vtable for CTaskSimpleGoToPointFine
	* vtable for CTaskSimpleGunControl
	* vtable for CTaskSimpleHailTaxi
	* vtable for CTaskSimpleHailTaxiAndPause
	* vtable for CTaskSimpleHandsUp
	* vtable for CTaskSimpleHitByGunFromFront
	* vtable for CTaskSimpleHitByGunFromLeft
	* vtable for CTaskSimpleHitByGunFromRear
	* vtable for CTaskSimpleHitByGunFromRight
	* vtable for CTaskSimpleHitFromBack
	* vtable for CTaskSimpleHitFromBehind
	* vtable for CTaskSimpleHitFromFront
	* vtable for CTaskSimpleHitFromLeft
	* vtable for CTaskSimpleHitFromRight
	* vtable for CTaskSimpleHitHead
	* vtable for CTaskSimpleHitWall
	* vtable for CTaskSimpleHoldEntity
	* vtable for CTaskSimpleHurtPedWithCar
	* vtable for CTaskSimpleIKChain
	* vtable for CTaskSimpleIKLookAt
	* vtable for CTaskSimpleIKManager
	* vtable for CTaskSimpleIKPointArm
	* vtable for CTaskSimpleInAir
	* vtable for CTaskSimpleJetPack
	* vtable for CTaskSimpleJump
	* vtable for CTaskSimpleKillPedWithCar
	* vtable for CTaskSimpleLand
	* vtable for CTaskSimpleLookAbout
	* vtable for CTaskSimpleNone
	* vtable for CTaskSimpleOnEscalator
	* vtable for CTaskSimplePause
	* vtable for CTaskSimplePickUpBike
	* vtable for CTaskSimplePickUpEntity
	* vtable for CTaskSimplePlayHandSignalAnim
	* vtable for CTaskSimplePlayerOnFire
	* vtable for CTaskSimplePlayerOnFoot
	* vtable for CTaskSimplePutDownEntity
	* vtable for CTaskSimpleRunAnim
	* vtable for CTaskSimpleRunAnimLoopedMiddle
	* vtable for CTaskSimpleRunNamedAnim
	* vtable for CTaskSimpleRunTimedAnim
	* vtable for CTaskSimpleSay
	* vtable for CTaskSimpleScratchHead
	* vtable for CTaskSimpleSetCharDecisionMaker
	* vtable for CTaskSimpleSetCharIgnoreWeaponRangeFlag
	* vtable for CTaskSimpleSetKindaStayInSamePlace
	* vtable for CTaskSimpleSetPedAsAutoDriver
	* vtable for CTaskSimpleSetStayInSamePlace
	* vtable for CTaskSimpleShakeFist
	* vtable for CTaskSimpleSitDown
	* vtable for CTaskSimpleSitIdle
	* vtable for CTaskSimpleSlideToCoord
	* vtable for CTaskSimpleStandStill
	* vtable for CTaskSimpleStandUp
	* vtable for CTaskSimpleStealthKill
	* vtable for CTaskSimpleSwim
	* vtable for CTaskSimpleThrowControl
	* vtable for CTaskSimpleThrowProjectile
	* vtable for CTaskSimpleTired
	* vtable for CTaskSimpleTogglePedThreatScanner
	* vtable for CTaskSimpleTriggerEvent
	* vtable for CTaskSimpleTriggerLookAt
	* vtable for CTaskSimpleTurn180
	* vtable for CTaskSimpleUninterruptable
	* vtable for CTaskSimpleUseAtm
	* vtable for CTaskSimpleUseGun
	* vtable for CTaskSimpleWaitForBus
	* vtable for CTaskSimpleWaitForPizza
	* vtable for CTaskSimpleWaitUntilAreaCodesMatch
	* vtable for CTaskSimpleWaitUntilLeaderAreaCodesMatch
	* vtable for CTaskSimpleWaitUntilPedIsInCar
	* vtable for CTaskSimpleWaitUntilPedIsOutCar
	* vtable for CTimeModelInfo
	* vtable for CTrailer
	* vtable for CTrain
	* vtable for CVehicle
	* vtable for CVehicleModelInfo
	* vtable for CVehicleScanner
	* vtable for CWeaponModelInfo
	* vtable for CWidget
	* vtable for CWidgetButton
	* vtable for CWidgetButtonAnimated
	* vtable for CWidgetButtonAnimatedArcade
	* vtable for CWidgetButtonAttack
	* vtable for CWidgetButtonAutoHydraulics
	* vtable for CWidgetButtonBasketballShoot
	* vtable for CWidgetButtonDrop
	* vtable for CWidgetButtonEnterCar
	* vtable for CWidgetButtonHelpText
	* vtable for CWidgetButtonHorn
	* vtable for CWidgetButtonHydraulics
	* vtable for CWidgetButtonMissionCancel
	* vtable for CWidgetButtonMissionStart
	* vtable for CWidgetButtonSchool
	* vtable for CWidgetButtonSkipCutscene
	* vtable for CWidgetButtonSprint
	* vtable for CWidgetButtonSwim
	* vtable for CWidgetButtonVCShoot
	* vtable for CWidgetButtonVehicleShoot
	* vtable for CWidgetHelpText
	* vtable for CWidgetHorseResults
	* vtable for CWidgetInfoFrame
	* vtable for CWidgetList
	* vtable for CWidgetListShop
	* vtable for CWidgetListText
	* vtable for CWidgetMap
	* vtable for CWidgetMissionTimers
	* vtable for CWidgetPlayerInfo
	* vtable for CWidgetPool
	* vtable for CWidgetRaceResults
	* vtable for CWidgetRacing
	* vtable for CWidgetRadar
	* vtable for CWidgetRegion
	* vtable for CWidgetRegionArcadeStick
	* vtable for CWidgetRegionBasketBallJump
	* vtable for CWidgetRegionColorPicker
	* vtable for CWidgetRegionDriveHybrid
	* vtable for CWidgetRegionFlick
	* vtable for CWidgetRegionGang
	* vtable for CWidgetRegionHydraulics
	* vtable for CWidgetRegionLook
	* vtable for CWidgetRegionMove
	* vtable for CWidgetRegionPoolBallInHand
	* vtable for CWidgetRegionPoolEnglish
	* vtable for CWidgetRegionResponse
	* vtable for CWidgetRegionRhythmSelect
	* vtable for CWidgetRegionSprint
	* vtable for CWidgetRegionSteer
	* vtable for CWidgetRegionSteeringSelection
	* vtable for CWidgetRegionSwipeRadio
	* vtable for CWidgetRegionTouchLayoutSelection
	* vtable for CWidgetRouletteSpin
	* vtable for CWidgetSlider
	* vtable for CWidgetTapMeter
	* vtable for CWidgetThumbCircle
	* vtable for CWidgetVitalStats
	* vtable for CWidgetWager
	* vtable for CharSelectScreen
	* vtable for CloudWaitScreen
	* vtable for ConfirmationScreen
	* vtable for ControlsScreen
	* vtable for DeleteScreen
	* vtable for DeleteScreen::DeleteScreenSelection
	* vtable for DisplayScreen
	* vtable for DownloadScreen
	* vtable for ES2IndexBuffer
	* vtable for ES2ResourceContainer
	* vtable for ES2Shader
	* vtable for ES2Texture
	* vtable for ES2TextureContainer
	* vtable for ES2VertexBuffer
	* vtable for ES2VertexState
	* vtable for FlowScreen
	* vtable for FxEmitterBP_c
	* vtable for FxEmitter_c
	* vtable for FxInfoAnimTexture_c
	* vtable for FxInfoAttractLine_c
	* vtable for FxInfoAttractPt_c
	* vtable for FxInfoColourBright_c
	* vtable for FxInfoColourRange_c
	* vtable for FxInfoColour_c
	* vtable for FxInfoDir_c
	* vtable for FxInfoEmAngle_c
	* vtable for FxInfoEmDir_c
	* vtable for FxInfoEmLife_c
	* vtable for FxInfoEmPos_c
	* vtable for FxInfoEmRate_c
	* vtable for FxInfoEmRotation_c
	* vtable for FxInfoEmSize_c
	* vtable for FxInfoEmSpeed_c
	* vtable for FxInfoEmWeather_c
	* vtable for FxInfoFlat_c
	* vtable for FxInfoFloat_c
	* vtable for FxInfoForce_c
	* vtable for FxInfoFriction_c
	* vtable for FxInfoGroundCollide_c
	* vtable for FxInfoHeatHaze_c
	* vtable for FxInfoJitter_c
	* vtable for FxInfoNoise_c
	* vtable for FxInfoRotSpeed_c
	* vtable for FxInfoSelfLit_c
	* vtable for FxInfoSize_c
	* vtable for FxInfoSmoke_c
	* vtable for FxInfoSpriteRect_c
	* vtable for FxInfoTrail_c
	* vtable for FxInfoUnderwater_c
	* vtable for FxInfoWind_c
	* vtable for FxInfo_c
	* vtable for FxInterpInfo255_c
	* vtable for FxInterpInfo32_c
	* vtable for FxInterpInfoFloat_c
	* vtable for FxInterpInfoU255_c
	* vtable for FxInterpInfo_c
	* vtable for FxPrimBP_c
	* vtable for FxPrim_c
	* vtable for GameScreen
	* vtable for LanguageScreen
	* vtable for LoadScreen
	* vtable for LoadScreen::LoadScreenSelection
	* vtable for MainMenuScreen
	* vtable for MenuScreen
	* vtable for OALBase
	* vtable for OALBuffer
	* vtable for OALSource
	* vtable for OkScreen
	* vtable for RQIndexBuffer
	* vtable for RQShader
	* vtable for RQTexture
	* vtable for RQVertexBuffer
	* vtable for RQVertexState
	* vtable for SaveScreen
	* vtable for SaveScreen::SaveScreenSelection
	* vtable for SaveSelectScreen
	* vtable for SaveSelectScreen::SaveSelection
	* vtable for SelectScreen
	* vtable for SelectScreen::ActionSelection
	* vtable for SelectScreen::MenuSelection
	* vtable for SelectScreen::SettingSelection
	* vtable for SettingsScreen
	* vtable for StartGameScreen
	* vtable for StatsScreen
	* vtable for TextureDatabase
	* vtable for TextureDatabaseRuntime
	* vtable for YesNoScreen
	* vtable for ZIPFile
	* vtable for __cxxabiv1::__class_type_info
	* vtable for __cxxabiv1::__forced_unwind
	* vtable for __cxxabiv1::__foreign_exception
	* vtable for __cxxabiv1::__si_class_type_info
	* vtable for __gnu_cxx::__concurrence_lock_error
	* vtable for __gnu_cxx::__concurrence_unlock_error
	* vtable for std::bad_exception
	* vtable for std::exception
	* vtable for std::type_info
	* wasPlaylistPlaying
	* waterVars
	* windowSize
	* worldTKList
	* z_errmsg

Functions list:
	* ATCConvertFromDXT1(int, int, void*)
	* ATCConvertFromDXT1A(int, int, void*)
	* ATCConvertFromDXT3(int, int, void*)
	* ATCConvertFromDXT5(int, int, void*)
	* ActivateDirectional()
	* AddAmazonFiles(bool)
	* AddAnExtraDirectionalLight(RpWorld*, float, float, float, float, float, float)
	* AddDataFence()
	* AddLoaderTask(LoadTask*)
	* AddMenuStat(MenuStat, int)
	* AddSCCloudWatch()
	* AddToQueue(Queue*, int)
	* AllowDistanceFog()
	* AllowNagScreen()
	* AndroidPause()
	* AndroidPaused()
	* AppEventHandler(RsEvent, void*)
	* AppendAllDeviceList
	* AppendCaptureDeviceList
	* AppendDeviceList
	* ApplyPanelDamageToCar(unsigned int, CAutomobile*, bool)
	* AsciiToGxtChar(char const*, unsigned short*)
	* AssertFailed(char const*, char const*, int)
	* AsyncFileLock()
	* AsyncFileUnlock()
	* AtomicDefaultRenderCallBack(RpAtomic*)
	* AtomicRemoveAnimFromSkinCB(RpAtomic*, void*)
	* AttachAtomicsFromListCB(RpAtomic*, void*)
	* AttachInputDevices()
	* BackPressed()
	* BankLoadingThread(void*)
	* BreakableConstructor(void*, int, int)
	* BreakableDestructor(void*, int, int)
	* BreakablePluginAttach()
	* BreakableStreamGetSize(void const*, int, int)
	* BreakableStreamRead(RwStream*, int, void*, int, int)
	* BreakableStreamWrite(RwStream*, int, void const*, int, int)
	* BreakableTransfer(RpAtomic*, RpAtomic*)
	* BufferEmptyOutputBuffer(jpeg_compress_struct*)
	* BufferFillInputBuffer(jpeg_decompress_struct*)
	* BufferInitDestination(jpeg_compress_struct*)
	* BufferSkipInputData(jpeg_decompress_struct*, long)
	* BufferTermDestination(jpeg_compress_struct*)
	* BuildPixelSource(unsigned int)
	* BuildVertexSource(unsigned int)
	* BytesFromDevFmt
	* BytesFromFmt
	* BytesFromUserFmt
	* CalcNewDelta(RwV2d*, RwV2d*)
	* CalcNewDeltaVal(RwV2d*, RwV2d*)
	* CalcNonAttnSourceParams
	* CalcScreenCoors(CVector const&, CVector*)
	* CalcScreenCoors(CVector const&, CVector*, float*, float*)
	* CalcSourceParams
	* CalculateBoundingSphereRadiusCB(RpAtomic*, void*)
	* CalculateColPointInsideBox(CBox const&, CVector const&, CColPoint&)
	* CalculateMapLimits(float*, float*, float*, float*)
	* CamShakeNoPos(CCamera*, float)
	* CameraCreate(int, int, int)
	* CameraDestroy(RwCamera*)
	* CameraObscuredByWaterLevel()
	* CameraSize(RwCamera*, RwRect*, float, float)
	* CanVideoCardDoDXT()
	* CapturePad(unsigned int)
	* CdStreamClose(int)
	* CdStreamGetLastPosn()
	* CdStreamGetStatus(int)
	* CdStreamInit(int)
	* CdStreamInitThread()
	* CdStreamOpen(char const*, bool)
	* CdStreamRead(int, void*, unsigned int, unsigned int)
	* CdStreamRemoveImages()
	* CdStreamResume()
	* CdStreamShutdown()
	* CdStreamSuspend()
	* CdStreamSync(int)
	* CdStreamThread(void*)
	* ChannelsFromDevFmt
	* ChannelsFromFmt
	* ChannelsFromUserFmt
	* CheckAniso()
	* CheckBones(RpHAnimHierarchy*)
	* CheckValidCam()
	* CheckVideoCardCaps()
	* ChooseComponent(int, int)
	* ClassSerializeError(int, int)
	* ClearLightApplied()
	* ClearMenuStats()
	* ClipRadarTileCoords(int&, int&)
	* CloneAtomicToFrameCB(RwObject*, void*)
	* CloseFile(int)
	* ClosestSquaredDistanceBetweenFiniteLines(CVector*, CVector*, CVector*, CVector*, float)
	* ClumpCollisionConstructor(void*, int, int)
	* ClumpCollisionCopyConstructor(void*, void const*, int, int)
	* ClumpCollisionDestructor(void*, int, int)
	* ConfigValueExists
	* ConvertBoneTag2BoneName(int)
	* ConvertDXTToRaw16(void const*, RQTextureFormat, unsigned int, unsigned int)
	* ConvertDXTToRaw8888(void const*, RQTextureFormat, unsigned int, unsigned int)
	* ConvertPedNode2BoneTag(int)
	* ConvertingTexturesScreen(unsigned int, unsigned int, char const*)
	* CopyCameraRasterScanlineToTexture(RwRaster*, int, unsigned int, unsigned int)
	* CopyObjectsCB(RwObject*, void*)
	* CorrectAspect(float&, float&, float&, float&)
	* CountAtomicsCB(RpAtomic*, void*)
	* CountCompsInRule(int)
	* CranesLoad(unsigned char*, unsigned int)
	* CreateCarColourTexture(unsigned char, unsigned char, unsigned char)
	* CreateDebugFont()
	* CreateIdleThread()
	* CreateRingBuffer
	* CreateTextureData(RwPlatformID, RwRaster*)
	* CreateTxdImageForVideoCard()
	* CreateUncompressedImage(unsigned char*, unsigned char, unsigned int, unsigned int, unsigned char)
	* CrossProduct(CVector const&, CVector const&)
	* DeActivateDirectional()
	* DealWithTxdWriteError(unsigned int, unsigned int, char const*)
	* DebugHelpSystem(char const*, char const*, int)
	* DecodeDXTColorBlock(unsigned char const*, unsigned int*, unsigned int, bool)
	* DecomposeDevFormat
	* DecomposeFormat
	* DecomposeUserFormat
	* DefinedState()
	* DefinedState2d()
	* DestroyDebugFont()
	* DestroyRingBuffer
	* DestroyTexture(RwTexture*&)
	* DestroyVehicleAndDriverAndPassengers(CVehicle*)
	* Diag_GetFPS()
	* DisableHorn()
	* DisableMatFx(RpMaterial*, void*)
	* DisplayFPS()
	* DoFade()
	* DoGameRestart()
	* DoGameState()
	* DoHaspChecks()
	* DoRWStuffEndOfFrame(bool)
	* DoRWStuffStartOfFrame(short, short, short, short, short, short, short)
	* DoRWStuffStartOfFrame_Horizon(short, short, short, short, short, short, short)
	* DoesInfiniteLineCrossFiniteLine(float, float, float, float, float, float, float, float)
	* DoesInfiniteLineTouchScreen(float, float, float, float)
	* DoesLineSegmentIntersect(float, float, float, float, float, float, float, float)
	* DownHeld()
	* DownPressed()
	* DownloadThread(void*)
	* EAXVerbCreate
	* ES2BindActiveTextures()
	* EchoCreate
	* EnumString(unsigned int)
	* FTrunc(float, int)
	* FadeVectorLocation(CVector, float)
	* FindAtomicFromNameCB(RpAtomic*, void*)
	* FindCBFunction(unsigned char)
	* FindCBFunctionID(void (*)(CAnimBlendAssociation*, void*))
	* FindClosestPtOnLine(RwV3d*, RwV3d*, RwV3d*, RwV3d*)
	* FindCutsceneAudioTrackId(char const*)
	* FindFlightHeight(CPlane*, float)
	* FindHeadRadiusCB(RwObject*, void*)
	* FindHeightForVerticalAngle(CPlane*, float, float, float*)
	* FindPedFrameFromNameCB(RwFrame*, void*)
	* FindPlayerCentreOfWorld(int)
	* FindPlayerCentreOfWorldForMap(int)
	* FindPlayerCentreOfWorld_NoSniperShift(int)
	* FindPlayerCoors(int)
	* FindPlayerEntity(int)
	* FindPlayerHeading(int)
	* FindPlayerHeight()
	* FindPlayerPed(int)
	* FindPlayerSpeed(int)
	* FindPlayerTrain(int)
	* FindPlayerVehicle(int, bool)
	* FindPlayerWanted(int)
	* FindReplacementUpgradeCB(RwObject*, void*)
	* FindSplinePathPositionFloat(float*, float*, float, unsigned int&)
	* FindSplinePathPositionVector(CVector*, float*, float, unsigned int&)
	* FindUpgradeCB(RpAtomic*, void*)
	* FireOneInstantHitRound(CVector*, CVector*, int)
	* FlushObrsPrintfs()
	* FreeALConfig
	* FrontendIdle()
	* FunctionCalled(char const*, char const*)
	* GLDepthFuncFromRQ(RQDepthFunc)
	* GLDrawModeToRQ(unsigned int)
	* GLFactorFromRQFactor(RQBlendFactor)
	* GLTypeToRQ(unsigned int)
	* GLWOFromRQ(RQWindingOrder)
	* GameInit()
	* Get2DEffectAtomic(RpClump*)
	* Get2DEffectAtomicCallback(RpAtomic*, void*)
	* GetAccidentManager()
	* GetAlphaModulate()
	* GetAmbientLightColor()
	* GetAmbientLightDirty()
	* GetAnimHierarchyFromClump(RpClump*)
	* GetAnimHierarchyFromFrame(RwFrame*)
	* GetAnimHierarchyFromSkinClump(RpClump*)
	* GetAtomicListCB(RpAtomic*, void*)
	* GetAtomicWithName(RpClump*, char const*)
	* GetBestRefreshRate(unsigned int, unsigned int, unsigned int)
	* GetBikeAtomicObjectCB(RwObject*, void*)
	* GetBoatAtomicObjectCB(RwObject*, void*)
	* GetBufferID(CEntity*)
	* GetChangingStatIndex(char const*)
	* GetClothesModelFromName(char const*)
	* GetCompiledShaderWithCode(char const*, TDBArray<RQCompiledShader>&)
	* GetConfigValue
	* GetConfigValueBool
	* GetConfigValueFloat
	* GetConfigValueInt
	* GetContextSuspended
	* GetCurrentAtomicObjectCB(RwObject*, void*)
	* GetCurrentObjectMatrix()
	* GetCurrentProjectionMatrix()
	* GetCurrentTextureMatrix()
	* GetDataAsMips(unsigned char*, unsigned int, unsigned int, bool)
	* GetDataHasAlpha(unsigned char*, unsigned int, unsigned int)
	* GetDayNightBalance()
	* GetDownloadFilename(int)
	* GetES2TargetFormat(RQRenderTarget*)
	* GetEventGlobalGroup()
	* GetExtraColorPtr(RpGeometry*)
	* GetFilename(char const*)
	* GetFirstAtomic(RpClump*)
	* GetFirstAtomicCallback(RpAtomic*, void*)
	* GetFirstChild(RwFrame*)
	* GetFirstFrameCallback(RwFrame*, void*)
	* GetFirstInQueue(Queue*)
	* GetFirstObject(RwFrame*)
	* GetFirstObjectCallback(RwObject*, void*)
	* GetFirstTexture(RwTexDictionary*)
	* GetFirstTextureCallback(RwTexture*, void*)
	* GetFrameNodeName(RwFrame*)
	* GetGLErrorString(unsigned int)
	* GetGTA3ImgSize()
	* GetGlobalColor()
	* GetGlobalColorDirty()
	* GetImmediateColorArray()
	* GetImmediateNormalArray()
	* GetImmediateTexCoordArray()
	* GetImmediateVertexArray()
	* GetJIndex(unsigned short)
	* GetJapaneseWidth(unsigned short, bool)
	* GetJavaVM
	* GetLevelSplashScreen(int)
	* GetLight(unsigned int)
	* GetLightByType(EmuLightType, unsigned int)
	* GetListOfComponentsNotUsedByRules(unsigned int, int, int*)
	* GetMaterialDirty()
	* GetMaterialParameter(unsigned int)
	* GetMaterialShininess()
	* GetMaxStorage()
	* GetMeshPriority(RpMesh const*)
	* GetMillisecondTime()
	* GetMipSize(RwRaster const*, int, unsigned char, unsigned int, unsigned int)
	* GetMobileEffectSetting()
	* GetModelFromName(char const*)
	* GetNameAndDamage(char const*, char*, bool&)
	* GetNearestDistanceOfPedSphereToCameraNearClip(CPed*)
	* GetNextLightApplied()
	* GetNextLine(char const*, char*, unsigned int)
	* GetNumLevels(unsigned int, unsigned int)
	* GetNumPixels(unsigned int, unsigned int)
	* GetOSWPerformanceTime()
	* GetOkAndDamagedAtomicCB(RwObject*, void*)
	* GetPedAttractorManager()
	* GetPipelineID(RpAtomic*)
	* GetPlayerRelationshipRecorder()
	* GetPoolObj(int)
	* GetPoolPed(int)
	* GetPoolVehicle(int)
	* GetRQFormatForRaster(RwRaster*)
	* GetRegisteredShaderCount()
	* GetRegisteredShaders()
	* GetReturnAddress()
	* GetSavedGameDateAndTime(int)
	* GetSecondObject(RwFrame*)
	* GetSecondObjectCallback(RwObject*, void*)
	* GetStackPointer()
	* GetStatFromChangingStatIndex(int)
	* GetTexture(char const*)
	* GetTextureCorners(int, int, CVector2D*)
	* GetThiz()
	* GetTouchDistance(bool, float, float, float, CVector, CVector, float*)
	* GetVideoCardName()
	* GetZVal(float)
	* GettPoolObjRef(CObject*)
	* GettPoolPedRef(CPed*)
	* GettPoolVehicleRef(CVehicle*)
	* GraphicsThread(void*)
	* GxtCharMakeUpperCase(unsigned short*, unsigned short const*)
	* GxtCharOvrStr(unsigned short*, unsigned short*, int)
	* GxtCharStrcat(unsigned short*, unsigned short*)
	* GxtCharStrcpy(unsigned short*, unsigned short const*)
	* GxtCharStrlen(unsigned short const*)
	* GxtCharToAscii(unsigned short*, unsigned char)
	* GxtCharToAsciiForSaveLoad(unsigned short*)
	* HDEmptyOutputBuffer(jpeg_compress_struct*)
	* HDFillInputBuffer(jpeg_decompress_struct*)
	* HDSkipInputData(jpeg_decompress_struct*, long)
	* HDTermDestination(jpeg_compress_struct*)
	* HandleCameraNormals(unsigned short)
	* HandleDecalZ(unsigned short)
	* HandleDetailTexture(RwRaster*)
	* HandleEnhancedDetail(unsigned short)
	* HandleForceZOff(unsigned short)
	* HandleSlotArtillery()
	* HandleSlotAssaultRifles()
	* HandleSlotEquipment()
	* HandleSlotHandguns()
	* HandleSlotLongRifles()
	* HandleSlotMelee()
	* HandleSlotOther()
	* HandleSlotShotguns()
	* HandleSlotSubmachineGuns()
	* HandleSlotThrow()
	* HandleTextureEnhancements(RwRaster*)
	* HasAnimGroupLoaded(AssocGroupId)
	* HasAppJustRegainedForeground()
	* HasLoadTask(ZIPFile*, int, int, int)
	* HashFile(char const*)
	* HashMem(unsigned char const*, unsigned int)
	* HashString(char const*)
	* HashStringNoCase(char const*)
	* INT123_bytes_to_samples
	* INT123_check_decoders
	* INT123_clear_icy
	* INT123_compat_close
	* INT123_compat_open
	* INT123_compute_bpf
	* INT123_dct36
	* INT123_dct64
	* INT123_decclass
	* INT123_decode_update
	* INT123_dectype
	* INT123_defdec
	* INT123_do_equalizer
	* INT123_do_layer1
	* INT123_do_layer2
	* INT123_do_layer3
	* INT123_do_rva
	* INT123_exit_id3
	* INT123_feed_more
	* INT123_feed_set_pos
	* INT123_fi_add
	* INT123_fi_exit
	* INT123_fi_init
	* INT123_fi_reset
	* INT123_fi_resize
	* INT123_fi_set
	* INT123_frame_bitrate
	* INT123_frame_buffers
	* INT123_frame_buffers_reset
	* INT123_frame_cpu_opt
	* INT123_frame_exit
	* INT123_frame_expect_outsamples
	* INT123_frame_fill_toc
	* INT123_frame_freq
	* INT123_frame_index_find
	* INT123_frame_init
	* INT123_frame_init_par
	* INT123_frame_ins2outs
	* INT123_frame_offset
	* INT123_frame_outbuffer
	* INT123_frame_output_format
	* INT123_frame_outs
	* INT123_frame_reset
	* INT123_frame_set_frameseek
	* INT123_frame_set_seek
	* INT123_frame_skip
	* INT123_get_songlen
	* INT123_icy2utf8
	* INT123_id3_link
	* INT123_id3_to_utf8
	* INT123_init_icy
	* INT123_init_id3
	* INT123_init_layer12
	* INT123_init_layer12_stuff
	* INT123_init_layer12_table
	* INT123_init_layer3
	* INT123_init_layer3_gainpow2
	* INT123_init_layer3_stuff
	* INT123_invalidate_format
	* INT123_make_conv16to8_table
	* INT123_make_decode_tables
	* INT123_ntom_frame_outsamples
	* INT123_ntom_frameoff
	* INT123_ntom_frmouts
	* INT123_ntom_ins2outs
	* INT123_ntom_set_ntom
	* INT123_ntom_val
	* INT123_open_bad
	* INT123_open_feed
	* INT123_open_stream
	* INT123_open_stream_handle
	* INT123_parse_new_id3
	* INT123_prepare_decode_tables
	* INT123_read_frame
	* INT123_reset_icy
	* INT123_reset_id3
	* INT123_safe_realloc
	* INT123_samples_to_bytes
	* INT123_set_pointer
	* INT123_set_synth_functions
	* INT123_synth_1to1
	* INT123_synth_1to1_8bit
	* INT123_synth_1to1_8bit_m2s
	* INT123_synth_1to1_8bit_mono
	* INT123_synth_1to1_8bit_wrap
	* INT123_synth_1to1_8bit_wrap_m2s
	* INT123_synth_1to1_8bit_wrap_mono
	* INT123_synth_1to1_m2s
	* INT123_synth_1to1_mono
	* INT123_synth_1to1_real
	* INT123_synth_1to1_real_m2s
	* INT123_synth_1to1_real_mono
	* INT123_synth_1to1_s32
	* INT123_synth_1to1_s32_m2s
	* INT123_synth_1to1_s32_mono
	* INT123_synth_2to1
	* INT123_synth_2to1_8bit
	* INT123_synth_2to1_8bit_m2s
	* INT123_synth_2to1_8bit_mono
	* INT123_synth_2to1_m2s
	* INT123_synth_2to1_mono
	* INT123_synth_2to1_real
	* INT123_synth_2to1_real_m2s
	* INT123_synth_2to1_real_mono
	* INT123_synth_2to1_s32
	* INT123_synth_2to1_s32_m2s
	* INT123_synth_2to1_s32_mono
	* INT123_synth_4to1
	* INT123_synth_4to1_8bit
	* INT123_synth_4to1_8bit_m2s
	* INT123_synth_4to1_8bit_mono
	* INT123_synth_4to1_m2s
	* INT123_synth_4to1_mono
	* INT123_synth_4to1_real
	* INT123_synth_4to1_real_m2s
	* INT123_synth_4to1_real_mono
	* INT123_synth_4to1_s32
	* INT123_synth_4to1_s32_m2s
	* INT123_synth_4to1_s32_mono
	* INT123_synth_ntom
	* INT123_synth_ntom_8bit
	* INT123_synth_ntom_8bit_m2s
	* INT123_synth_ntom_8bit_mono
	* INT123_synth_ntom_m2s
	* INT123_synth_ntom_mono
	* INT123_synth_ntom_real
	* INT123_synth_ntom_real_m2s
	* INT123_synth_ntom_real_mono
	* INT123_synth_ntom_s32
	* INT123_synth_ntom_s32_m2s
	* INT123_synth_ntom_s32_mono
	* INT123_synth_ntom_set_step
	* Idle(void*, bool)
	* IdleThread(void*)
	* IgnoredFunction(char const*, char const*, int)
	* Im2DRenderQuad(float, float, float, float, float, float, float)
	* InitDestination(jpeg_compress_struct*)
	* InitModelIndices()
	* InitShaderCache()
	* InitSource(jpeg_decompress_struct*)
	* InitUIntMap
	* Initialise3D(void*)
	* InitialiseGame()
	* InitialiseLanguage()
	* InitializeShaderCloset()
	* InsertUIntMapEntry
	* IntToStr(int, char*)
	* InternalRegisterShader(unsigned int)
	* Invert(CMatrix const&)
	* Invert(CMatrix const&, CMatrix&)
	* IsBuildingPointerValid(CBuilding*)
	* IsCarTurret()
	* IsCloudAvailable()
	* IsCloudSlot(int)
	* IsDummyPointerValid(CDummy*)
	* IsDummyPointerValid_NotInWorld(CDummy*)
	* IsEntityPointerValid(CEntity*)
	* IsForegroundApp()
	* IsGameResuming(bool)
	* IsLowSpecDevice()
	* IsObjectPointerValid(CObject*)
	* IsObjectPointerValid_NotInWorld(CObject*)
	* IsOnScreen(CVector const&, float, bool)
	* IsPedPointerValid(CPed*)
	* IsPedPointerValid_NotInWorld(CPed*)
	* IsPinchZooming(bool)
	* IsPlayingGame()
	* IsPointInsideLine(float, float, float, float, float, float, float)
	* IsPointInsideRadar(CVector2D const&)
	* IsPointWithinArbitraryArea(float, float, float, float, float, float, float, float, float, float)
	* IsPointerDown(unsigned int, unsigned int)
	* IsPunctuation(unsigned short)
	* IsSCCloudAvailable()
	* IsSCCloudFree()
	* IsSaveGameForPause()
	* IsTeleportPointValid(CVector const&, CVector const&)
	* IsValidCompRule(int)
	* IsValidModForVehicle(unsigned int, CVehicle*)
	* IsVecIn2dAngledArea(CVector&, float, float, float, float, float)
	* IsVecIn3dAngledArea(CVector&, float, float, float, float, float, float, float)
	* IsVehiclePointerValid(CVehicle*)
	* IsVehiclePointerValid_NotInWorld(CVehicle*)
	* JNI_OnLoad
	* JNI_OnUnload
	* JPegCompressScreen(RwCamera*, jpeg_destination_mgr&)
	* JPegCompressScreenToBuffer(RwCamera*, char**, unsigned int*)
	* JPegCompressScreenToFile(RwCamera*, char const*)
	* JPegDecompressToRaster(RwRaster*, jpeg_source_mgr&)
	* JPegDecompressToVramFromBuffer(RwRaster*, char**)
	* LIB_ClearInputNextUpdate()
	* LIB_GameServiceConnectionStatus()
	* LIB_GameServiceGetAchievementCurrentSteps(char const*)
	* LIB_GameServiceIncrementAchievement(char const*, int)
	* LIB_GameServiceIsAchievementUnlocked(char const*)
	* LIB_GameServiceRefreshData(bool)
	* LIB_GameServiceShowAchievementList()
	* LIB_GameServiceShowLeaderboard(char const*)
	* LIB_GameServiceShowLeaderboards()
	* LIB_GameServiceShowSignInUI()
	* LIB_GameServiceSignOut()
	* LIB_GameServiceSubmitScore(char const*, long long)
	* LIB_GameServiceUnlockAchievement(char const*)
	* LIB_GameServiceUpdate()
	* LIB_GamepadState(int, int)
	* LIB_InputEvent(OSEventType, void*)
	* LIB_InputUpdate(int)
	* LIB_KeyboardComboPressed(OSKeyboardKey, OSKeyboardKey)
	* LIB_KeyboardDoubleTapped(OSKeyboardKey)
	* LIB_KeyboardIsDown(OSKeyboardKey)
	* LIB_KeyboardPressed(OSKeyboardKey)
	* LIB_KeyboardState(OSKeyboardKey)
	* LIB_KeyboardUpdateKey(OSKeyboardKey)
	* LIB_PointerDoubleClicked(int, int)
	* LIB_PointerGetButton(int, int)
	* LIB_PointerGetCoordinates(int, int*, int*)
	* LIB_PointerSetDoubleClickDelay(float)
	* LOSBlockedBetweenPeds(CEntity*, CEntity*)
	* LeftHeld()
	* LeftPressed()
	* LightsCreate(RpWorld*)
	* LightsDestroy(RpWorld*)
	* LightsEnable(int)
	* LimitFrustumVector(CVector&, CVector const&, float)
	* LineRadarBoxCollision(CVector2D&, CVector2D const&, CVector2D const&)
	* LittleTest()
	* LoadAllGamesFromCloud()
	* LoadBriefs()
	* LoadGameFromCloud(unsigned int, int*)
	* LoadMissionScript(int)
	* LoadSomeStaticSettings()
	* LoadTelemetry()
	* LoadingScreen(char const*, char const*, char const*)
	* LoadingScreenLoadingFile(char const*)
	* LockStorage()
	* LookupUIntMapKey
	* MainGameFunc(void*)
	* MakeAngleLessThan180(float&)
	* MakeLowerCase(char*)
	* MakeSureLinkExists(signed char, signed char)
	* MakeUpper(char*)
	* MakeUpperCase(char*)
	* MarkSurroundingEntitiesForCollisionWithTrain(CVector, float, CEntity*, bool)
	* MarkerAtomicCB(RpAtomic*, void*)
	* MatchAllModelStrings()
	* MatchModelStringUint16(char*, unsigned short)
	* MaterialUpdateUVAnimCB(RpMaterial*, void*)
	* MemoryCardVersionCheck()
	* MenuToScreen(CVector2D const&)
	* Menu_ApplyAudioSettings()
	* Menu_ApplyLanguage()
	* Menu_DeleteSlot(int)
	* Menu_DontRetryMission(void*)
	* Menu_DrawLoadScreen()
	* Menu_IsPlayingGame()
	* Menu_LoadSettings()
	* Menu_LoadSlot(int)
	* Menu_MapInitPause()
	* Menu_MapRender()
	* Menu_MapUpdate(float)
	* Menu_NewGame()
	* Menu_PopulateSaves()
	* Menu_RateGame(void*)
	* Menu_Resume()
	* Menu_RetryMission()
	* Menu_RetryMissionWrapped(void*)
	* Menu_SaveSettings()
	* Menu_ShowMissionRetry()
	* Menu_ShowNag()
	* Menu_SwitchOffToGame()
	* Menu_SwitchOnFromGame()
	* MeshSorter(void const*, void const*)
	* MixSource
	* ModifyStringLabelForControlSetting(char*)
	* ModulatorCreate
	* MoveColModelMemory(CColModel&, bool)
	* MoveGeometryMemory(RpGeometry*)
	* MoveMem(void**)
	* Multiply3x3(CMatrix const&, CVector const&)
	* Multiply3x3(CVector const&, CMatrix const&)
	* NVCompressFlush()
	* NVCompressToDXT(NVHHDDSImage*, int, int)
	* NVDefaultLog(ENVLogLevel, char const*, char const*, char const*, ...)
	* NVDefaultLogDebug(char const*, char const*, ...)
	* NVDefaultLogError(char const*, char const*, ...)
	* NVDefaultLogFatal(char const*, char const*, ...)
	* NVDefaultLogInfo(char const*, char const*, ...)
	* NVDefaultLogMessage(ENVLogLevel, char const*, char const*, char const*)
	* NVDefaultLogOutput(char const*)
	* NVDefaultLogTrace(char const*, char const*, ...)
	* NVDefaultLogWarn(char const*, char const*, ...)
	* NVEventAppInit(int, char**)
	* NVEventAppMain(int, char**)
	* NVEventEGLInit()
	* NVEventEGLMakeCurrent()
	* NVEventEGLSwapBuffers()
	* NVEventEGLUnmakeCurrent()
	* NVEventGetEventStr(NVEventType)
	* NVEventGetNextEvent(NVEvent*, int)
	* NVEventGetOrientation()
	* NVEventGetPlatformAppHandle()
	* NVEventGetTextureData(char const*, unsigned char*&, unsigned int&, unsigned int&, unsigned int&, unsigned int&)
	* NVEventLoadFile(char const*)
	* NVEventReleaseTextureData(void*, unsigned char*)
	* NVEventUnhandledEvent(NVEvent*)
	* NVEventWaitForEvents(int const*, int, int)
	* NVHHDDSAlloc()
	* NVHHDDSAllocData(NVHHDDSImage*)
	* NVHHDDSFree(NVHHDDSImage*)
	* NVHHDDSLoad(char const*, int)
	* NVImeClosed()
	* NVLogEnable(ENVLogLevel, unsigned char)
	* NVLogFile(char const*)
	* NVLogLevelString(ENVLogLevel)
	* NVThreadGetCurrentJNIEnv()
	* NVThreadInit(_JavaVM*)
	* NVThreadSleep(unsigned long)
	* NVThreadSpawnJNIThread(long*, pthread_attr_t const*, char const*, void* (*)(void*), void*)
	* NeedsAmazonDownload()
	* NewCloudSaveAvailable(int)
	* NewSCCloudSaveAvailable(int)
	* NewTileRendererCB(RwCamera*, int, int, void*)
	* NodeNamePluginAttach()
	* NoneCreate
	* NotifyTrapFire(unsigned int)
	* NotifyTriggerFail(unsigned int)
	* NvAPKClose(void*)
	* NvAPKEOF(void*)
	* NvAPKGetc(void*)
	* NvAPKGets(char*, int, void*)
	* NvAPKInit()
	* NvAPKOpen(char const*)
	* NvAPKRead(void*, unsigned int, unsigned int, void*)
	* NvAPKSeek(void*, long, int)
	* NvAPKSize(void*)
	* NvAPKTell(void*)
	* NvAddVecf(float*, float const*, float const*)
	* NvBuildFrustumMatf(float (*) [4], float, float, float, float, float, float)
	* NvBuildIdentityMatf(float (*) [4])
	* NvBuildLookatMatf(float (*) [4], float const*, float const*, float const*)
	* NvBuildOrtho2Matf(float (*) [4], float, float, float, float)
	* NvBuildOrthoMatf(float (*) [4], float, float, float, float, float, float)
	* NvBuildRotDegMatf(float (*) [4], float const*, float)
	* NvBuildRotRadMatf(float (*) [4], float const*, float)
	* NvBuildRotXDegMatf(float (*) [4], float)
	* NvBuildRotXRadMatf(float (*) [4], float)
	* NvBuildRotYDegMatf(float (*) [4], float)
	* NvBuildRotYRadMatf(float (*) [4], float)
	* NvBuildRotZDegMatf(float (*) [4], float)
	* NvBuildRotZRadMatf(float (*) [4], float)
	* NvBuildScaleMatf(float (*) [4], float, float, float)
	* NvBuildTranslateMatf(float (*) [4], float, float, float)
	* NvClockDiffInSecs(long long, long long)
	* NvCopyMatf(float (*) [4], float const (*) [4])
	* NvCreateTextureFromDDSEx(char const*, unsigned char, unsigned char, int*, int*, unsigned char*, unsigned char*)
	* NvCreateTextureFromHHDDSImage(NVHHDDSImage const&, unsigned char, int*, int*, unsigned char*, unsigned char*)
	* NvCrossProductf(float*, float const*, float const*)
	* NvDifferentMatsf(float (*) [4], float const (*) [4])
	* NvExtract3x3Matf(float (*) [3], float const (*) [4])
	* NvFClose(void*)
	* NvFEOF(void*)
	* NvFGetc(void*)
	* NvFGets(char*, int, void*)
	* NvFInit()
	* NvFIsApkFile(void*)
	* NvFOpen(char const*, char const*, bool, bool)
	* NvFRead(void*, unsigned int, unsigned int, void*)
	* NvFSeek(void*, long, int)
	* NvFSize(void*)
	* NvFTell(void*)
	* NvInvMatf(float (*) [4], float const (*) [4])
	* NvMultMatf(float (*) [4], float const (*) [4], float const (*) [4])
	* NvMultRotDegMatf(float (*) [4], float const (*) [4], float const*, float)
	* NvMultRotRadMatf(float (*) [4], float const (*) [4], float const*, float)
	* NvMultRotXDegMatf(float (*) [4], float const (*) [4], float)
	* NvMultRotXRadMatf(float (*) [4], float const (*) [4], float)
	* NvMultRotYDegMatf(float (*) [4], float const (*) [4], float)
	* NvMultRotYRadMatf(float (*) [4], float const (*) [4], float)
	* NvMultRotZDegMatf(float (*) [4], float const (*) [4], float)
	* NvMultRotZRadMatf(float (*) [4], float const (*) [4], float)
	* NvMultScaleMatf(float (*) [4], float const (*) [4], float, float, float)
	* NvMultTranslateMatf(float (*) [4], float const (*) [4], float, float, float)
	* NvNormalizeVecf(float*, float const*)
	* NvQuatConvertTo3x3Mat(float (*) [3], float const*)
	* NvQuatCopy(float*, float const*)
	* NvQuatDot(float const*, float const*)
	* NvQuatFromAngleAxis(float*, float, float const*)
	* NvQuatFromEuler(float*, float, float, float)
	* NvQuatFromEulerReverse(float*, float, float, float)
	* NvQuatIdentity(float*)
	* NvQuatMult(float*, float const*, float const*)
	* NvQuatNLerp(float*, float const*, float const*, float)
	* NvQuatNormalize(float*, float const*)
	* NvQuatX(float*, float)
	* NvQuatY(float*, float)
	* NvQuatZ(float*, float)
	* NvRandf()
	* NvSubVecf(float*, float const*, float const*)
	* NvTransformHomPointf(float*, float const (*) [4], float const*)
	* NvTransformPointf(float*, float const (*) [4], float const*)
	* NvTransformVecf(float*, float const (*) [4], float const*)
	* NvUtilGetLocalAppValue(char*, int, char const*)
	* NvUtilGetParameter(char*, int, char const*)
	* NvUtilHasLocalAppValue(char const*)
	* NvUtilInit()
	* NvUtilSetLocalAppValue(char const*, char const*)
	* NvVecLengthf(float const*)
	* OALService()
	* OSWOpenFile(OSFileDataArea, void**, char const*, OSFileAccessType)
	* OS_ApplicationEvent(OSEventType, void*)
	* OS_ApplicationInitialize(int, char const**)
	* OS_ApplicationPreinit()
	* OS_ApplicationStartup(int, int, int, char const**)
	* OS_ApplicationTick(float)
	* OS_BillingConnectionStatus()
	* OS_BillingIsPurchased(char const*)
	* OS_BillingPurchasePrice(char const*)
	* OS_BillingPurchaseRequest(char const*)
	* OS_BillingRestorePurchases()
	* OS_BillingSetKey(char const*)
	* OS_BillingSubmitPurchaseIDs(OS_BillingPurchaseID*, int)
	* OS_BillingUpdate()
	* OS_ConvertUTF16toUTF8(unsigned short*, unsigned char*, int)
	* OS_DebugBreak()
	* OS_DebugOut(char const*)
	* OS_FileClose(void*)
	* OS_FileDelete(OSFileDataArea, char const*)
	* OS_FileFlush(void*)
	* OS_FileGetArchiveName(OSFileArchive)
	* OS_FileGetDate(OSFileDataArea, char const*)
	* OS_FileGetPosition(void*)
	* OS_FileGetState(void*)
	* OS_FileListUserFiles()
	* OS_FileOpen(OSFileDataArea, void**, char const*, OSFileAccessType)
	* OS_FileRead(void*, void*, int)
	* OS_FileRename(OSFileDataArea, char const*, char const*, bool)
	* OS_FileSetAsyncReadMultiple(int)
	* OS_FileSetNoBackup(char const*)
	* OS_FileSetPosition(void*, int)
	* OS_FileSize(void*)
	* OS_FileSubHandle(void*, int, int)
	* OS_FileWrite(void*, void const*, int)
	* OS_GamepadAccelerometer(float*, float*, float*)
	* OS_GamepadAxis(unsigned int, unsigned int)
	* OS_GamepadButton(unsigned int, unsigned int)
	* OS_GamepadIsConnected(unsigned int, OSGamepadType*)
	* OS_GamepadTouchpad(unsigned int, unsigned int, float*, float*)
	* OS_KeyboardIsSoftVisible()
	* OS_KeyboardRequest(int)
	* OS_LanguageDeviceRegion()
	* OS_LanguageUserSelected()
	* OS_MovieClearText(bool)
	* OS_MovieDisplayText(bool)
	* OS_MovieIsPlaying(int*)
	* OS_MovieKeepAspectRatio(bool)
	* OS_MoviePlay(char const*, bool, bool, float)
	* OS_MoviePlayinWindow(char const*, int, int, int, int, bool, bool, float)
	* OS_MovieSetSkippable(bool)
	* OS_MovieSetText(char const*, bool, bool)
	* OS_MovieStop()
	* OS_MovieTextScale(int)
	* OS_MutexCreate(char const*)
	* OS_MutexDelete(void*)
	* OS_MutexObtain(void*)
	* OS_MutexRelease(void*)
	* OS_PointerGetNumber()
	* OS_PointerGetType(int)
	* OS_ScreenGetHeight()
	* OS_ScreenGetInches()
	* OS_ScreenGetWidth()
	* OS_ScreenSetRefresh(unsigned int)
	* OS_ScreenSetResolution(unsigned int, unsigned int)
	* OS_ScreenSetWakeLock(bool)
	* OS_ScreenSwapBuffers()
	* OS_SemaphoreCreate()
	* OS_SemaphoreDelete(void*)
	* OS_SemaphoreGet(void*)
	* OS_SemaphorePost(void*)
	* OS_SemaphoreTryWait(void*)
	* OS_SemaphoreWait(void*)
	* OS_SendStatEvent(char const*)
	* OS_SendStatEventFlush()
	* OS_SendStatEventValue(char const*, char const*, char const*)
	* OS_ServiceAppCommand(char const*, char const*)
	* OS_ServiceAppCommandValue(char const*, char const*)
	* OS_ServiceIsAppInstalled(char const*)
	* OS_ServiceOpenLink(char const*)
	* OS_ServiceRateApp(char const*)
	* OS_SetFilePathOffset(char const*)
	* OS_SystemCheckPause(int)
	* OS_SystemChip()
	* OS_SystemDevice()
	* OS_SystemForm()
	* OS_SystemGetAppId()
	* OS_SystemGetBuildinfo(int)
	* OS_SystemGetDeviceID()
	* OS_SystemMemoryStats(int*, int*, int*)
	* OS_SystemSet(OSDeviceChip, OSDeviceForm, OSDefinedDevice)
	* OS_SystemSetEmulatorTitle(char const*)
	* OS_ThreadClose(void*)
	* OS_ThreadGetValue()
	* OS_ThreadIsRunning(void*)
	* OS_ThreadLaunch(unsigned int (*)(void*), void*, unsigned int, char const*, int, OSThreadPriority)
	* OS_ThreadMakeCurrent()
	* OS_ThreadSetStackSize(unsigned int)
	* OS_ThreadSetValue(void*)
	* OS_ThreadSleep(int)
	* OS_ThreadUnmakeCurrent()
	* OS_ThreadWait(void*)
	* OS_TimeAccurate()
	* OS_TimeMS()
	* ObrInt(int)
	* ObrInt2(int, int)
	* ObrInt3(int, int, int)
	* ObrInt4(int, int, int, int)
	* ObrInt5(int, int, int, int, int)
	* ObrInt6(int, int, int, int, int, int)
	* ObrsPrintfString(char const*, short, short)
	* OpenAL_Android_Init
	* OpenFile(char const*, char const*)
	* OutputShaderCode(char const*)
	* ParseIntParam(char const*, char const*, unsigned int*)
	* PerformanceWarning(char const*, int, char const*)
	* PhonePickUpCB(CAnimBlendAssociation*, void*)
	* PhonePutDownCB(CAnimBlendAssociation*, void*)
	* PipelineCalcNumUniqueClusters(RxPipeline*)
	* PipelineNodeDestroy(RxPipelineNode*, RxPipeline*)
	* PipelinePluginAttach()
	* PlaceRedMarker(bool)
	* PlayAnnouncement(unsigned char, unsigned char)
	* PlayBackSound()
	* PlayErrorSound()
	* PlayNavSound()
	* PlayRandomAnimationsFromAnimBlock(CPed*, AssocGroupId, unsigned int, int)
	* PlayReplayFromHD()
	* PlaySelectSound()
	* PlayerDrivingCar()
	* PlayerIsEnteringCar()
	* PluginAttach()
	* PointerClicked()
	* PreInstanceClump(RpClump*)
	* PrintElementsInPtrList()
	* PrintGapsInModelInfoArray()
	* PrintMetrics()
	* PrintNumMatrices(char*)
	* PrintRwUsageInfo()
	* ProcessContext
	* ProcessDataDownload()
	* ProcessDiscCollision(CColPoint&, CMatrix const&, CColDisk const&, CColPoint&, bool&, float&, CColPoint&)
	* ProcessEvents(bool)
	* ProcessMapTeleport()
	* ProcessShaderCache()
	* ProcessTrainAnnouncements()
	* QueueImmCPUData()
	* QuitApp()
	* RLEDecompress(unsigned char*, unsigned int, unsigned char const*, unsigned int, unsigned int)
	* RQCreateShader(char const*, char const*, unsigned int)
	* RQDeleteShader(RQShader*)
	* RQDrawIndexed(RQShader*, RQDrawMode, unsigned int, void*)
	* RQDrawNonIndexed(RQShader*, RQDrawMode, unsigned int, unsigned int)
	* RQGetRenderer()
	* RQGetVendor()
	* RQSetDescription(RQVertexBufferDescription const&)
	* RQVertexAttrFormatToGL(RQVertexAttributeFormat)
	* RQ_CheckError(char const*, char const*, int)
	* RQ_CheckThread()
	* RQ_Command_rqBlendFunc(char*&)
	* RQ_Command_rqBuildShader(char*&)
	* RQ_Command_rqCleanup(char*&)
	* RQ_Command_rqCopy(char*&)
	* RQ_Command_rqDebugMarker(char*&)
	* RQ_Command_rqDeleteShader(char*&)
	* RQ_Command_rqDeleteTexture(char*&)
	* RQ_Command_rqDepthFunc(char*&)
	* RQ_Command_rqDisableCull(char*&)
	* RQ_Command_rqDrawIndexed(char*&)
	* RQ_Command_rqDrawNonIndexed(char*&)
	* RQ_Command_rqEnableBlend(char*&)
	* RQ_Command_rqEnableDepthRead(char*&)
	* RQ_Command_rqEnableDepthWrite(char*&)
	* RQ_Command_rqFree(char*&)
	* RQ_Command_rqIndexBufferCPU(char*&)
	* RQ_Command_rqIndexBufferCreate(char*&)
	* RQ_Command_rqIndexBufferDelete(char*&)
	* RQ_Command_rqIndexBufferSelect(char*&)
	* RQ_Command_rqIndexBufferUpdate(char*&)
	* RQ_Command_rqInit(char*&)
	* RQ_Command_rqInitTexture(char*&)
	* RQ_Command_rqReadPixels(char*&)
	* RQ_Command_rqSelectShader(char*&)
	* RQ_Command_rqSelectTexture(char*&)
	* RQ_Command_rqSetAlphaTest(char*&)
	* RQ_Command_rqSetCull(char*&)
	* RQ_Command_rqSetVertexDescription(char*&)
	* RQ_Command_rqSetWindingOrder(char*&)
	* RQ_Command_rqSetZBias(char*&)
	* RQ_Command_rqShutdown(char*&)
	* RQ_Command_rqSwapBuffers(char*&)
	* RQ_Command_rqTargetClear(char*&)
	* RQ_Command_rqTargetCreate(char*&)
	* RQ_Command_rqTargetDelete(char*&)
	* RQ_Command_rqTargetScissor(char*&)
	* RQ_Command_rqTargetSelect(char*&)
	* RQ_Command_rqTargetViewport(char*&)
	* RQ_Command_rqTextureAniso(char*&)
	* RQ_Command_rqTextureMip(char*&)
	* RQ_Command_rqTextureMipMode(char*&)
	* RQ_Command_rqTextureWrap(char*&)
	* RQ_Command_rqVertexBufferCPU(char*&)
	* RQ_Command_rqVertexBufferCreate(char*&)
	* RQ_Command_rqVertexBufferDelete(char*&)
	* RQ_Command_rqVertexBufferSelect(char*&)
	* RQ_Command_rqVertexBufferUpdate(char*&)
	* RQ_Command_rqVertexStateApply(char*&)
	* RQ_Command_rqVertexStateCreate(char*&)
	* RQ_Command_rqVertexStateDelete(char*&)
	* ReSetAmbientAndDirectionalColours()
	* ReadALConfig
	* ReadDataFence()
	* ReadLine(int, char*, int)
	* ReadMetFile(char*, int)
	* ReadPlayerCoordsFile()
	* ReadRingBuffer
	* ReadTextureDataRaster(unsigned int, RwStream*, int)
	* ReadVideoCardCapsFile(unsigned int&, unsigned int&, unsigned int&, unsigned int&)
	* RecurseFrameChildrenToCloneCB(RwFrame*, void*)
	* RecurseFrameChildrenVisibilityCB(RwFrame*, void*)
	* RegisterShader(unsigned int)
	* RegisterStream(RQVertexAttributeType, unsigned int, RQVertexAttributeFormat, bool, unsigned int, void*, bool)
	* ReleaseALAuxiliaryEffectSlots
	* ReleaseALBuffers
	* ReleaseALDatabuffers
	* ReleaseALEffects
	* ReleaseALFilters
	* ReleaseALSources
	* RemoveAllUpgradesCB(RpAtomic*, void*)
	* RemoveAnimsFromAnimationBlock(RpClump*, char const*)
	* RemoveExtraDirectionalLights(RpWorld*)
	* RemoveFirstInQueue(Queue*)
	* RemoveIfRefCountIsGreaterThanOne(RwTexture*, void*)
	* RemoveObjectsCB(RwFrame*, void*)
	* RemoveObjectsCB(RwObject*, void*)
	* RemoveRefsCB(RpAtomic*, void*)
	* RemoveRefsForAtomic(RpClump*)
	* RemoveUIntMapKey
	* RemoveUpgradeCB(RpAtomic*, void*)
	* RemoveWindowAlphaCB(RpMaterial*, void*)
	* Render2dStuff()
	* Render2dStuffAfterFade()
	* RenderAddTri(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, int, int, int, int, int, int, int, int, int, int, int, int)
	* RenderBegin(RwRaster*, RwMatrixTag*, unsigned int)
	* RenderDebugShit()
	* RenderEffects()
	* RenderEnd()
	* RenderMenus()
	* RenderScene(bool)
	* ResetBlend()
	* ResetDebugPedAICounters()
	* ResetEnvMap()
	* ResetMadeInvisibleObjects()
	* ResetUIntMap
	* ResolveClothesIDs()
	* RestoreLightsForInfraredVisionHeatObjects()
	* RightHeld()
	* RightPressed()
	* RingBufferSize
	* RotatePoint(float, float, float)
	* RotateVecAboutVec(RwV3d*, RwV3d*, RwV3d*, float)
	* RotateVecIntoVec(RwV3d*, RwV3d*, RwV3d*)
	* RpAnimBlendAllocateData(RpClump*)
	* RpAnimBlendClumpAddAssociation(RpClump*, CAnimBlendAssociation*, unsigned int, float, float)
	* RpAnimBlendClumpExtractAssociations(RpClump*)
	* RpAnimBlendClumpFillFrameArray(RpClump*, AnimBlendFrameData**)
	* RpAnimBlendClumpFindBone(RpClump*, unsigned int)
	* RpAnimBlendClumpFindFrame(RpClump*, char const*)
	* RpAnimBlendClumpFindFrameFromHashKey(RpClump*, unsigned int)
	* RpAnimBlendClumpGetAssociation(RpClump*, bool, CAnimBlendHierarchy*)
	* RpAnimBlendClumpGetAssociation(RpClump*, char const*)
	* RpAnimBlendClumpGetAssociation(RpClump*, unsigned int)
	* RpAnimBlendClumpGetFirstAssociation(RpClump*)
	* RpAnimBlendClumpGetFirstAssociation(RpClump*, unsigned int)
	* RpAnimBlendClumpGetMainAssociation(RpClump*, CAnimBlendAssociation**, float*)
	* RpAnimBlendClumpGetMainAssociation_N(RpClump*, int)
	* RpAnimBlendClumpGetMainPartialAssociation(RpClump*)
	* RpAnimBlendClumpGetMainPartialAssociation_N(RpClump*, int)
	* RpAnimBlendClumpGetNumAssociations(RpClump*)
	* RpAnimBlendClumpGetNumNonPartialAssociations(RpClump*)
	* RpAnimBlendClumpGetNumPartialAssociations(RpClump*)
	* RpAnimBlendClumpGiveAssociations(RpClump*, CAnimBlendAssociation*)
	* RpAnimBlendClumpInit(RpClump*)
	* RpAnimBlendClumpIsInitialized(RpClump*)
	* RpAnimBlendClumpPauseAllAnimations(RpClump*)
	* RpAnimBlendClumpRemoveAllAssociations(RpClump*)
	* RpAnimBlendClumpRemoveAssociations(RpClump*, unsigned int)
	* RpAnimBlendClumpSetBlendDeltas(RpClump*, unsigned int, float)
	* RpAnimBlendClumpUnPauseAllAnimations(RpClump*)
	* RpAnimBlendClumpUpdateAnimations(RpClump*, float, bool)
	* RpAnimBlendCreateAnimationForHierarchy(RpHAnimHierarchy*)
	* RpAnimBlendFrameGetName(RwFrame*)
	* RpAnimBlendFrameSetName(RwFrame*, char*)
	* RpAnimBlendGetNextAssociation(CAnimBlendAssociation*)
	* RpAnimBlendGetNextAssociation(CAnimBlendAssociation*, unsigned int)
	* RpAnimBlendKeyFrameInterpolate(void*, void*, void*, float, void*)
	* RpAnimBlendPluginAttach()
	* RpAtomicClone(RpAtomic*)
	* RpAtomicConvertGeometryToTL(RpAtomic*)
	* RpAtomicConvertGeometryToTS(RpAtomic*)
	* RpAtomicCreate()
	* RpAtomicDestroy(RpAtomic*)
	* RpAtomicForAllWorldSectors(RpAtomic*, RpWorldSector* (*)(RpWorldSector*, void*), void*)
	* RpAtomicGetPluginOffset(unsigned int)
	* RpAtomicGetWorld(RpAtomic const*)
	* RpAtomicGetWorldBoundingSphere(RpAtomic*)
	* RpAtomicInstance(RpAtomic*)
	* RpAtomicRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpAtomicRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpAtomicSetDefaultPipeline(RxPipeline*)
	* RpAtomicSetFrame(RpAtomic*, RwFrame*)
	* RpAtomicSetFreeListCreateParams(int, int)
	* RpAtomicSetGeometry(RpAtomic*, RpGeometry*, unsigned int)
	* RpAtomicSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpAtomicSetStreamRightsCallBack(unsigned int, int (*)(void*, int, int, unsigned int))
	* RpAtomicStreamGetSize(RpAtomic*)
	* RpAtomicStreamRead(RwStream*)
	* RpAtomicStreamWrite(RpAtomic*, RwStream*)
	* RpAtomicValidatePlugins(RpAtomic const*)
	* RpBuildMeshGenerateDefaultIgnoreWindingTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGenerateDefaultTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGenerateExhaustiveIgnoreWindingTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGenerateExhaustiveTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGeneratePreprocessIgnoreWindingTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGeneratePreprocessTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGenerateTriStrip(RpBuildMesh*, void*)
	* RpBuildMeshGenerateTrivialTriStrip(RpBuildMesh*, void*)
	* RpClumpAddAtomic(RpClump*, RpAtomic*)
	* RpClumpAddCamera(RpClump*, RwCamera*)
	* RpClumpAddLight(RpClump*, RpLight*)
	* RpClumpClone(RpClump*)
	* RpClumpConvertGeometryToTL(RpClump*)
	* RpClumpConvertGeometryToTS(RpClump*)
	* RpClumpCreate()
	* RpClumpCreateSpace(RwV3d const*, float)
	* RpClumpDestroy(RpClump*)
	* RpClumpForAllAtomics(RpClump*, RpAtomic* (*)(RpAtomic*, void*), void*)
	* RpClumpForAllCameras(RpClump*, RwCamera* (*)(RwCamera*, void*), void*)
	* RpClumpForAllLights(RpClump*, RpLight* (*)(RpLight*, void*), void*)
	* RpClumpGetBoundingSphere(RpClump*, RwSphere*, bool)
	* RpClumpGetCallBack(RpClump const*)
	* RpClumpGetNumAtomics(RpClump*)
	* RpClumpGetNumCameras(RpClump*)
	* RpClumpGetNumLights(RpClump*)
	* RpClumpGetPluginOffset(unsigned int)
	* RpClumpGetWorld(RpClump const*)
	* RpClumpGtaCancelStream()
	* RpClumpGtaStreamRead(RwStream*)
	* RpClumpGtaStreamRead1(RwStream*)
	* RpClumpGtaStreamRead2(RwStream*)
	* RpClumpRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpClumpRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpClumpRemoveAtomic(RpClump*, RpAtomic*)
	* RpClumpRemoveCamera(RpClump*, RwCamera*)
	* RpClumpRemoveLight(RpClump*, RpLight*)
	* RpClumpRender(RpClump*)
	* RpClumpSetCallBack(RpClump*, RpClump* (*)(RpClump*, void*))
	* RpClumpSetFreeListCreateParams(int, int)
	* RpClumpSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpClumpStreamGetSize(RpClump*)
	* RpClumpStreamRead(RwStream*)
	* RpClumpStreamReadAtomics(RwStream*, RpAtomic* (*)(RpAtomic*))
	* RpClumpStreamWrite(RpClump*, RwStream*)
	* RpClumpValidatePlugins(RpClump const*)
	* RpGeometryAddMorphTarget(RpGeometry*)
	* RpGeometryAddMorphTargets(RpGeometry*, int)
	* RpGeometryCreate(int, int, unsigned int)
	* RpGeometryCreateSpace(float)
	* RpGeometryDestroy(RpGeometry*)
	* RpGeometryForAllMaterials(RpGeometry*, RpMaterial* (*)(RpMaterial*, void*), void*)
	* RpGeometryForAllMeshes(RpGeometry const*, RpMesh* (*)(RpMesh*, RpMeshHeader*, void*), void*)
	* RpGeometryGetPluginOffset(unsigned int)
	* RpGeometryIsCorrectlySorted(RpGeometry const*, int*)
	* RpGeometryLock(RpGeometry*, int)
	* RpGeometryRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpGeometryRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpGeometryRemoveMorphTarget(RpGeometry*, int)
	* RpGeometryReplaceOldMaterialWithNewMaterial(RpGeometry*, RpMaterial*, RpMaterial*)
	* RpGeometrySetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpGeometrySortByMaterial(RpGeometry const*, void (*)(RpGeometry const*, RpGeometry*, unsigned short*, unsigned short))
	* RpGeometryStreamGetSize(RpGeometry const*)
	* RpGeometryStreamRead(RwStream*)
	* RpGeometryStreamWrite(RpGeometry const*, RwStream*)
	* RpGeometryTransform(RpGeometry*, RwMatrixTag const*)
	* RpGeometryTriangleGetMaterial(RpGeometry const*, RpTriangle const*)
	* RpGeometryTriangleGetVertexIndices(RpGeometry const*, RpTriangle const*, unsigned short*, unsigned short*, unsigned short*)
	* RpGeometryTriangleSetMaterial(RpGeometry*, RpTriangle*, RpMaterial*)
	* RpGeometryTriangleSetVertexIndices(RpGeometry const*, RpTriangle*, unsigned short, unsigned short, unsigned short)
	* RpGeometryUnlock(RpGeometry*)
	* RpGeometryValidatePlugins(RpGeometry const*)
	* RpHAnimFrameGetHierarchy(RwFrame*)
	* RpHAnimFrameGetID(RwFrame*)
	* RpHAnimFrameSetHierarchy(RwFrame*, RpHAnimHierarchy*)
	* RpHAnimFrameSetID(RwFrame*, int)
	* RpHAnimHierarchyAttach(RpHAnimHierarchy*)
	* RpHAnimHierarchyAttachFrameIndex(RpHAnimHierarchy*, int)
	* RpHAnimHierarchyCreate(int, unsigned int*, int*, RpHAnimHierarchyFlag, int)
	* RpHAnimHierarchyCreateFromHierarchy(RpHAnimHierarchy*, RpHAnimHierarchyFlag, int)
	* RpHAnimHierarchyCreateSubHierarchy(RpHAnimHierarchy*, int, RpHAnimHierarchyFlag, int)
	* RpHAnimHierarchyDestroy(RpHAnimHierarchy*)
	* RpHAnimHierarchyDetach(RpHAnimHierarchy*)
	* RpHAnimHierarchyDetachFrameIndex(RpHAnimHierarchy*, int)
	* RpHAnimHierarchyGetMatrixArray(RpHAnimHierarchy*)
	* RpHAnimHierarchySetFreeListCreateParams(int, int)
	* RpHAnimHierarchyUpdateMatrices(RpHAnimHierarchy*)
	* RpHAnimIDGetIndex(RpHAnimHierarchy*, int)
	* RpHAnimKeyFrameAdd(void*, void*, void*)
	* RpHAnimKeyFrameApply(void*, void*)
	* RpHAnimKeyFrameBlend(void*, void*, void*, float)
	* RpHAnimKeyFrameInterpolate(void*, void*, void*, float, void*)
	* RpHAnimKeyFrameMulRecip(void*, void*)
	* RpHAnimKeyFrameStreamGetSize(RtAnimAnimation const*)
	* RpHAnimKeyFrameStreamRead(RwStream*, RtAnimAnimation*)
	* RpHAnimKeyFrameStreamWrite(RtAnimAnimation const*, RwStream*)
	* RpHAnimPluginAttach()
	* RpLightCreate(int)
	* RpLightDestroy(RpLight*)
	* RpLightForAllWorldSectors(RpLight*, RpWorldSector* (*)(RpWorldSector*, void*), void*)
	* RpLightGetClump(RpLight const*)
	* RpLightGetConeAngle(RpLight const*)
	* RpLightGetPluginOffset(unsigned int)
	* RpLightGetWorld(RpLight const*)
	* RpLightRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpLightRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpLightSetColor(RpLight*, RwRGBAReal const*)
	* RpLightSetConeAngle(RpLight*, float)
	* RpLightSetFreeListCreateParams(int, int)
	* RpLightSetRadius(RpLight*, float)
	* RpLightSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpLightStreamGetSize(RpLight const*)
	* RpLightStreamRead(RwStream*)
	* RpLightStreamWrite(RpLight const*, RwStream*)
	* RpLightTieSetFreeListCreateParams(int, int)
	* RpLightValidatePlugins(RpLight const*)
	* RpMTEffectAddRef(RpMTEffect*)
	* RpMTEffectCreateDummy()
	* RpMTEffectDestroy(RpMTEffect*)
	* RpMTEffectDictAddEffect(RpMTEffectDict*, RpMTEffect*)
	* RpMTEffectDictCreate()
	* RpMTEffectDictDestroy(RpMTEffectDict*)
	* RpMTEffectDictFindNamedEffect(RpMTEffectDict const*, char const*)
	* RpMTEffectDictForAllDictionaries(RpMTEffectDict* (*)(RpMTEffectDict*, void*), void*)
	* RpMTEffectDictForAllEffects(RpMTEffectDict const*, RpMTEffect* (*)(RpMTEffect*, void*), void*)
	* RpMTEffectDictGetCurrent()
	* RpMTEffectDictRemoveEffect(RpMTEffect*)
	* RpMTEffectDictSetCurrent(RpMTEffectDict*)
	* RpMTEffectDictStreamGetSize(RpMTEffectDict const*)
	* RpMTEffectDictStreamRead(RwStream*)
	* RpMTEffectDictStreamWrite(RpMTEffectDict const*, RwStream*)
	* RpMTEffectFind(char*)
	* RpMTEffectGetName(RpMTEffect*)
	* RpMTEffectGetPath()
	* RpMTEffectSetName(RpMTEffect*, char*)
	* RpMTEffectSetPath(char const*)
	* RpMTEffectStreamGetSize(RpMTEffect const*)
	* RpMTEffectStreamRead(RwStream*)
	* RpMTEffectStreamWrite(RpMTEffect const*, RwStream*)
	* RpMTEffectWrite(RpMTEffect const*)
	* RpMatFXAtomicEnableEffects(RpAtomic*)
	* RpMatFXAtomicQueryEffects(RpAtomic*)
	* RpMatFXGetOpenGLPipeline(RpMatFXOpenGLPipeline)
	* RpMatFXMaterialDataSetFreeListCreateParams(int, int)
	* RpMatFXMaterialGetBumpMapBumpedTexture(RpMaterial const*)
	* RpMatFXMaterialGetBumpMapCoefficient(RpMaterial const*)
	* RpMatFXMaterialGetBumpMapFrame(RpMaterial const*)
	* RpMatFXMaterialGetBumpMapTexture(RpMaterial const*)
	* RpMatFXMaterialGetDualBlendModes(RpMaterial const*, RwBlendFunction*, RwBlendFunction*)
	* RpMatFXMaterialGetDualTexture(RpMaterial const*)
	* RpMatFXMaterialGetEffects(RpMaterial const*)
	* RpMatFXMaterialGetEnvMapCoefficient(RpMaterial const*)
	* RpMatFXMaterialGetEnvMapFrame(RpMaterial const*)
	* RpMatFXMaterialGetEnvMapFrameBufferAlpha(RpMaterial const*)
	* RpMatFXMaterialGetEnvMapTexture(RpMaterial const*)
	* RpMatFXMaterialGetUVTransformMatrices(RpMaterial const*, RwMatrixTag**, RwMatrixTag**)
	* RpMatFXMaterialSetBumpMapCoefficient(RpMaterial*, float)
	* RpMatFXMaterialSetBumpMapFrame(RpMaterial*, RwFrame*)
	* RpMatFXMaterialSetBumpMapTexture(RpMaterial*, RwTexture*)
	* RpMatFXMaterialSetDualBlendModes(RpMaterial*, RwBlendFunction, RwBlendFunction)
	* RpMatFXMaterialSetDualTexture(RpMaterial*, RwTexture*)
	* RpMatFXMaterialSetEffects(RpMaterial*, RpMatFXMaterialFlags)
	* RpMatFXMaterialSetEnvMapCoefficient(RpMaterial*, float)
	* RpMatFXMaterialSetEnvMapFrame(RpMaterial*, RwFrame*)
	* RpMatFXMaterialSetEnvMapFrameBufferAlpha(RpMaterial*, int)
	* RpMatFXMaterialSetEnvMapTexture(RpMaterial*, RwTexture*)
	* RpMatFXMaterialSetUVTransformMatrices(RpMaterial*, RwMatrixTag*, RwMatrixTag*)
	* RpMatFXMaterialSetupBumpMap(RpMaterial*, RwTexture*, RwFrame*, float)
	* RpMatFXMaterialSetupDualTexture(RpMaterial*, RwTexture*, RwBlendFunction, RwBlendFunction)
	* RpMatFXMaterialSetupEnvMap(RpMaterial*, RwTexture*, RwFrame*, int, float)
	* RpMatFXPluginAttach()
	* RpMatFXWorldSectorEnableEffects(RpWorldSector*)
	* RpMatFXWorldSectorQueryEffects(RpWorldSector*)
	* RpMaterialClone(RpMaterial*)
	* RpMaterialCreate()
	* RpMaterialCreateMultiTexture(RpMaterial*, RwPlatformID, unsigned int)
	* RpMaterialDestroy(RpMaterial*)
	* RpMaterialDestroyMultiTexture(RpMaterial*, RwPlatformID)
	* RpMaterialGetMultiTexture(RpMaterial const*, RwPlatformID)
	* RpMaterialGetPluginOffset(unsigned int)
	* RpMaterialQueryMultiTexturePlatform(RwPlatformID)
	* RpMaterialRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpMaterialRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpMaterialSetDefaultPipeline(RxPipeline*)
	* RpMaterialSetFreeListCreateParams(int, int)
	* RpMaterialSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpMaterialSetStreamRightsCallBack(unsigned int, int (*)(void*, int, int, unsigned int))
	* RpMaterialSetTexture(RpMaterial*, RwTexture*)
	* RpMaterialSetUVAnim(RpMaterial*, RtAnimAnimation*, unsigned int)
	* RpMaterialStreamGetSize(RpMaterial const*)
	* RpMaterialStreamRead(RwStream*)
	* RpMaterialStreamWrite(RpMaterial const*, RwStream*)
	* RpMaterialUVAnimAddAnimTime(RpMaterial*, float)
	* RpMaterialUVAnimApplyUpdate(RpMaterial*)
	* RpMaterialUVAnimExists(RpMaterial const*)
	* RpMaterialUVAnimGetInterpolator(RpMaterial*, unsigned int)
	* RpMaterialUVAnimSetCurrentTime(RpMaterial*, float)
	* RpMaterialUVAnimSetInterpolator(RpMaterial*, RtAnimInterpolator*, unsigned int)
	* RpMaterialUVAnimSubAnimTime(RpMaterial*, float)
	* RpMaterialValidatePlugins(RpMaterial const*)
	* RpMeshGetTriStripMethod(RpMeshHeader* (**)(RpBuildMesh*, void*), void**)
	* RpMeshSetTriStripMethod(RpMeshHeader* (*)(RpBuildMesh*, void*), void*)
	* RpMorphTargetCalcBoundingSphere(RpMorphTarget const*, RwSphere*)
	* RpMultiTextureGetCoords(RpMultiTexture const*, unsigned int)
	* RpMultiTextureGetEffect(RpMultiTexture const*)
	* RpMultiTextureGetNumTextures(RpMultiTexture const*)
	* RpMultiTextureGetTexture(RpMultiTexture const*, unsigned int)
	* RpMultiTextureSetCoords(RpMultiTexture*, unsigned int, unsigned int)
	* RpMultiTextureSetEffect(RpMultiTexture*, RpMTEffect*)
	* RpMultiTextureSetTexture(RpMultiTexture*, unsigned int, RwTexture*)
	* RpOpenGLLightGetAttenuationParams(void const*)
	* RpOpenGLLightGetSoftSpotExponent(void const*)
	* RpOpenGLLightSetAttenuationParams(void*, RpOpenGLLightAttentuation const*)
	* RpOpenGLLightSetSoftSpotExponent(void*, float)
	* RpSkinAtomicGetHAnimHierarchy
	* RpSkinAtomicGetType
	* RpSkinAtomicSetHAnimHierarchy
	* RpSkinAtomicSetType
	* RpSkinCreate
	* RpSkinDestroy
	* RpSkinGeometryGetSkin
	* RpSkinGeometrySetSkin
	* RpSkinGetNumBones
	* RpSkinGetOpenGLPipeline
	* RpSkinGetSkinToBoneMatrices
	* RpSkinGetVertexBoneIndices
	* RpSkinGetVertexBoneWeights
	* RpSkinIsSplit
	* RpSkinPluginAttach
	* RpSkinSetFreeListCreateParams
	* RpTieSetFreeListCreateParams(int, int)
	* RpTriStripDefaultCost(RpTriStripPolygon*, unsigned int, void*)
	* RpTriStripMeshQuick(RpTriStripMesh*, void*)
	* RpTriStripMeshTunnel(RpTriStripMesh*, void*)
	* RpTriStripPolygonFollowStrip(RpTriStripPolygon*, RpTriStripPolygon*)
	* RpUVAnimAddRef(RtAnimAnimation*)
	* RpUVAnimCreate(char const*, unsigned int, unsigned int, float, unsigned int*, RpUVAnimKeyFrameType)
	* RpUVAnimDestroy(RtAnimAnimation*)
	* RpUVAnimGetName(RtAnimAnimation const*)
	* RpUVAnimKeyFrameInit(RtAnimAnimation const*, RpUVAnimKeyFrame*, RpUVAnimKeyFrame*, float, RwMatrixTag const*)
	* RpUVAnimKeyFrameStreamGetSize(RtAnimAnimation const*)
	* RpUVAnimKeyFrameStreamRead(RwStream*, RtAnimAnimation*)
	* RpUVAnimKeyFrameStreamWrite(RtAnimAnimation const*, RwStream*)
	* RpUVAnimLinearKeyFrameAdd(void*, void*, void*)
	* RpUVAnimLinearKeyFrameApply(void*, void*)
	* RpUVAnimLinearKeyFrameBlend(void*, void*, void*, float)
	* RpUVAnimLinearKeyFrameDataInitFromMatrix(RpUVAnimLinearKeyFrameData*, RwMatrixTag const*)
	* RpUVAnimLinearKeyFrameInterpolate(void*, void*, void*, float, void*)
	* RpUVAnimLinearKeyFrameMulRecip(void*, void*)
	* RpUVAnimParamKeyFrameAdd(void*, void*, void*)
	* RpUVAnimParamKeyFrameApply(void*, void*)
	* RpUVAnimParamKeyFrameBlend(void*, void*, void*, float)
	* RpUVAnimParamKeyFrameDataInitFromMatrix(RpUVAnimParamKeyFrameData*, RwMatrixTag const*)
	* RpUVAnimParamKeyFrameInterpolate(void*, void*, void*, float, void*)
	* RpUVAnimParamKeyFrameMulRecip(void*, void*)
	* RpUVAnimPluginAttach()
	* RpUVAnimSetFreeListCreateParams(int, int)
	* RpWorldAddAtomic(RpWorld*, RpAtomic*)
	* RpWorldAddCamera(RpWorld*, RwCamera*)
	* RpWorldAddClump(RpWorld*, RpClump*)
	* RpWorldAddLight(RpWorld*, RpLight*)
	* RpWorldCreate(RwBBox*)
	* RpWorldDestroy(RpWorld*)
	* RpWorldForAllClumps(RpWorld*, RpClump* (*)(RpClump*, void*), void*)
	* RpWorldForAllLights(RpWorld*, RpLight* (*)(RpLight*, void*), void*)
	* RpWorldForAllMaterials(RpWorld*, RpMaterial* (*)(RpMaterial*, void*), void*)
	* RpWorldForAllWorldSectors(RpWorld*, RpWorldSector* (*)(RpWorldSector*, void*), void*)
	* RpWorldGetPluginOffset(unsigned int)
	* RpWorldGetSectorRenderCallBack(RpWorld const*)
	* RpWorldInstance(RpWorld*)
	* RpWorldLock(RpWorld*)
	* RpWorldPluginAttach()
	* RpWorldRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpWorldRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpWorldRemoveAtomic(RpWorld*, RpAtomic*)
	* RpWorldRemoveCamera(RpWorld*, RwCamera*)
	* RpWorldRemoveClump(RpWorld*, RpClump*)
	* RpWorldRemoveLight(RpWorld*, RpLight*)
	* RpWorldRender(RpWorld*)
	* RpWorldSectorForAllAtomics(RpWorldSector*, RpAtomic* (*)(RpAtomic*, void*), void*)
	* RpWorldSectorForAllCollisionAtomics(RpWorldSector*, RpAtomic* (*)(RpAtomic*, void*), void*)
	* RpWorldSectorForAllLights(RpWorldSector*, RpLight* (*)(RpLight*, void*), void*)
	* RpWorldSectorForAllMeshes(RpWorldSector const*, RpMesh* (*)(RpMesh*, RpMeshHeader*, void*), void*)
	* RpWorldSectorGetNumPolygons(RpWorldSector const*)
	* RpWorldSectorGetNumVertices(RpWorldSector const*)
	* RpWorldSectorGetPluginOffset(unsigned int)
	* RpWorldSectorGetWorld(RpWorldSector const*)
	* RpWorldSectorRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RpWorldSectorRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RpWorldSectorRender(RpWorldSector*)
	* RpWorldSectorSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpWorldSectorSetStreamRightsCallBack(unsigned int, int (*)(void*, int, int, unsigned int))
	* RpWorldSectorValidatePlugins(RpWorldSector const*)
	* RpWorldSetDefaultSectorPipeline(RxPipeline*)
	* RpWorldSetSectorRenderCallBack(RpWorld*, RpWorldSector* (*)(RpWorldSector*))
	* RpWorldSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RpWorldSetStreamRightsCallBack(unsigned int, int (*)(void*, int, int, unsigned int))
	* RpWorldStreamGetSize(RpWorld const*)
	* RpWorldStreamRead(RwStream*)
	* RpWorldStreamWrite(RpWorld const*, RwStream*)
	* RpWorldUnlock(RpWorld*)
	* RpWorldValidatePlugins(RpWorld*)
	* RsAlwaysOnTop(int)
	* RsCameraBeginUpdate(RwCamera*)
	* RsCameraShowRaster(RwCamera*)
	* RsDestroyPresetViews()
	* RsErrorMessage(char const*)
	* RsEventHandler(RsEvent, void*)
	* RsGetPresetViewDescription()
	* RsGrabScreen(RwCamera*)
	* RsInitialize()
	* RsInputDeviceAttach(RsInputDeviceType, RsEventStatus (*)(RsEvent, void*))
	* RsKeyFromScanCode(unsigned char, int)
	* RsKeyToOSWKey(RsKeyCodes)
	* RsKeyboardEventHandler(RsEvent, void*)
	* RsLoadPresetViews()
	* RsMouseEventHandler(RsEvent, void*)
	* RsMouseSetPos(RwV2d*)
	* RsMouseSetVisibility(int)
	* RsPadEventHandler(RsEvent, void*)
	* RsPathGetSeparator()
	* RsPathnameCreate(char const*)
	* RsPathnameDestroy(char*)
	* RsRegisterImageLoader()
	* RsRwInitialize(void*)
	* RsRwTerminate()
	* RsSavePresetView(RwCamera*)
	* RsSelectDevice()
	* RsSetModelTexturePath(char const*)
	* RsSetNextPresetView(RwCamera*)
	* RsSetPresetView(RwCamera*, int)
	* RsSetPreviousPresetView(RwCamera*)
	* RsTerminate()
	* RsTimer()
	* RsWarningMessage(char const*)
	* RsWindowSetText(char const*)
	* RtAnimAnimationCreate(int, int, int, float)
	* RtAnimAnimationDestroy(RtAnimAnimation*)
	* RtAnimAnimationFreeListCreateParams(int, int)
	* RtAnimAnimationGetNumNodes(RtAnimAnimation const*)
	* RtAnimAnimationMakeDelta(RtAnimAnimation*, int, float)
	* RtAnimAnimationRead(char const*)
	* RtAnimAnimationStreamGetSize(RtAnimAnimation const*)
	* RtAnimAnimationStreamRead(RwStream*)
	* RtAnimAnimationStreamWrite(RtAnimAnimation const*, RwStream*)
	* RtAnimAnimationWrite(RtAnimAnimation const*, char const*)
	* RtAnimBlendKeyFrameApply(void*, void*)
	* RtAnimGetInterpolatorInfo(int)
	* RtAnimInitialize()
	* RtAnimInterpolatorAddAnimTime(RtAnimInterpolator*, float)
	* RtAnimInterpolatorAddSubInterpolator(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*)
	* RtAnimInterpolatorAddTogether(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*)
	* RtAnimInterpolatorBlend(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*, float)
	* RtAnimInterpolatorBlendSubInterpolator(RtAnimInterpolator*, RtAnimInterpolator*, RtAnimInterpolator*, float)
	* RtAnimInterpolatorCopy(RtAnimInterpolator*, RtAnimInterpolator*)
	* RtAnimInterpolatorCreate(int, int)
	* RtAnimInterpolatorCreateSubInterpolator(RtAnimInterpolator*, int, int, int)
	* RtAnimInterpolatorDestroy(RtAnimInterpolator*)
	* RtAnimInterpolatorSetAnimCallBack(RtAnimInterpolator*, RtAnimInterpolator* (*)(RtAnimInterpolator*, void*), float, void*)
	* RtAnimInterpolatorSetAnimLoopCallBack(RtAnimInterpolator*, RtAnimInterpolator* (*)(RtAnimInterpolator*, void*), void*)
	* RtAnimInterpolatorSetCurrentAnim(RtAnimInterpolator*, RtAnimAnimation*)
	* RtAnimInterpolatorSetCurrentTime(RtAnimInterpolator*, float)
	* RtAnimInterpolatorSetKeyFrameCallBacks(RtAnimInterpolator*, int)
	* RtAnimInterpolatorSubAnimTime(RtAnimInterpolator*, float)
	* RtAnimRegisterInterpolationScheme(RtAnimInterpolatorInfo*)
	* RtBMPImageRead(char const*)
	* RtBMPImageWrite(RwImage*, char const*)
	* RtCharsetBufferFlush()
	* RtCharsetClose()
	* RtCharsetCreate(RwRGBA const*, RwRGBA const*)
	* RtCharsetDestroy(RwRaster*)
	* RtCharsetGetDesc(RwRaster*, RtCharsetDesc*)
	* RtCharsetOpen()
	* RtCharsetPrint(RwRaster*, char const*, int, int)
	* RtCharsetPrintBuffered(RwRaster*, char const*, int, int, int)
	* RtCharsetSetColors(RwRaster*, RwRGBA const*, RwRGBA const*)
	* RtDictAddEntry(RtDict*, void*)
	* RtDictDestroy(RtDict*)
	* RtDictFindNamedEntry(RtDict*, char const*)
	* RtDictForAllEntries(RtDict const*, void* (*)(void*, void*), void*)
	* RtDictRemoveEntry(RtDict*, void*)
	* RtDictSchemaAddDict(RtDictSchema*, RtDict*)
	* RtDictSchemaCreateDict(RtDictSchema*)
	* RtDictSchemaDestruct(RtDictSchema*)
	* RtDictSchemaForAllDictionaries(RtDictSchema*, RtDict* (*)(RtDict*, void*), void*)
	* RtDictSchemaGetCurrentDict(RtDictSchema*)
	* RtDictSchemaInit(RtDictSchema*)
	* RtDictSchemaRemoveDict(RtDictSchema*, RtDict*)
	* RtDictSchemaSetCurrentDict(RtDictSchema*, RtDict*)
	* RtDictSchemaStreamReadDict(RtDictSchema*, RwStream*)
	* RtDictStreamGetSize(RtDict const*)
	* RtDictStreamWrite(RtDict const*, RwStream*)
	* RtPNGImageRead
	* RtPNGImageWrite
	* RtQuatConvertFromMatrix(RtQuat*, RwMatrixTag const*)
	* RtQuatModulus(RtQuat*)
	* RtQuatQueryRotate(RtQuat const*, RwV3d*, float*)
	* RtQuatRotate(RtQuat*, RwV3d const*, float, RwOpCombineType)
	* RtQuatSetupSlerpArgandCache(RtQuat*, RtQuat*, RtQuatSlerpArgandCache*)
	* RtQuatSetupSlerpCache(RtQuat*, RtQuat*, RtQuatSlerpCache*)
	* RtQuatTransformVectors(RwV3d*, RwV3d const*, int, RtQuat const*)
	* RtSlerpCreate(int)
	* RtSlerpDestroy(RtSlerp*)
	* RtSlerpGetMatrix(RtSlerp*, RwMatrixTag*, float)
	* RtSlerpInitialize(RtSlerp*, RwMatrixTag*, RwMatrixTag*)
	* RtSlerpSetLerp(RtSlerp*, int)
	* RtTileDefaultArchive(RwImage*, int, int, void*)
	* RtTileRender(RwCamera*, int, int, int, int, RwCamera* (*)(RwCamera*, int, int, void*), RwImage* (*)(RwImage*, int, int, void*), void*)
	* RwBBoxAddPoint(RwBBox*, RwV3d const*)
	* RwBBoxCalculate(RwBBox*, RwV3d const*, int)
	* RwBBoxContainsPoint(RwBBox const*, RwV3d const*)
	* RwBBoxInitialize(RwBBox*, RwV3d const*)
	* RwCameraBeginUpdate(RwCamera*)
	* RwCameraChunkInfoRead(RwStream*, rwStreamCamera*, int*)
	* RwCameraClear(RwCamera*, RwRGBA*, int)
	* RwCameraClone(RwCamera*)
	* RwCameraCreate()
	* RwCameraDestroy(RwCamera*)
	* RwCameraEndUpdate(RwCamera*)
	* RwCameraForAllClumpsInFrustum(RwCamera*, void*)
	* RwCameraForAllClumpsNotInFrustum(RwCamera*, int, void*)
	* RwCameraForAllSectorsInFrustum(RwCamera*, RpWorldSector* (*)(RpWorldSector*, void*), void*)
	* RwCameraFrustumTestSphere(RwCamera const*, RwSphere const*)
	* RwCameraGetClump(RwCamera const*)
	* RwCameraGetPluginOffset(unsigned int)
	* RwCameraGetWorld(RwCamera const*)
	* RwCameraRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwCameraRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RwCameraSetFarClipPlane(RwCamera*, float)
	* RwCameraSetFreeListCreateParams(int, int)
	* RwCameraSetNearClipPlane(RwCamera*, float)
	* RwCameraSetProjection(RwCamera*, RwCameraProjection)
	* RwCameraSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RwCameraSetViewOffset(RwCamera*, RwV2d const*)
	* RwCameraSetViewWindow(RwCamera*, RwV2d const*)
	* RwCameraShowRaster(RwCamera*, void*, unsigned int)
	* RwCameraStreamGetSize(RwCamera const*)
	* RwCameraStreamRead(RwStream*)
	* RwCameraStreamWrite(RwCamera const*, RwStream*)
	* RwCameraValidatePlugins(RwCamera const*)
	* RwEngineClose()
	* RwEngineGetCurrentSubSystem()
	* RwEngineGetCurrentVideoMode()
	* RwEngineGetMatrixTolerances(RwMatrixTolerance*)
	* RwEngineGetMaxTextureSize()
	* RwEngineGetMetrics()
	* RwEngineGetNumSubSystems()
	* RwEngineGetNumVideoModes()
	* RwEngineGetPluginOffset(unsigned int)
	* RwEngineGetSubSystemInfo(RwSubSystemInfo*, int)
	* RwEngineGetTextureMemorySize()
	* RwEngineGetVersion()
	* RwEngineGetVideoModeInfo(RwVideoMode*, int)
	* RwEngineInit(RwMemoryFunctions const*, unsigned int, unsigned int)
	* RwEngineOpen(RwEngineOpenParams*)
	* RwEngineRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int))
	* RwEngineSetFocus(int)
	* RwEngineSetMatrixTolerances(RwMatrixTolerance const*)
	* RwEngineSetSubSystem(int)
	* RwEngineSetVideoMode(int)
	* RwEngineStart()
	* RwEngineStop()
	* RwEngineTerm()
	* RwErrorGet(RwError*)
	* RwErrorSet(RwError*)
	* RwFrameAddChild(RwFrame*, RwFrame*)
	* RwFrameCloneHierarchy(RwFrame*)
	* RwFrameCount(RwFrame*)
	* RwFrameCreate()
	* RwFrameDeInit(RwFrame*)
	* RwFrameDestroy(RwFrame*)
	* RwFrameDestroyHierarchy(RwFrame*)
	* RwFrameDirty(RwFrame const*)
	* RwFrameForAllChildren(RwFrame*, RwFrame* (*)(RwFrame*, void*), void*)
	* RwFrameForAllObjects(RwFrame*, RwObject* (*)(RwObject*, void*), void*)
	* RwFrameGetLTM(RwFrame*)
	* RwFrameGetPluginOffset(unsigned int)
	* RwFrameGetRoot(RwFrame const*)
	* RwFrameInit(RwFrame*)
	* RwFrameOrthoNormalize(RwFrame*)
	* RwFrameRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwFrameRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RwFrameRemoveChild(RwFrame*)
	* RwFrameRotate(RwFrame*, RwV3d const*, float, RwOpCombineType)
	* RwFrameScale(RwFrame*, RwV3d const*, RwOpCombineType)
	* RwFrameSetFreeListCreateParams(int, int)
	* RwFrameSetIdentity(RwFrame*)
	* RwFrameSetStaticPluginsSize(int)
	* RwFrameSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RwFrameTransform(RwFrame*, RwMatrixTag const*, RwOpCombineType)
	* RwFrameTranslate(RwFrame*, RwV3d const*, RwOpCombineType)
	* RwFrameUpdateObjects(RwFrame*)
	* RwFrameValidatePlugins(RwFrame const*)
	* RwFreeListCreate(int, int, int)
	* RwFreeListCreateAndPreallocateSpace(int, int, int, int, RwFreeList*)
	* RwFreeListDestroy(RwFreeList*)
	* RwFreeListForAllUsed(RwFreeList*, void (*)(void*, void*), void*)
	* RwFreeListGetFlags(RwFreeList*)
	* RwFreeListPurge(RwFreeList*)
	* RwFreeListPurgeAllFreeLists()
	* RwFreeListSetFlags(RwFreeList*, unsigned int)
	* RwGrabScreen(RwCamera*, char*)
	* RwIm2DGetFarScreenZ()
	* RwIm2DGetNearScreenZ()
	* RwIm2DRenderIndexedPrimitive(RwPrimitiveType, RwOpenGLVertex*, int, unsigned short*, int)
	* RwIm2DRenderIndexedPrimitive_BUGFIX(RwPrimitiveType, RwOpenGLVertex*, int, unsigned short*, int)
	* RwIm2DRenderLine(RwOpenGLVertex*, int, int, int)
	* RwIm2DRenderLine_BUGFIX(RwOpenGLVertex*, int, int, int)
	* RwIm2DRenderPrimitive(RwPrimitiveType, RwOpenGLVertex*, int)
	* RwIm2DRenderPrimitive_BUGFIX(RwPrimitiveType, RwOpenGLVertex*, int)
	* RwIm2DRenderTriangle(RwOpenGLVertex*, int, int, int, int)
	* RwIm2DRenderTriangle_BUGFIX(RwOpenGLVertex*, int, int, int, int)
	* RwIm3DEnd()
	* RwIm3DGetRenderPipeline(RwPrimitiveType)
	* RwIm3DGetTransformPipeline()
	* RwIm3DRenderIndexedPrimitive(RwPrimitiveType, unsigned short*, int)
	* RwIm3DRenderLine(int, int)
	* RwIm3DRenderPrimitive(RwPrimitiveType)
	* RwIm3DRenderTriangle(int, int, int)
	* RwIm3DSetRenderPipeline(RxPipeline*, RwPrimitiveType)
	* RwIm3DSetTransformPipeline(RxPipeline*)
	* RwIm3DTransform(RxObjSpace3DVertex*, unsigned int, RwMatrixTag*, unsigned int)
	* RwImageAllocatePixels(RwImage*)
	* RwImageApplyMask(RwImage*, RwImage const*)
	* RwImageCopy(RwImage*, RwImage const*)
	* RwImageCreate(int, int, int)
	* RwImageCreateResample(RwImage const*, int, int)
	* RwImageDestroy(RwImage*)
	* RwImageFindFileType(char const*)
	* RwImageFindRasterFormat(RwImage*, int, int*, int*, int*, int*)
	* RwImageFormatSetFreeListCreateParams(int, int)
	* RwImageFreePixels(RwImage*)
	* RwImageGammaCorrect(RwImage*)
	* RwImageGetGamma()
	* RwImageGetPath()
	* RwImageGetPluginOffset(unsigned int)
	* RwImageMakeMask(RwImage*)
	* RwImageRead(char const*)
	* RwImageReadMaskedImage(char const*, char const*)
	* RwImageRegisterImageFormat(char const*, RwImage* (*)(char const*), RwImage* (*)(RwImage*, char const*))
	* RwImageRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwImageResample(RwImage*, RwImage const*)
	* RwImageResize(RwImage*, int, int)
	* RwImageSetFreeListCreateParams(int, int)
	* RwImageSetFromRaster(RwImage*, RwRaster*)
	* RwImageSetGamma(float)
	* RwImageSetPath(char const*)
	* RwImageStreamGetSize(RwImage const*)
	* RwImageStreamRead(RwStream*)
	* RwImageStreamWrite(RwImage const*, RwStream*)
	* RwImageValidatePlugins(RwImage const*)
	* RwImageWrite(RwImage*, char const*)
	* RwMatrixChunkInfoRead(RwStream*, rwStreamMatrix*, int*)
	* RwMatrixCreate()
	* RwMatrixDestroy(RwMatrixTag*)
	* RwMatrixInvert(RwMatrixTag*, RwMatrixTag const*)
	* RwMatrixMultiply(RwMatrixTag*, RwMatrixTag const*, RwMatrixTag const*)
	* RwMatrixOptimize(RwMatrixTag*, RwMatrixTolerance const*)
	* RwMatrixOrthoNormalize(RwMatrixTag*, RwMatrixTag const*)
	* RwMatrixQueryRotate(RwMatrixTag const*, RwV3d*, float*, RwV3d*)
	* RwMatrixRotate(RwMatrixTag*, RwV3d const*, float, RwOpCombineType)
	* RwMatrixRotateOneMinusCosineSine(RwMatrixTag*, RwV3d const*, float, float, RwOpCombineType)
	* RwMatrixScale(RwMatrixTag*, RwV3d const*, RwOpCombineType)
	* RwMatrixSetFreeListCreateParams(int, int)
	* RwMatrixStreamGetSize(RwMatrixTag const*)
	* RwMatrixStreamRead(RwStream*, RwMatrixTag*)
	* RwMatrixStreamWrite(RwMatrixTag const*, RwStream*)
	* RwMatrixTransform(RwMatrixTag*, RwMatrixTag const*, RwOpCombineType)
	* RwMatrixTranslate(RwMatrixTag*, RwV3d const*, RwOpCombineType)
	* RwMatrixUpdate(RwMatrixTag*)
	* RwMemFloat32ToReal(void*, unsigned int)
	* RwMemLittleEndian16(void*, unsigned int)
	* RwMemLittleEndian32(void*, unsigned int)
	* RwMemNative16(void*, unsigned int)
	* RwMemNative32(void*, unsigned int)
	* RwMemRealToFloat32(void*, unsigned int)
	* RwOpenGLGetStencilClear()
	* RwOpenGLSetStencilClear(unsigned int)
	* RwOsGetFileInterface()
	* RwOsGetMemoryInterface()
	* RwPluginRegistrySetFreeListCreateParams(int, int)
	* RwRGBAGammaCorrect(RwRGBA*)
	* RwRGBAGetRasterPixel(RwRGBA*, RwRaster*, int, int)
	* RwRGBASetFromPixel(RwRGBA*, unsigned int, int)
	* RwRGBAToPixel(RwRGBA*, int)
	* RwRasterClear(int)
	* RwRasterClearRect(RwRect*, int)
	* RwRasterCreate(int, int, int, int)
	* RwRasterDestroy(RwRaster*)
	* RwRasterGetCurrentContext()
	* RwRasterGetNumLevels(RwRaster*)
	* RwRasterGetOffset(RwRaster*, short*, short*)
	* RwRasterGetPluginOffset(unsigned int)
	* RwRasterLock(RwRaster*, unsigned char, int)
	* RwRasterLockPalette(RwRaster*, int)
	* RwRasterPopContext()
	* RwRasterPushContext(RwRaster*)
	* RwRasterRead(char const*)
	* RwRasterReadMaskedRaster(char const*, char const*)
	* RwRasterRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwRasterRender(RwRaster*, int, int)
	* RwRasterRenderFast(RwRaster*, int, int)
	* RwRasterRenderScaled(RwRaster*, RwRect*)
	* RwRasterSetFreeListCreateParams(int, int)
	* RwRasterSetFromImage(RwRaster*, RwImage*)
	* RwRasterSetKeepCPU(bool)
	* RwRasterShowRaster(RwRaster*, void*, unsigned int)
	* RwRasterSubRaster(RwRaster*, RwRaster*, RwRect*)
	* RwRasterUnlock(RwRaster*)
	* RwRasterUnlockPalette(RwRaster*)
	* RwRasterValidatePlugins(RwRaster const*)
	* RwRenderStateGet(RwRenderState, void*)
	* RwRenderStateSet(RwRenderState, void*)
	* RwResourcesAllocateResEntry(void*, RwResEntry**, int, void (*)(RwResEntry*))
	* RwResourcesEmptyArena()
	* RwResourcesFreeResEntry(RwResEntry*)
	* RwResourcesGetArenaSize()
	* RwResourcesGetArenaUsage()
	* RwResourcesSetArenaSize(unsigned int)
	* RwStreamClose(RwStream*, void*)
	* RwStreamFindChunk(RwStream*, unsigned int, unsigned int*, unsigned int*)
	* RwStreamOpen(RwStreamType, RwStreamAccessType, void const*)
	* RwStreamRead(RwStream*, void*, unsigned int)
	* RwStreamReadChunkHeaderInfo(RwStream*, RwChunkHeaderInfo*)
	* RwStreamReadInt16(RwStream*, short*, unsigned int)
	* RwStreamReadInt32(RwStream*, int*, unsigned int)
	* RwStreamReadReal(RwStream*, float*, unsigned int)
	* RwStreamSetFreeListCreateParams(int, int)
	* RwStreamSkip(RwStream*, unsigned int)
	* RwStreamWrite(RwStream*, void const*, unsigned int)
	* RwStreamWriteInt16(RwStream*, short const*, unsigned int)
	* RwStreamWriteInt32(RwStream*, int const*, unsigned int)
	* RwStreamWriteReal(RwStream*, float const*, unsigned int)
	* RwTexDictionaryAddTexture(RwTexDictionary*, RwTexture*)
	* RwTexDictionaryCreate()
	* RwTexDictionaryDestroy(RwTexDictionary*)
	* RwTexDictionaryFindHashNamedTexture(RwTexDictionary*, unsigned int)
	* RwTexDictionaryFindNamedTexture(RwTexDictionary*, char const*)
	* RwTexDictionaryForAllTexDictionaries(RwTexDictionary* (*)(RwTexDictionary*, void*), void*)
	* RwTexDictionaryForAllTextures(RwTexDictionary const*, RwTexture* (*)(RwTexture*, void*), void*)
	* RwTexDictionaryGetCurrent()
	* RwTexDictionaryGetNumTextures(RwTexDictionary*)
	* RwTexDictionaryGetPluginOffset(unsigned int)
	* RwTexDictionaryGetTextureByIndex(RwTexDictionary*, int)
	* RwTexDictionaryGtaStreamRead(RwStream*)
	* RwTexDictionaryGtaStreamRead1(RwStream*)
	* RwTexDictionaryGtaStreamRead2(RwStream*, RwTexDictionary*)
	* RwTexDictionaryRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwTexDictionaryRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RwTexDictionaryRemoveTexture(RwTexture*)
	* RwTexDictionarySetCurrent(RwTexDictionary*)
	* RwTexDictionarySetFreeListCreateParams(int, int)
	* RwTexDictionarySetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RwTexDictionaryStreamGetSize(RwTexDictionary const*)
	* RwTexDictionaryStreamRead(RwStream*)
	* RwTexDictionaryStreamWrite(RwTexDictionary const*, RwStream*)
	* RwTexDictionaryValidatePlugins(RwTexDictionary const*)
	* RwTextureCreate(RwRaster*)
	* RwTextureDestroy(RwTexture*)
	* RwTextureGenerateMipmapName(char*, char*, unsigned char, int)
	* RwTextureGetAutoMipmapping()
	* RwTextureGetFindCallBack()
	* RwTextureGetMipmapGenerationCallBack()
	* RwTextureGetMipmapNameCallBack()
	* RwTextureGetMipmapping()
	* RwTextureGetPluginOffset(unsigned int)
	* RwTextureGetReadCallBack()
	* RwTextureGtaStreamRead(RwStream*)
	* RwTextureRasterGenerateMipmaps(RwRaster*, RwImage*)
	* RwTextureRead(char const*, char const*)
	* RwTextureRegisterPlugin(int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* RwTextureRegisterPluginStream(unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* RwTextureSetAutoMipmapping(int)
	* RwTextureSetFindCallBack(RwTexture* (*)(char const*))
	* RwTextureSetFreeListCreateParams(int, int)
	* RwTextureSetMaskName(RwTexture*, char const*)
	* RwTextureSetMipmapGenerationCallBack(RwRaster* (*)(RwRaster*, RwImage*))
	* RwTextureSetMipmapNameCallBack(int (*)(char*, char*, unsigned char, int))
	* RwTextureSetMipmapping(int)
	* RwTextureSetName(RwTexture*, char const*)
	* RwTextureSetRaster(RwTexture*, RwRaster*)
	* RwTextureSetReadCallBack(RwTexture* (*)(char const*, char const*))
	* RwTextureSetStreamAlwaysCallBack(unsigned int, int (*)(void*, int, int))
	* RwTextureStreamGetSize(RwTexture const*)
	* RwTextureStreamRead(RwStream*)
	* RwTextureStreamWrite(RwTexture const*, RwStream*)
	* RwTextureValidatePlugins(RwTexture const*)
	* RwV2dLength(RwV2d const*)
	* RwV2dNormalize(RwV2d*, RwV2d const*)
	* RwV3dLength(RwV3d const*)
	* RwV3dNormalize(RwV3d*, RwV3d const*)
	* RwV3dTransformPoint(RwV3d*, RwV3d const*, RwMatrixTag const*)
	* RwV3dTransformPoints(RwV3d*, RwV3d const*, int, RwMatrixTag const*)
	* RwV3dTransformVector(RwV3d*, RwV3d const*, RwMatrixTag const*)
	* RwV3dTransformVectors(RwV3d*, RwV3d const*, int, RwMatrixTag const*)
	* RxClusterDestroyData(RxCluster*)
	* RxClusterGetAttributes(RxCluster*)
	* RxClusterInitializeData(RxCluster*, unsigned int, unsigned short)
	* RxClusterLockWrite(RxPacket*, unsigned int, RxPipelineNode*)
	* RxClusterResizeData(RxCluster*, unsigned int)
	* RxClusterSetAttributes(RxCluster*, unsigned int)
	* RxClusterSetData(RxCluster*, void*, int, int)
	* RxClusterSetExternalData(RxCluster*, void*, int, int)
	* RxClusterSetStride(RxCluster*, int)
	* RxClusterUnlock(RxCluster*)
	* RxHeapAlloc(RxHeap*, unsigned int)
	* RxHeapCreate(unsigned int)
	* RxHeapDestroy(RxHeap*)
	* RxHeapFree(RxHeap*, void*)
	* RxHeapGetGlobalHeap()
	* RxHeapRealloc(RxHeap*, void*, unsigned int, int)
	* RxLockedPipeAddFragment(RxPipeline*, unsigned int*, RxNodeDefinition*, ...)
	* RxLockedPipeAddPath(RxPipeline*, unsigned int*, RxPipelineNode*)
	* RxLockedPipeDeleteNode(RxPipeline*, RxPipelineNode*)
	* RxLockedPipeDeletePath(RxPipeline*, unsigned int*, RxPipelineNode*)
	* RxLockedPipeGetEntryPoint(RxPipeline*)
	* RxLockedPipeReplaceNode(RxPipeline*, RxPipelineNode*, RxNodeDefinition*)
	* RxLockedPipeSetEntryPoint(RxPipeline*, RxPipelineNode*)
	* RxLockedPipeUnlock(RxPipeline*)
	* RxNodeDefinitionGetOpenGLAtomicAllInOne()
	* RxNodeDefinitionGetOpenGLImmInstance()
	* RxNodeDefinitionGetOpenGLSubmitNoLight()
	* RxNodeDefinitionGetOpenGLWorldSectorAllInOne()
	* RxOpenGLAllInOneGetInstanceCallBack(RxPipelineNode*)
	* RxOpenGLAllInOneGetInstanceDLandVA(RxPipelineNode*)
	* RxOpenGLAllInOneGetLightingCallBack(RxPipelineNode*)
	* RxOpenGLAllInOneGetReinstanceCallBack(RxPipelineNode*)
	* RxOpenGLAllInOneGetRenderCallBack(RxPipelineNode*)
	* RxOpenGLAllInOneSetInstanceCallBack(RxPipelineNode*, int (*)(void*, RxOpenGLMeshInstanceData*, int, int))
	* RxOpenGLAllInOneSetInstanceDLandVA(RxPipelineNode*, int)
	* RxOpenGLAllInOneSetLightingCallBack(RxPipelineNode*, void (*)(void*))
	* RxOpenGLAllInOneSetReinstanceCallBack(RxPipelineNode*, int (*)(void*, RwResEntry*, RpMeshHeader const*, int, int (*)(void*, RxOpenGLMeshInstanceData*, int, int)))
	* RxOpenGLAllInOneSetRenderCallBack(RxPipelineNode*, void (*)(RwResEntry*, void*, unsigned char, unsigned int))
	* RxPacketCreate(RxPipelineNode*)
	* RxPipelineClone(RxPipeline*)
	* RxPipelineClusterGetCreationAttributes(RxPipelineCluster*)
	* RxPipelineClusterSetCreationAttributes(RxPipelineCluster*, unsigned int)
	* RxPipelineCreate()
	* RxPipelineExecute(RxPipeline*, void*, int)
	* RxPipelineFindNodeByIndex(RxPipeline*, unsigned int)
	* RxPipelineFindNodeByName(RxPipeline*, char const*, RxPipelineNode*, int*)
	* RxPipelineInsertDebugNode(RxPipeline*, RxPipelineNode*, RxPipelineNode*, RxNodeDefinition*)
	* RxPipelineLock(RxPipeline*)
	* RxPipelineNodeCloneDefinition(RxPipelineNode*, RxClusterDefinition*)
	* RxPipelineNodeCreateInitData(RxPipelineNode*, unsigned int)
	* RxPipelineNodeFindInput(RxPipelineNode*)
	* RxPipelineNodeFindOutputByIndex(RxPipelineNode*, unsigned int)
	* RxPipelineNodeFindOutputByName(RxPipelineNode*, char const*)
	* RxPipelineNodeForAllConnectedOutputs(RxPipelineNode*, RxPipeline*, RxPipelineNode* (*)(RxPipelineNode*, RxPipelineNode*, void*), void*)
	* RxPipelineNodeGetInitData(RxPipelineNode*)
	* RxPipelineNodeGetPipelineCluster(RxPipelineNode*, unsigned int)
	* RxPipelineNodeReplaceCluster(RxPipeline*, RxPipelineNode*, RxClusterDefinition*, RxClusterDefinition*)
	* RxPipelineNodeRequestCluster(RxPipeline*, RxPipelineNode*, RxClusterDefinition*)
	* RxPipelineNodeSendConfigMsg(RxPipelineNode*, unsigned int, unsigned int, void*)
	* RxPipelineSetFreeListCreateParams(int, int)
	* RxRenderStateVectorCreate(int)
	* RxRenderStateVectorDestroy(RxRenderStateVector*)
	* RxRenderStateVectorGetDefaultRenderStateVector()
	* RxRenderStateVectorLoadDriverState(RxRenderStateVector*)
	* RxRenderStateVectorSetDefaultRenderStateVector(RxRenderStateVector*)
	* SCCloudSaveStateUpdate()
	* SCSetCurrentLangauge(char const*)
	* SaveBriefs()
	* SaveCheckpoint(char const*, int)
	* SaveCloudGameToDisk(int)
	* SaveGameForPause(eSaveTypes, char*)
	* SaveGameToCloud(unsigned int, char const*, unsigned int)
	* SaveGameToSCCloud(int, char const*, int)
	* SaveSCCloudGameToDisk(int, void*, int)
	* SaveSomeStaticSettings()
	* SaveTelemetry()
	* SayJacked(CPed*, CVehicle*, unsigned int)
	* SayJacking(CPed*, CPed*, CVehicle*, unsigned int)
	* ScratchPadMemcpy(void*, void*, unsigned int)
	* ScreenToMenu(CVector2D const&)
	* ScrollDownHeld()
	* ScrollLeftHeld()
	* ScrollRightHeld()
	* ScrollUpHeld()
	* SecuromDisplayInit()
	* SecuromStateDisplay()
	* SelectPressed()
	* SendLanguageToSC()
	* SetAlphaCB(RpMaterial*, void*)
	* SetAmbientAndDirectionalColours(float)
	* SetAmbientColours()
	* SetAmbientColours(RwRGBAReal*)
	* SetAmbientColoursToIndicateRoadGroup(int)
	* SetAndroidPaused(int)
	* SetAtomicModelInfoFlags(CAtomicModelInfo*, unsigned int)
	* SetAtomicVisibilityCB(RwObject*, void*)
	* SetBaseModelInfoFlags(CBaseModelInfo*, unsigned int)
	* SetBrightMarkerColours(float)
	* SetClumpModelInfoFlags(CClumpModelInfo*, unsigned int)
	* SetCompAlphaCB(RpMaterial*, void*)
	* SetDefaultChannelOrder
	* SetDefaultWFXChannelOrder
	* SetDirectionalColours(RwRGBAReal*)
	* SetEnvMapTexture(RwTexture*, float, float, float, RwV2d)
	* SetFatStat(float)
	* SetFilterModeOnAtomicsTextures(RpAtomic*, RwTextureFilterMode)
	* SetFilterModeOnClumpsTextures(RpClump*, RwTextureFilterMode)
	* SetFlashyColours(float)
	* SetFlashyColours_Mild(float)
	* SetFrameNodeName(RwFrame*, char const*)
	* SetFullAmbient()
	* SetGlobalColor(float, float, float, float)
	* SetIfCollisionIsRequired(CVector2D const&, void*)
	* SetIfCollisionIsRequiredReducedBB(CVector2D const&, void*)
	* SetIfInteriorCollisionIsRequired(CVector2D const&, void*)
	* SetIfInteriorIplIsRequired(CVector2D const&, void*)
	* SetIfIplIsRequired(CVector2D const&, void*)
	* SetIfIplIsRequiredReducedBB(CVector2D const&, void*)
	* SetLightColoursForPedsCarsAndObjects(float)
	* SetLightToTypeIndex(EmuLight*, unsigned int)
	* SetLightsForInfraredVisionDefaultObjects()
	* SetLightsForInfraredVisionHeatObjects()
	* SetLightsForNightVision()
	* SetLightsWithTimeOfDayColour(RpWorld*)
	* SetMaterialDirty(bool)
	* SetMuscleStat(float)
	* SetNormalMatrix(float, float, RwV2d)
	* SetOneAdjacentNodeForThisNode(int, signed char, int, int, int, int&)
	* SetPedAtomicVisibilityCB(RwObject*, void*)
	* SetPipelineID(RpAtomic*, unsigned int)
	* SetRTPriority
	* SetReflMap(float)
	* SetTargetCoords(bool)
	* SetTextureCB(RpMaterial*, void*)
	* SetVehicleAtomicVisibilityCB(RwFrame*, void*)
	* SetVehicleAtomicVisibilityCB(RwObject*, void*)
	* SetVert(int, float, float, float, float, RwRGBA const&)
	* SettingsBeforeStartingGame()
	* SetupDataDownload()
	* SetupExceptionHandler()
	* SetupPerformanceCounters()
	* ShaderSort(void const*, void const*)
	* SkinGetBonePositions(RpClump*)
	* SkinGetBonePositionsToTable(RpClump*, RwV3d*)
	* SkinSetBonePositions(RpClump*)
	* StalacMiteAlloc(unsigned int)
	* StalacTiteAlloc(unsigned int)
	* StartDownload(int)
	* StartThread
	* StopThread
	* StoreAndSetLightsForInfraredVisionHeatObjects()
	* SuspendContext
	* SwapColors(RpAtomic*)
	* TakeJPegPhoto(RwCamera*)
	* TaskIsFighting(int)
	* TemporaryFPSVisualization()
	* TermSource(jpeg_decompress_struct*)
	* TestForThisAngle(float, CVector*, CVector*, CVector*, CVector*, CVector*, CVector*, CVector*, CVector*, float, float, float, bool)
	* TestModelIndices()
	* TextCopy(unsigned short*, unsigned short const*)
	* TextureAnnihilate(RwTexture*)
	* TheGame()
	* TidyUpModelInfo2(CEntity*, bool)
	* TodoFunction(char const*, char const*, int)
	* ToggleDebugFPS()
	* TrainHitStuff(CPtrList&, CEntity*)
	* TransformPoint(CSimpleTransform const&, RwV3d const&)
	* TransformPoint(RwV3d&, CSimpleTransform const&, RwV3d const&)
	* TransformPoints(RwV3d*, int, CMatrix const&, RwV3d const*)
	* TransformPoints(RwV3d*, int, CSimpleTransform const&, RwV3d const*)
	* TransformVector(CSimpleTransform const&, RwV3d const&)
	* TransformVector(RwV3d&, CSimpleTransform const&, RwV3d const&)
	* TransformVectors(RwV3d*, int, CMatrix const&, RwV3d const*)
	* TransformVectors(RwV3d*, int, CSimpleTransform const&, RwV3d const*)
	* TryClothes(char const*, char const*, char const*)
	* TryTattoo(char const*, char const*)
	* TxdParentConstructor(void*, int, int)
	* TxdParentCopyConstructor(void*, void const*, int, int)
	* TxdParentDestructor(void*, int, int)
	* TxdStoreLoadCB(char const*, char const*)
	* UnimplementedFunction(char const*, char const*, int)
	* UnlockStorage()
	* UpHeld()
	* UpPressed()
	* UpdateCloudSaves()
	* UpdateCutsceneObjectBoundingBox(RpClump*, int)
	* UpdateInput()
	* UpdateMapArea()
	* UpdateShaderCache()
	* UseAdvancedShadows(int)
	* UseLeftStickForController(CPed*)
	* UseSkinning(RpGeometry const*)
	* ValidateVersion()
	* VecTrunc(CVector*, int)
	* VectorInBox(CVector2D, CVector2D, CVector2D)
	* VerbCreate
	* VertexAttrFormatToGL(RQVertexAttributeFormat)
	* WarBillingInit(_JNIEnv*)
	* WarBillingShutdown()
	* WarBilling_AddSku(char const*)
	* WarBilling_InitBilling()
	* WarBilling_LocalizedPrice(char const*)
	* WarBilling_RequestPurchase(char const*)
	* WarBilling_SetBillingKey(char const*)
	* WarBilling_changeConnection(_JNIEnv*, _jobject*, unsigned char)
	* WarBilling_notifyChange(_JNIEnv*, _jobject*, _jstring*, int)
	* WarGameServiceInit(_JNIEnv*)
	* WarGameService_EnsureInitialized()
	* WarGameService_GetConnectionStatus()
	* WarGameService_IncrementAchievement(char const*, int)
	* WarGameService_RefreshData(bool)
	* WarGameService_ShowAchievementList()
	* WarGameService_ShowLeaderboard(char const*)
	* WarGameService_ShowLeaderboards()
	* WarGameService_ShowSignInUI()
	* WarGameService_SignOut()
	* WarGameService_SubmitScore(char const*, long long)
	* WarGameService_UnlockAchievement(char const*)
	* WarGameService_notifyAchievementsLoaded(_JNIEnv*, _jobject*, _jobjectArray*, _jbooleanArray*, _jintArray*, _jintArray*)
	* WarGameService_notifySignInChange(_JNIEnv*, _jobject*, unsigned char)
	* WarGamepadInit(_JNIEnv*)
	* WarGamepadShutdown()
	* WarGamepad_GetGamepadAxis(int)
	* WarGamepad_GetGamepadButtons()
	* WarGamepad_GetGamepadTrack(int, int*, int*)
	* WarGamepad_GetGamepadType()
	* WarGamepad_ProcessTouchpadAsPointer(_JNIEnv*, _jobject*, _jobject*, unsigned char)
	* WarKeyboardInit(_JNIEnv*)
	* WasForegroundAppLastFrame()
	* WaveFunc(float, float, float, float)
	* WellBufferMe(float, float*, float*, float, float, bool)
	* WorldReplaceNormalLightsWithScorched(RpWorld*, float)
	* WorldReplaceScorchedLightsWithNormal(RpWorld*)
	* WriteCloudInfo()
	* WriteRaster(RwRaster*, char const*)
	* WriteRingBuffer
	* WriteVideoCardCapsFile()
	* ZIP_AddStorage(ZIPFile*)
	* ZIP_FileCreate(char const*)
	* ZIP_FileSet(char const*)
	* __cxa_allocate_dependent_exception
	* __cxa_allocate_exception
	* __cxa_begin_catch
	* __cxa_call_terminate
	* __cxa_call_unexpected
	* __cxa_current_exception_type
	* __cxa_deleted_virtual
	* __cxa_demangle
	* __cxa_end_catch
	* __cxa_free_dependent_exception
	* __cxa_free_exception
	* __cxa_get_exception_ptr
	* __cxa_get_globals
	* __cxa_get_globals_fast
	* __cxa_guard_abort
	* __cxa_guard_acquire
	* __cxa_guard_release
	* __cxa_pure_virtual
	* __cxa_rethrow
	* __cxa_throw
	* __fixunsdfdi
	* __fixunsdfsi
	* __gcclibcxx_demangle_callback
	* __gxx_personality_v0
	* _rpAtomicResyncInterpolatedSphere(RpAtomic*)
	* _rpBinaryWorldClose(void*, int, int)
	* _rpBinaryWorldOpen(void*, int, int)
	* _rpBuildMeshAddTriangle(RpBuildMesh*, RpMaterial*, int, int, int)
	* _rpBuildMeshCreate(unsigned int)
	* _rpBuildMeshDestroy(RpBuildMesh*)
	* _rpClumpChunkInfoRead(RwStream*, RpClumpChunkInfo*, int*)
	* _rpClumpClose(void*, int, int)
	* _rpClumpOpen(void*, int, int)
	* _rpClumpRegisterExtensions()
	* _rpCreatePlatformAtomicPipelines()
	* _rpCreatePlatformMaterialPipelines()
	* _rpCreatePlatformWorldSectorPipelines()
	* _rpDestroyPlatformAtomicPipelines()
	* _rpDestroyPlatformMaterialPipelines()
	* _rpDestroyPlatformWorldSectorPipelines()
	* _rpGeometryAddRef(RpGeometry*)
	* _rpGeometryChunkInfoRead(RwStream*, RpGeometryChunkInfo*, int*)
	* _rpGeometryClose(void*, int, int)
	* _rpGeometryGetTKListFirstRegEntry()
	* _rpGeometryNativeCompressNormal(float)
	* _rpGeometryNativeCompressTexCoord(float)
	* _rpGeometryNativeRead(RwStream*, RpGeometry*)
	* _rpGeometryNativeSize(RpGeometry const*)
	* _rpGeometryNativeWrite(RwStream*, RpGeometry const*)
	* _rpGeometryNeedsPrecideUVs(RpGeometry const*, int)
	* _rpGeometryNeedsPreciseSkin(RpGeometry const*, RpSkin*)
	* _rpGeometryOpen(void*, int, int)
	* _rpLightChunkInfoRead(RwStream*, RpLightChunkInfo*, int*)
	* _rpLightClose(void*, int, int)
	* _rpLightOpen(void*, int, int)
	* _rpLightTieDestroy(RpLightTie*)
	* _rpMTEffectClose()
	* _rpMTEffectInit(RpMTEffect*, RwPlatformID)
	* _rpMTEffectOpen()
	* _rpMTEffectRegisterPlatform(RwPlatformID, RpMTEffect* (*)(RwStream*, RwPlatformID, unsigned int, unsigned int), RpMTEffect const* (*)(RpMTEffect const*, RwStream*), int (*)(RpMTEffect const*), void (*)(RpMTEffect*))
	* _rpMTEffectSystemInit()
	* _rpMatFXOpenGLAllInOneRenderCB(RwResEntry*, void*, unsigned char, unsigned int)
	* _rpMatFXOpenGLAtomicPipelineCreate()
	* _rpMatFXOpenGLDefaultRender(RxOpenGLMeshInstanceData*, RwTexture*, unsigned int)
	* _rpMatFXPipelineAtomicSetup(RpAtomic*)
	* _rpMatFXPipelineWorldSectorSetup(RpWorldSector*)
	* _rpMatFXPipelinesCreate()
	* _rpMatFXPipelinesDestroy()
	* _rpMatFXSetupBumpMapTexture(RwTexture const*, RwTexture const*)
	* _rpMatFXSetupDualRenderState(MatFXDualData*, RwRenderState)
	* _rpMatFXStreamReadTexture(RwStream*, RwTexture**)
	* _rpMatFXStreamSizeTexture(RwTexture const*)
	* _rpMatFXStreamWriteTexture(RwStream*, RwTexture const*)
	* _rpMatFXTextureMaskCreate(RwTexture const*, RwTexture const*)
	* _rpMaterialChunkInfoRead(RwStream*, RpMaterialChunkInfo*, int*)
	* _rpMaterialClose(void*, int, int)
	* _rpMaterialListAlloc(unsigned int)
	* _rpMaterialListAppendMaterial(RpMaterialList*, RpMaterial*)
	* _rpMaterialListCopy(RpMaterialList*, RpMaterialList const*)
	* _rpMaterialListDeinitialize(RpMaterialList*)
	* _rpMaterialListFindMaterialIndex(RpMaterialList const*, RpMaterial const*)
	* _rpMaterialListGetMaterial(RpMaterialList const*, int)
	* _rpMaterialListInitialize(RpMaterialList*)
	* _rpMaterialListSetSize(RpMaterialList*, int)
	* _rpMaterialListStreamGetSize(RpMaterialList const*)
	* _rpMaterialListStreamRead(RwStream*, RpMaterialList*)
	* _rpMaterialListStreamWrite(RpMaterialList const*, RwStream*)
	* _rpMaterialOpen(void*, int, int)
	* _rpMaterialRegisterMultiTexturePlugin(RwPlatformID, unsigned int, unsigned int)
	* _rpMaterialSetDefaultSurfaceProperties(RwSurfaceProperties const*)
	* _rpMeshClose(void*, int, int)
	* _rpMeshDestroy(RpMeshHeader*)
	* _rpMeshGetNextSerialNumber()
	* _rpMeshHeaderCreate(unsigned int)
	* _rpMeshHeaderDestroy(RpMeshHeader*)
	* _rpMeshHeaderForAllMeshes(RpMeshHeader*, RpMesh* (*)(RpMesh*, RpMeshHeader*, void*), void*)
	* _rpMeshOpen(void*, int, int)
	* _rpMeshOptimise(RpBuildMesh*, unsigned int)
	* _rpMeshRead(RwStream*, void const*, RpMaterialList const*)
	* _rpMeshSize(RpMeshHeader const*, void const*)
	* _rpMeshWrite(RpMeshHeader const*, void const*, RwStream*, RpMaterialList const*)
	* _rpMultiTexturePluginAttach()
	* _rpOpenGLLightPluginAttach()
	* _rpPlaneSectorChunkInfoRead(RwStream*, RpPlaneSectorChunkInfo*, int*)
	* _rpReadAtomicRights(RwStream*, int, void*, int, int)
	* _rpReadSectRights(RwStream*, int, void*, int, int)
	* _rpReadWorldRights(RwStream*, int, void*, int, int)
	* _rpSectorClose(void*, int, int)
	* _rpSectorDefaultRenderCallBack(RpWorldSector*)
	* _rpSectorOpen(void*, int, int)
	* _rpSizeAtomicRights(void const*, int, int)
	* _rpSizeSectRights(void const*, int, int)
	* _rpSizeWorldRights(void const*, int, int)
	* _rpSkinDeinitialize
	* _rpSkinGenericMatrixBlend(int, RwMatrixWeights const*, unsigned int const*, RwMatrixTag const*, unsigned char*, RwV3d const*, unsigned char*, RwV3d const*, unsigned int)
	* _rpSkinGeometryNativeRead(RwStream*, RpGeometry*)
	* _rpSkinGeometryNativeSize(RpGeometry const*)
	* _rpSkinGeometryNativeWrite(RwStream*, RpGeometry const*)
	* _rpSkinGetAlignedMatrixCache()
	* _rpSkinGetMeshBoneRLE
	* _rpSkinGetMeshBoneRLECount
	* _rpSkinGetMeshBoneRemapIndices
	* _rpSkinInitialize
	* _rpSkinOpenGLPipelineCreate(RpSkinType, void (*)(RwResEntry*, void*, unsigned char, unsigned int))
	* _rpSkinOpenGLPrepareAtomicMatrix(RpAtomic*, RpSkin*, RpHAnimHierarchy*)
	* _rpSkinOpenGLSkinPlatformGetMaxWeights(RpSkin const*)
	* _rpSkinPipelinesAttach(RpAtomic*, RpSkinType)
	* _rpSkinPipelinesCreate(unsigned int)
	* _rpSkinPipelinesDestroy()
	* _rpSkinPrepareAtomicMatrix(RpAtomic*, RpSkin*, RpHAnimHierarchy*)
	* _rpSkinPrepareAtomicMatrixWorldSpace(RpAtomic*, RpSkin*, RpHAnimHierarchy*)
	* _rpSkinSplitDataCreate
	* _rpSkinSplitDataDestroy
	* _rpSkinSplitDataStreamGetSize(RpSkin const*)
	* _rpSkinSplitDataStreamRead(RwStream*, RpSkin*)
	* _rpSkinSplitDataStreamWrite(RwStream*, RpSkin const*)
	* _rpSkipBlendRender(bool)
	* _rpSkipNonblendRender(bool)
	* _rpTieDestroy(RpTie*)
	* _rpTriListMeshGenerate(RpBuildMesh*, void*)
	* _rpUVAnimCustomDataStreamGetSize(_rpUVAnimCustomData const*)
	* _rpUVAnimCustomDataStreamRead(RwStream*)
	* _rpUVAnimCustomDataStreamWrite(_rpUVAnimCustomData const*, RwStream*)
	* _rpWorldChunkInfoRead(RwStream*, RpWorldChunkInfo*, int*)
	* _rpWorldFindBBox(RpWorld*, RwBBox*)
	* _rpWorldForAllGlobalLights(RpLight* (*)(RpLight*, void*), void*)
	* _rpWorldObjRegisterExtensions()
	* _rpWorldPipeAttach()
	* _rpWorldPipelineClose()
	* _rpWorldPipelineOpen()
	* _rpWorldRegisterWorld(RpWorld*, unsigned int)
	* _rpWorldSectorChunkInfoRead(RwStream*, RpWorldChunkInfoSector*, int*)
	* _rpWorldSectorForAllLocalLights(RpWorldSector*, RpLight* (*)(RpLight*, void*), void*)
	* _rpWorldSectorNativeRead(RwStream*, RpWorldSector*)
	* _rpWorldSectorNativeSize(RpWorldSector const*)
	* _rpWorldSectorNativeWrite(RwStream*, RpWorldSector const*)
	* _rpWorldSetupSectorBoundingBoxes(RpWorld*)
	* _rpWorldUnregisterWorld(RpWorld*)
	* _rpWriteAtomicRights(RwStream*, int, void const*, int, int)
	* _rpWriteSectRights(RwStream*, int, void const*, int, int)
	* _rpWriteWorldRights(RwStream*, int, void const*, int, int)
	* _rtCharsetAtariFontGet(RtCharsetDesc*, int*)
	* _rtDictDestruct(RtDict*)
	* _rtDictSchemaInitDict(RtDictSchema*, RtDict*)
	* _rwCPUGetCPUName(char*)
	* _rwCPUHave3DNow()
	* _rwCPUHaveMMX()
	* _rwCPUHaveSSE()
	* _rwCPUHaveSSE2()
	* _rwCameraClose(void*, int, int)
	* _rwCameraOpen(void*, int, int)
	* _rwCameraValClose()
	* _rwCameraValOpen()
	* _rwCameraValRender(RwCamera*)
	* _rwColorClose(void*, int, int)
	* _rwColorOpen(void*, int, int)
	* _rwD3D8FindCorrectRasterFormat(RwRasterType, int)
	* _rwD3D8PixelToRGB(void*, void*, int)
	* _rwDataBlockMgrCreate()
	* _rwDataBlockMgrCreateBlock(RwDataBlockMgr*, unsigned int, void (*)(void*))
	* _rwDataBlockMgrDestroy(RwDataBlockMgr*)
	* _rwDataBlockMgrEmptyBlocks(RwDataBlockMgr*)
	* _rwDataBlockMgrRecallBlocks(RwDataBlockMgr*, RwRecallDirection)
	* _rwDeviceGetHandle()
	* _rwDeviceRegisterPlugin()
	* _rwDeviceSystemRequest(RwDevice*, int, void*, void*, int)
	* _rwES2fclose(void*)
	* _rwES2feof(void*)
	* _rwES2fflush(void*)
	* _rwES2fgets(char*, int, void*)
	* _rwES2fputs(char const*, void*)
	* _rwES2fread(void*, unsigned int, unsigned int, void*)
	* _rwES2fseek(void*, long, int)
	* _rwES2ftell(void*)
	* _rwES2fwrite(void const*, unsigned int, unsigned int, void*)
	* _rwErrorClose(void*, int, int)
	* _rwErrorOpen(void*, int, int)
	* _rwFileSystemClose()
	* _rwFileSystemOpen()
	* _rwFrameCloneAndLinkClones(RwFrame*)
	* _rwFrameClose(void*, int, int)
	* _rwFrameDeInit(RwFrame*)
	* _rwFrameInit(RwFrame*)
	* _rwFrameListDeinitialize(rwFrameList*)
	* _rwFrameListFindFrame(rwFrameList const*, RwFrame const*, int*)
	* _rwFrameListInitialize(rwFrameList*, RwFrame*)
	* _rwFrameListStreamGetSize(rwFrameList const*)
	* _rwFrameListStreamRead(RwStream*, rwFrameList*)
	* _rwFrameListStreamWrite(rwFrameList const*, RwStream*)
	* _rwFrameOpen(void*, int, int)
	* _rwFramePurgeClone(RwFrame*)
	* _rwFrameSyncDirty()
	* _rwFrameSyncHierarchyLTM(RwFrame*)
	* _rwFreeListAllocReal(RwFreeList*)
	* _rwFreeListEnable(int)
	* _rwFreeListFreeReal(RwFreeList*, void*)
	* _rwGLHandleBlend(RwRaster*)
	* _rwGetES2TextureType()
	* _rwGetNumEngineInstances()
	* _rwIm3DClose(void*, int, int)
	* _rwIm3DCreatePlatformRenderPipelines(rwIm3DRenderPipelines*)
	* _rwIm3DCreatePlatformTransformPipeline(RxPipeline**)
	* _rwIm3DDestroyPlatformRenderPipelines(rwIm3DRenderPipelines*)
	* _rwIm3DDestroyPlatformTransformPipeline(RxPipeline**)
	* _rwIm3DGetPool()
	* _rwIm3DOpen(void*, int, int)
	* _rwImageClose(void*, int, int)
	* _rwImageFindAlphaType(RwImage*)
	* _rwImageFindNearestPaletteColor(RwRGBA*, RwRGBA*, int)
	* _rwImageGammaCorrectArrayOfRGBA(RwRGBA*, RwRGBA*, int)
	* _rwImageGammaUnCorrectArrayOfRGBA(RwRGBA*, RwRGBA*, int)
	* _rwImageOpen(void*, int, int)
	* _rwImageSetFromRaster1555(RwImage*, unsigned char*, int)
	* _rwImageSetFromRaster4444(RwImage*, unsigned char*, int)
	* _rwImageSetFromRaster565(RwImage*, unsigned char*, int)
	* _rwImageSetFromRaster888(RwImage*, unsigned char*, int)
	* _rwImageSetFromRaster8888(RwImage*, unsigned char*, int)
	* _rwImageSwapPath(char**, int*)
	* _rwInvSqrt(float)
	* _rwMatrixClose(void*, int, int)
	* _rwMatrixDeterminant(RwMatrixTag const*)
	* _rwMatrixIdentityError(RwMatrixTag const*)
	* _rwMatrixNormalError(RwMatrixTag const*)
	* _rwMatrixOpen(void*, int, int)
	* _rwMatrixOrthogonalError(RwMatrixTag const*)
	* _rwMatrixSetMultFn(void (*)(RwMatrixTag*, RwMatrixTag const*, RwMatrixTag const*))
	* _rwMatrixSetOptimizations(int)
	* _rwMemoryClose()
	* _rwMemoryOpen(RwMemoryFunctions const*)
	* _rwMipmapRasterSetFromImage1555(unsigned char*, int, RwImage*, int)
	* _rwMipmapRasterSetFromImage4444(unsigned char*, int, RwImage*, int)
	* _rwMipmapRasterSetFromImage565(unsigned char*, int, RwImage*, int)
	* _rwMipmapRasterSetFromImage888(unsigned char*, int, RwImage*, int)
	* _rwMipmapRasterSetFromImage8888(unsigned char*, int, RwImage*, int)
	* _rwObjectHasFrameReleaseFrame(void*)
	* _rwObjectHasFrameSetFrame(void*, RwFrame*)
	* _rwOpenGLApplyRwMatrix(RwMatrixTag*)
	* _rwOpenGLCameraBeginUpdate(void*, void*, int)
	* _rwOpenGLCameraClear(void*, void*, int)
	* _rwOpenGLCameraEndUpdate(void*, void*, int)
	* _rwOpenGLClose()
	* _rwOpenGLDescribeMipLevel(int, int, int, int, int*, int*, int*)
	* _rwOpenGLDetermineMaxMipLevel(int, int)
	* _rwOpenGLGetActiveTextureUnit()
	* _rwOpenGLGetEngineWindowHeight()
	* _rwOpenGLGetEngineZBufferDepth()
	* _rwOpenGLGetMaxSupportedHardwareLights()
	* _rwOpenGLGetMaxSupportedTextureSize()
	* _rwOpenGLGetRasterFormat(void*, void*, int)
	* _rwOpenGLGetRenderState(RwRenderState, void*)
	* _rwOpenGLGetStencilBufferDepth(unsigned char*)
	* _rwOpenGLIm2DClose()
	* _rwOpenGLIm2DOpen(RwDevice*)
	* _rwOpenGLIm2DSetSubmitFuncs()
	* _rwOpenGLIm2DSetVertexFuncs(int, int, int)
	* _rwOpenGLImageFindRasterFormat(void*, void*, int)
	* _rwOpenGLImageSetRaster(void*, void*, int)
	* _rwOpenGLInvalidateRStateCachedTexture()
	* _rwOpenGLLightsClose()
	* _rwOpenGLLightsEnable(int)
	* _rwOpenGLLightsGlobalLightsEnable(RpLightFlag)
	* _rwOpenGLLightsLocalLightEnable(RpLight const*)
	* _rwOpenGLLightsOpen()
	* _rwOpenGLLightsSetMaterialProperties(RpMaterial const*, unsigned int)
	* _rwOpenGLMatrixToRwMatrix(void*)
	* _rwOpenGLNativeTextureGetSize(void*, void*, int)
	* _rwOpenGLNativeTextureRead(void*, void*, int)
	* _rwOpenGLNativeTextureReadD3D8(void*, void*)
	* _rwOpenGLNativeTextureReadD3D9(void*, void*)
	* _rwOpenGLNativeTextureReadXBOX(void*, void*)
	* _rwOpenGLNativeTextureWrite(void*, void*, int)
	* _rwOpenGLNextPowerOf2(unsigned int)
	* _rwOpenGLOpen()
	* _rwOpenGLPixelToRGB(void*, void*, int)
	* _rwOpenGLRGBToPixel(void*, void*, int)
	* _rwOpenGLRasterClear(void*, void*, int)
	* _rwOpenGLRasterClearRect(void*, void*, int)
	* _rwOpenGLRasterCreate(void*, void*, int)
	* _rwOpenGLRasterDestroy(void*, void*, int)
	* _rwOpenGLRasterGetMipLevels(void*, void*, int)
	* _rwOpenGLRasterLock(void*, void*, int)
	* _rwOpenGLRasterLockPalette(void*, void*, int)
	* _rwOpenGLRasterRender(void*, void*, int)
	* _rwOpenGLRasterRenderFast(void*, void*, int)
	* _rwOpenGLRasterRenderScaled(void*, void*, int)
	* _rwOpenGLRasterSetImage(void*, void*, int)
	* _rwOpenGLRasterShowRaster(void*, void*, int)
	* _rwOpenGLRasterSubRaster(void*, void*, int)
	* _rwOpenGLRasterUnlock(void*, void*, int)
	* _rwOpenGLRasterUnlockPalette(void*, void*, int)
	* _rwOpenGLRenderStateClose()
	* _rwOpenGLSelectStencilBufferDepth(unsigned char)
	* _rwOpenGLSetActiveTextureUnit(unsigned char)
	* _rwOpenGLSetInitialRenderState()
	* _rwOpenGLSetRasterContext(void*, void*, int)
	* _rwOpenGLSetRenderState(RwRenderState, void*)
	* _rwOpenGLSetRenderStateNoExtras(RwRenderState, void*)
	* _rwOpenGLSetStandards(int (**)(void*, void*, int), int)
	* _rwOpenGLSystem(int, void*, void*, int)
	* _rwOpenGLTextureSetRaster(void*, void*, int)
	* _rwPalQuantAddImage(rwPalQuant*, RwImage*, float)
	* _rwPalQuantInit(rwPalQuant*)
	* _rwPalQuantMatchImage(unsigned char*, int, int, int, rwPalQuant*, RwImage*)
	* _rwPalQuantResolvePalette(RwRGBA*, int, rwPalQuant*)
	* _rwPalQuantTerm(rwPalQuant*)
	* _rwPipeAttach()
	* _rwPipeInitForCamera(RwCamera const*)
	* _rwPipelineCheckForTramplingOfNodePrivateSpace(RxPipeline*)
	* _rwPluginRegistryAddPlgnStrmRightsCB(RwPluginRegistry*, unsigned int, int (*)(void*, int, int, unsigned int))
	* _rwPluginRegistryAddPlgnStrmlwysCB(RwPluginRegistry*, unsigned int, int (*)(void*, int, int))
	* _rwPluginRegistryAddPlugin(RwPluginRegistry*, int, unsigned int, void* (*)(void*, int, int), void* (*)(void*, int, int), void* (*)(void*, void const*, int, int))
	* _rwPluginRegistryAddPluginStream(RwPluginRegistry*, unsigned int, RwStream* (*)(RwStream*, int, void*, int, int), RwStream* (*)(RwStream*, int, void const*, int, int), int (*)(void const*, int, int))
	* _rwPluginRegistryClose()
	* _rwPluginRegistryCopyObject(RwPluginRegistry const*, void*, void const*)
	* _rwPluginRegistryDeInitObject(RwPluginRegistry const*, void*)
	* _rwPluginRegistryGetPluginOffset(RwPluginRegistry const*, unsigned int)
	* _rwPluginRegistryGetSize(RwPluginRegistry const*, void const*)
	* _rwPluginRegistryInitObject(RwPluginRegistry const*, void*)
	* _rwPluginRegistryInvokeRights(RwPluginRegistry const*, unsigned int, void*, unsigned int)
	* _rwPluginRegistryOpen()
	* _rwPluginRegistryReadDataChunks(RwPluginRegistry const*, RwStream*, void*)
	* _rwPluginRegistrySetStaticPluginsSize(RwPluginRegistry*, int)
	* _rwPluginRegistrySkipDataChunks(RwPluginRegistry const*, RwStream*)
	* _rwPluginRegistryWriteDataChunks(RwPluginRegistry const*, RwStream*, void const*)
	* _rwRGBAFromImage32(RwRGBA*, unsigned char const*, RwImage const*, int)
	* _rwRGBAFromImage8(RwRGBA*, unsigned char const*, RwImage const*, int)
	* _rwRasterClose(void*, int, int)
	* _rwRasterOpen(void*, int, int)
	* _rwRasterSetFromImage1555(unsigned char*, int, RwImage*)
	* _rwRasterSetFromImage4444(unsigned char*, int, RwImage*)
	* _rwRasterSetFromImage565(unsigned char*, int, RwImage*)
	* _rwRasterSetFromImage888(unsigned char*, int, RwImage*)
	* _rwRasterSetFromImage8888(unsigned char*, int, RwImage*)
	* _rwRenderPipelineClose(void*, int, int)
	* _rwRenderPipelineOpen(void*, int, int)
	* _rwResHeapAlloc(void*, unsigned int)
	* _rwResHeapCalloc(void*, unsigned int, unsigned int)
	* _rwResHeapClose(void*)
	* _rwResHeapFree(void*)
	* _rwResHeapGetStats(void*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
	* _rwResHeapInit(void*, unsigned int)
	* _rwResHeapRealloc(void*, unsigned int)
	* _rwResourcesClose(void*, int, int)
	* _rwResourcesOpen(void*, int, int)
	* _rwResourcesPurge()
	* _rwSListCreate(int, unsigned int)
	* _rwSListDestroy(RwSList*)
	* _rwSListDestroyArray(unsigned char*)
	* _rwSListDestroyEndEntries(RwSList*, int)
	* _rwSListDestroyEntry(RwSList*, int)
	* _rwSListEmpty(RwSList*)
	* _rwSListGetArray(RwSList*)
	* _rwSListGetBegin(RwSList*)
	* _rwSListGetEnd(RwSList*)
	* _rwSListGetEntry(RwSList*, int)
	* _rwSListGetNewEntries(RwSList*, int, unsigned int)
	* _rwSListGetNewEntry(RwSList*, unsigned int)
	* _rwSListGetNumEntries(RwSList const*)
	* _rwSListReleaseArray(RwSList*)
	* _rwSListToArray(RwSList*)
	* _rwSetES2TextureType(RwPlatformID)
	* _rwSqrt(float)
	* _rwStreamInitialize(RwStream*, int, RwStreamType, RwStreamAccessType, void const*)
	* _rwStreamModuleClose(void*, int, int)
	* _rwStreamModuleOpen(void*, int, int)
	* _rwStreamReadChunkHeader(RwStream*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
	* _rwStreamWriteVersionedChunkHeader(RwStream*, int, int, unsigned int, unsigned int)
	* _rwStringClose()
	* _rwStringDestroy(char*)
	* _rwStringOpen()
	* _rwStringStreamFindAndRead(char*, RwStream*)
	* _rwStringStreamGetSize(char const*)
	* _rwStringStreamWrite(char const*, RwStream*)
	* _rwTextureChunkInfoRead(RwStream*, rpTextureChunkInfo*, int*)
	* _rwTextureClose(void*, int, int)
	* _rwTextureGetAutoMipMapState()
	* _rwTextureOpen(void*, int, int)
	* _rwTextureSetAutoMipMapState(int)
	* _rwV3dNormalize(RwV3d*, RwV3d const*)
	* _rwVectorClose(void*, int, int)
	* _rwVectorOpen(void*, int, int)
	* _rwVectorSetMultFn(RwV3d* (*)(RwV3d*, RwV3d const*, RwMatrixTag const*), RwV3d* (*)(RwV3d*, RwV3d const*, int, RwMatrixTag const*), RwV3d* (*)(RwV3d*, RwV3d const*, RwMatrixTag const*), RwV3d* (*)(RwV3d*, RwV3d const*, int, RwMatrixTag const*))
	* _rwerror(int, ...)
	* _rwgetcurrenttime(char*, int)
	* _rwpathisabsolute(char const*)
	* _rxChaseDependencies(RxPipeline*)
	* _rxEmbeddedPacketBetweenNodes(RxPipeline*, RxPipelineNode*, unsigned int)
	* _rxEmbeddedPacketBetweenPipelines(RxPipeline*, RxPipeline*)
	* _rxHeapReset(RxHeap*)
	* _rxNotAFunction17(int)
	* _rxOpenGLAllInOneAtomicInstanceVertexArray(RxOpenGLMeshInstanceData*, RpAtomic const*, RpGeometry const*, RpGeometryFlag, int, int, unsigned char*, RwRGBA*, RwRGBA*)
	* _rxOpenGLAllInOnePipelineInit(RxPipelineNode*)
	* _rxOpenGLAllInOnePipelineTerm(RxPipelineNode*)
	* _rxOpenGLDefaultAllInOneAtomicLightingCB(void*)
	* _rxOpenGLDefaultAllInOneRenderCB(RwResEntry*, void*, unsigned char, unsigned int)
	* _rxOpenGLDefaultAtomicAllInOneNode(RxPipelineNode*, RxPipelineNodeParam const*)
	* _rxOpenGLInstance(void*, void*, RwResEntry**, RpMeshHeader*, int, int (*)(void*, RxOpenGLMeshInstanceData*, int, int))
	* _rxOpenGLMeshGetNumVerticesAndMinIndex(unsigned short*, unsigned int, unsigned int*, unsigned int*)
	* _rxOpenGLReinstance(void*, RpMeshHeader const*, RxOpenGLMeshInstanceData*, int, int (*)(void*, RxOpenGLMeshInstanceData*, int, int))
	* _rxPacketDestroy(RxPacket*)
	* _rxPipelineClose()
	* _rxPipelineDestroy(RxPipeline*)
	* _rxPipelineOpen()
	* _rxSelectionSort(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
	* _rxWorldDevicePluginAttach()
	* _rx_rxRadixExchangeSort(void*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
	* _tr_align
	* _tr_flush_block
	* _tr_init
	* _tr_stored_block
	* _tr_tally
	* adler32
	* alAuxiliaryEffectSlotf
	* alAuxiliaryEffectSlotfv
	* alAuxiliaryEffectSloti
	* alAuxiliaryEffectSlotiv
	* alBuffer3f
	* alBuffer3i
	* alBufferData
	* alBufferSubDataSOFT
	* alBufferf
	* alBufferfv
	* alBufferi
	* alBufferiv
	* alDatabufferDataEXT
	* alDatabufferSubDataEXT
	* alDatabufferfEXT
	* alDatabufferfvEXT
	* alDatabufferiEXT
	* alDatabufferivEXT
	* alDeleteAuxiliaryEffectSlots
	* alDeleteBuffers
	* alDeleteDatabuffersEXT
	* alDeleteEffects
	* alDeleteFilters
	* alDeleteSources
	* alDisable
	* alDistanceModel
	* alDopplerFactor
	* alDopplerVelocity
	* alEffectf
	* alEffectfv
	* alEffecti
	* alEffectiv
	* alEnable
	* alFilterf
	* alFilterfv
	* alFilteri
	* alFilteriv
	* alGenAuxiliaryEffectSlots
	* alGenBuffers
	* alGenDatabuffersEXT
	* alGenEffects
	* alGenFilters
	* alGenSources
	* alGetAuxiliaryEffectSlotf
	* alGetAuxiliaryEffectSlotfv
	* alGetAuxiliaryEffectSloti
	* alGetAuxiliaryEffectSlotiv
	* alGetBoolean
	* alGetBooleanv
	* alGetBuffer3f
	* alGetBuffer3i
	* alGetBufferf
	* alGetBufferfv
	* alGetBufferi
	* alGetBufferiv
	* alGetDatabufferSubDataEXT
	* alGetDatabufferfEXT
	* alGetDatabufferfvEXT
	* alGetDatabufferiEXT
	* alGetDatabufferivEXT
	* alGetDouble
	* alGetDoublev
	* alGetEffectf
	* alGetEffectfv
	* alGetEffecti
	* alGetEffectiv
	* alGetEnumValue
	* alGetError
	* alGetFilterf
	* alGetFilterfv
	* alGetFilteri
	* alGetFilteriv
	* alGetFloat
	* alGetFloatv
	* alGetInteger
	* alGetIntegerv
	* alGetListener3f
	* alGetListener3i
	* alGetListenerf
	* alGetListenerfv
	* alGetListeneri
	* alGetListeneriv
	* alGetProcAddress
	* alGetSource3f
	* alGetSource3i
	* alGetSourcef
	* alGetSourcefv
	* alGetSourcei
	* alGetSourceiv
	* alGetString
	* alIsAuxiliaryEffectSlot
	* alIsBuffer
	* alIsDatabufferEXT
	* alIsEffect
	* alIsEnabled
	* alIsExtensionPresent
	* alIsFilter
	* alIsSource
	* alListener3f
	* alListener3i
	* alListenerf
	* alListenerfv
	* alListeneri
	* alListeneriv
	* alMapDatabufferEXT
	* alSelectDatabufferEXT
	* alSetError
	* alSource3f
	* alSource3i
	* alSourcePause
	* alSourcePausev
	* alSourcePlay
	* alSourcePlayv
	* alSourceQueueBuffers
	* alSourceRewind
	* alSourceRewindv
	* alSourceStop
	* alSourceStopv
	* alSourceUnqueueBuffers
	* alSourcef
	* alSourcefv
	* alSourcei
	* alSourceiv
	* alSpeedOfSound
	* alThunkAddEntry
	* alThunkExit
	* alThunkInit
	* alThunkLookupEntry
	* alThunkRemoveEntry
	* alUnmapDatabufferEXT
	* al_print
	* alcCaptureCloseDevice
	* alcCaptureOpenDevice
	* alcCaptureSamples
	* alcCaptureStart
	* alcCaptureStop
	* alcCloseDevice
	* alcCreateContext
	* alcDestroyContext
	* alcGetContextsDevice
	* alcGetCurrentContext
	* alcGetEnumValue
	* alcGetError
	* alcGetIntegerv
	* alcGetJavaVM
	* alcGetProcAddress
	* alcGetString
	* alcGetThreadContext
	* alcIsExtensionPresent
	* alcMakeContextCurrent
	* alcOpenDevice
	* alcProcessContext
	* alcResume
	* alcSetError
	* alcSetThreadContext
	* alcSuspend
	* alcSuspendContext
	* alc_audiotrack_deinit
	* alc_audiotrack_init
	* alc_audiotrack_probe
	* alc_deinit
	* alc_init
	* alc_null_deinit
	* alc_null_init
	* alc_null_probe
	* aluCart2LUTpos
	* aluHandleDisconnect
	* aluInitPanning
	* aluMixData
	* android_JNI_OnLoad
	* android_sigaction(int, siginfo*, void*)
	* asinf
	* bIsLampPost(int)
	* bs2b_clear
	* bs2b_cross_feed
	* bs2b_get_level
	* bs2b_get_srate
	* bs2b_is_clear
	* bs2b_set_level
	* bs2b_set_srate
	* charIsSeparator(char)
	* compress
	* compress2
	* containsNonAscii(unsigned short*, int)
	* crc32
	* d3dShouldSwap(unsigned int)
	* d3dToRQ(unsigned int, unsigned char)
	* d3dhasAlpha(unsigned int, unsigned char)
	* deflate
	* deflateCopy
	* deflateEnd
	* deflateInit2_
	* deflateInit_
	* deflateParams
	* deflateReset
	* deflateSetDictionary
	* destroyTexture(RwTexture*, void*)
	* dxtSwizzler_CreateUncompressedTexture16(unsigned int, unsigned int, unsigned int, void const*, unsigned int&)
	* dxtSwizzler_CreateUncompressedTexture32(unsigned int, unsigned int, unsigned int, void const*, unsigned int&)
	* dxtSwizzler_DecodeDXTColorBlock(unsigned char const*, unsigned short*, unsigned int, bool, unsigned int)
	* dxtSwizzler_DecodeDXTColorBlock8888(unsigned char const*, unsigned int*, unsigned int, bool, bool)
	* dxtSwizzler_GetNativeFormat()
	* dxtSwizzler_InlineSwizzleATC(unsigned int, unsigned int, unsigned int, void const*, unsigned int&)
	* dxtSwizzler_SwizzlePVR(unsigned int, unsigned int, void const*)
	* emu_ArraysDelete(unsigned int)
	* emu_ArraysDrawCurrent(unsigned int)
	* emu_ArraysDrawStored(unsigned int, unsigned int)
	* emu_ArraysDrawStoredSeparate(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
	* emu_ArraysGetID(unsigned int)
	* emu_ArraysGetShareResource()
	* emu_ArraysIndices(void*, unsigned int, unsigned int)
	* emu_ArraysLock(unsigned int)
	* emu_ArraysProcessQueue(unsigned char)
	* emu_ArraysReset()
	* emu_ArraysSetUseGPU(unsigned char)
	* emu_ArraysShareResource(unsigned char)
	* emu_ArraysStore(unsigned char, unsigned char)
	* emu_ArraysUnlock(unsigned int)
	* emu_ArraysVertex(void*, unsigned int, unsigned int, unsigned int)
	* emu_ArraysVertexAttrib(unsigned int, int, unsigned int, unsigned char, int)
	* emu_BindAltRenderTarget()
	* emu_BindShadowRenderTarget()
	* emu_CameraPositionIsDirty()
	* emu_CameraPositionSetDirty(unsigned char)
	* emu_CustomShaderCreate(char const*, char const*)
	* emu_CustomShaderDelete(void*)
	* emu_CustomShaderSet(void*)
	* emu_CustomShaderUniform(void*, unsigned int, int, float*)
	* emu_DebugAlphaTestEnabled(unsigned char)
	* emu_DebugDrawCallsEnabled(unsigned char)
	* emu_DebugDrawWhenBlendEnabled(unsigned char)
	* emu_DebugLightingEnabled(unsigned char)
	* emu_DebugTexturingEnabled(unsigned char)
	* emu_DisableAlphaModulate()
	* emu_DistanceFogGetColor()
	* emu_DistanceFogGetParameters()
	* emu_DistanceFogIsDirty()
	* emu_DistanceFogSetDirty(unsigned char)
	* emu_DistanceFogSetEnabled(unsigned char)
	* emu_DistanceFogSetup(float, float, float, float, float)
	* emu_DropAltRenderTarget()
	* emu_EnableAlphaModulate(float)
	* emu_FlushAltRenderTarget()
	* emu_GammaSet(unsigned char)
	* emu_GetCameraPosition()
	* emu_GetCustomShader()
	* emu_GetEnvMapCoefficient()
	* emu_InternalSkinClearDirty()
	* emu_InternalSkinGetMatrices()
	* emu_InternalSkinGetVectorCount()
	* emu_InternalSkinMatricesDirty()
	* emu_IsAltDrawing()
	* emu_IsAltRenderTarget()
	* emu_LightingSetBackLight(unsigned char)
	* emu_ResetEnvMap()
	* emu_ResolveShadowTarget(float)
	* emu_SetAltBlurAmt(float)
	* emu_SetAltRTContrast(float, float, float, float, float, float)
	* emu_SetAltRTGrading(RQVector const&, RQVector const&, RQVector const&)
	* emu_SetAltRenderTarget(int, int)
	* emu_SetAltTargetTexture()
	* emu_SetCameraBasedNormals(unsigned char)
	* emu_SetCameraPosition(float*)
	* emu_SetEnvMap(void*, float, int)
	* emu_SetRenderingSphere(float*, unsigned char)
	* emu_SetSecondVertexColor(unsigned char, float)
	* emu_SetShadowTargetTexture()
	* emu_SetTextureMatrixEnabled(float*, unsigned char)
	* emu_SetWater(unsigned char)
	* emu_SetWaterTime(float)
	* emu_ShaderGetCurSource(char*, char*)
	* emu_ShaderListCompile(unsigned int*, unsigned int)
	* emu_ShaderListGetList(unsigned int*)
	* emu_Shutdown()
	* emu_ShutdownAltRenderTarget()
	* emu_ShutdownImm()
	* emu_ShutdownShaders()
	* emu_SkinSetMatrices(float*, int)
	* emu_SwapAltRenderTarget()
	* emu_TextureSetDetailTexture(void*, unsigned int)
	* emu_TexturingGet4444Conversion()
	* emu_TexturingGetEnhancedDetail()
	* emu_TexturingSet4444Conversion(unsigned char)
	* emu_TexturingSetEnhancedDetail(unsigned char)
	* emu_TexturingSetTrilinear(unsigned char)
	* emu_glBegin(unsigned int)
	* emu_glClear(unsigned int)
	* emu_glClearColor(float, float, float, float)
	* emu_glClearDepth(double)
	* emu_glClearStencil(int)
	* emu_glColor3b(signed char, signed char, signed char)
	* emu_glColor3bv(signed char const*)
	* emu_glColor3d(double, double, double)
	* emu_glColor3dv(double const*)
	* emu_glColor3f(float, float, float)
	* emu_glColor3fv(float const*)
	* emu_glColor3s(short, short, short)
	* emu_glColor3sv(short const*)
	* emu_glColor3ub(unsigned char, unsigned char, unsigned char)
	* emu_glColor3ubv(unsigned char const*)
	* emu_glColor3us(unsigned short, unsigned short, unsigned short)
	* emu_glColor3usv(unsigned short const*)
	* emu_glColor4b(signed char, signed char, signed char, signed char)
	* emu_glColor4bv(signed char const*)
	* emu_glColor4d(double, double, double, double)
	* emu_glColor4dv(double const*)
	* emu_glColor4f(float, float, float, float)
	* emu_glColor4fv(float const*)
	* emu_glColor4s(short, short, short, short)
	* emu_glColor4sv(short const*)
	* emu_glColor4ub(unsigned char, unsigned char, unsigned char, unsigned char)
	* emu_glColor4ubv(unsigned char const*)
	* emu_glColor4us(unsigned short, unsigned short, unsigned short, unsigned short)
	* emu_glColor4usv(unsigned short const*)
	* emu_glColorMaterial(unsigned int, unsigned int)
	* emu_glDisable(unsigned int)
	* emu_glEnable(unsigned int)
	* emu_glEnd()
	* emu_glEndInternal()
	* emu_glFrustum(double, double, double, double, double, double)
	* emu_glGetError()
	* emu_glGetFloatv(unsigned int, float*)
	* emu_glIsEnabled(unsigned int)
	* emu_glLightModelf(unsigned int, float)
	* emu_glLightModelfv(unsigned int, float const*)
	* emu_glLightModeli(unsigned int, int)
	* emu_glLightModeliv(unsigned int, int const*)
	* emu_glLightf(unsigned int, unsigned int, float)
	* emu_glLightfv(unsigned int, unsigned int, float const*)
	* emu_glLighti(unsigned int, unsigned int, int)
	* emu_glLightiv(unsigned int, unsigned int, int const*)
	* emu_glLoadIdentity()
	* emu_glMaterialf(unsigned int, unsigned int, float)
	* emu_glMaterialfv(unsigned int, unsigned int, float const*)
	* emu_glMatrixMode(unsigned int)
	* emu_glMultMatrixd(double const*)
	* emu_glMultMatrixf(float const*)
	* emu_glNormal3b(signed char, signed char, signed char)
	* emu_glNormal3bv(signed char const*)
	* emu_glNormal3d(double, double, double)
	* emu_glNormal3dv(double const*)
	* emu_glNormal3f(float, float, float)
	* emu_glNormal3fv(float const*)
	* emu_glNormal3s(short, short, short)
	* emu_glNormal3sv(short const*)
	* emu_glOrtho(double, double, double, double, double, double)
	* emu_glPopMatrix()
	* emu_glPushAndLoadMatrix(float*)
	* emu_glPushMatrix()
	* emu_glReadPixels(int, int, int, int, unsigned int, unsigned int, void*)
	* emu_glRotated(double, double, double, double)
	* emu_glRotatef(float, float, float, float)
	* emu_glScaled(double, double, double)
	* emu_glScalef(float, float, float)
	* emu_glScissor(int, int, int, int)
	* emu_glTexCoord1d(double)
	* emu_glTexCoord1dv(double const*)
	* emu_glTexCoord1f(float)
	* emu_glTexCoord1fv(float const*)
	* emu_glTexCoord1s(short)
	* emu_glTexCoord1sv(short const*)
	* emu_glTexCoord2d(double, double)
	* emu_glTexCoord2dv(double const*)
	* emu_glTexCoord2f(float, float)
	* emu_glTexCoord2fv(float const*)
	* emu_glTexCoord2s(short, short)
	* emu_glTexCoord2sv(short const*)
	* emu_glTexCoord3d(double, double, double)
	* emu_glTexCoord3dv(double const*)
	* emu_glTexCoord3f(float, float, float)
	* emu_glTexCoord3fv(float const*)
	* emu_glTexCoord3s(short, short, short)
	* emu_glTexCoord3sv(short const*)
	* emu_glTexCoord4d(double, double, double, double)
	* emu_glTexCoord4dv(double const*)
	* emu_glTexCoord4f(float, float, float, float)
	* emu_glTexCoord4fv(float const*)
	* emu_glTexCoord4s(short, short, short, short)
	* emu_glTexCoord4sv(short const*)
	* emu_glTranslated(double, double, double)
	* emu_glTranslatef(float, float, float)
	* emu_glVertex2d(double, double)
	* emu_glVertex2dv(double const*)
	* emu_glVertex2f(float, float)
	* emu_glVertex2fv(float const*)
	* emu_glVertex2s(short, short)
	* emu_glVertex2sv(short const*)
	* emu_glVertex3d(double, double, double)
	* emu_glVertex3dv(double const*)
	* emu_glVertex3f(float, float, float)
	* emu_glVertex3fv(float const*)
	* emu_glVertex3s(short, short, short)
	* emu_glVertex3sv(short const*)
	* emu_glVertex4d(double, double, double, double)
	* emu_glVertex4dv(double const*)
	* emu_glVertex4f(float, float, float, float)
	* emu_glVertex4fv(float const*)
	* emu_glVertex4s(short, short, short, short)
	* emu_glVertex4sv(short const*)
	* emu_glViewport(int, int, int, int)
	* es2SetCull(RQCullMode)
	* findDataMatch(char const*, char const*)
	* findDataNextToken(char const*)
	* findDataString(char const*, char const*, int)
	* findDataStringEOL(char const*, char const*)
	* forceLinearFilteringAtomicsCB(RpAtomic*, void*)
	* forceLinearFilteringMatTexturesCB(RpMaterial*, void*)
	* freeAlignPC(void*)
	* get_crc_table
	* gzclose
	* gzdopen
	* gzeof
	* gzerror
	* gzflush
	* gzgetc
	* gzgets
	* gzopen
	* gzprintf
	* gzputc
	* gzputs
	* gzread
	* gzrewind
	* gzseek
	* gzsetparams
	* gztell
	* gzwrite
	* inflate
	* inflateEnd
	* inflateInit2_
	* inflateInit_
	* inflateReset
	* inflateSetDictionary
	* inflateSync
	* inflateSyncPoint
	* inflate_blocks
	* inflate_blocks_free
	* inflate_blocks_new
	* inflate_blocks_reset
	* inflate_blocks_sync_point
	* inflate_codes
	* inflate_codes_free
	* inflate_codes_new
	* inflate_fast
	* inflate_flush
	* inflate_set_dictionary
	* inflate_trees_bits
	* inflate_trees_dynamic
	* inflate_trees_fixed
	* initGraphics()
	* isJapanesePunctuation(unsigned short)
	* jcopy_block_row(short (*) [64], short (*) [64], unsigned int)
	* jcopy_sample_rows(unsigned char**, int, unsigned char**, int, int, unsigned int)
	* jdiv_round_up(long, long)
	* jinit_c_coef_controller(jpeg_compress_struct*, unsigned char)
	* jinit_c_main_controller(jpeg_compress_struct*, unsigned char)
	* jinit_c_master_control(jpeg_compress_struct*, unsigned char)
	* jinit_c_prep_controller(jpeg_compress_struct*, unsigned char)
	* jinit_color_converter(jpeg_compress_struct*)
	* jinit_color_deconverter(jpeg_decompress_struct*)
	* jinit_compress_master(jpeg_compress_struct*)
	* jinit_d_coef_controller(jpeg_decompress_struct*, unsigned char)
	* jinit_d_main_controller(jpeg_decompress_struct*, unsigned char)
	* jinit_d_post_controller(jpeg_decompress_struct*, unsigned char)
	* jinit_downsampler(jpeg_compress_struct*)
	* jinit_forward_dct(jpeg_compress_struct*)
	* jinit_huff_decoder(jpeg_decompress_struct*)
	* jinit_huff_encoder(jpeg_compress_struct*)
	* jinit_input_controller(jpeg_decompress_struct*)
	* jinit_inverse_dct(jpeg_decompress_struct*)
	* jinit_marker_reader(jpeg_decompress_struct*)
	* jinit_marker_writer(jpeg_compress_struct*)
	* jinit_master_decompress(jpeg_decompress_struct*)
	* jinit_memory_mgr(jpeg_common_struct*)
	* jinit_upsampler(jpeg_decompress_struct*)
	* jpeg_CreateCompress(jpeg_compress_struct*, int, unsigned int)
	* jpeg_CreateDecompress(jpeg_decompress_struct*, int, unsigned int)
	* jpeg_abort(jpeg_common_struct*)
	* jpeg_abort_compress(jpeg_compress_struct*)
	* jpeg_abort_decompress(jpeg_decompress_struct*)
	* jpeg_add_quant_table(jpeg_compress_struct*, int, unsigned int const*, int, unsigned char)
	* jpeg_alloc_huff_table(jpeg_common_struct*)
	* jpeg_alloc_quant_table(jpeg_common_struct*)
	* jpeg_calc_output_dimensions(jpeg_decompress_struct*)
	* jpeg_consume_input(jpeg_decompress_struct*)
	* jpeg_copy_critical_parameters(jpeg_decompress_struct*, jpeg_compress_struct*)
	* jpeg_default_colorspace(jpeg_compress_struct*)
	* jpeg_destroy(jpeg_common_struct*)
	* jpeg_destroy_compress(jpeg_compress_struct*)
	* jpeg_destroy_decompress(jpeg_decompress_struct*)
	* jpeg_fdct_float(float*)
	* jpeg_fill_bit_buffer(bitread_working_state*, int, int, int)
	* jpeg_finish_compress(jpeg_compress_struct*)
	* jpeg_finish_decompress(jpeg_decompress_struct*)
	* jpeg_free_large(jpeg_common_struct*, void*, unsigned int)
	* jpeg_free_small(jpeg_common_struct*, void*, unsigned int)
	* jpeg_gen_optimal_table(jpeg_compress_struct*, JHUFF_TBL*, long*)
	* jpeg_get_large(jpeg_common_struct*, unsigned int)
	* jpeg_get_small(jpeg_common_struct*, unsigned int)
	* jpeg_has_multiple_scans(jpeg_decompress_struct*)
	* jpeg_huff_decode(bitread_working_state*, int, int, d_derived_tbl*, int)
	* jpeg_idct_float(jpeg_decompress_struct*, jpeg_component_info*, short*, unsigned char**, unsigned int)
	* jpeg_input_complete(jpeg_decompress_struct*)
	* jpeg_make_c_derived_tbl(jpeg_compress_struct*, unsigned char, int, c_derived_tbl**)
	* jpeg_make_d_derived_tbl(jpeg_decompress_struct*, unsigned char, int, d_derived_tbl**)
	* jpeg_mem_available(jpeg_common_struct*, long, long, long)
	* jpeg_mem_init(jpeg_common_struct*)
	* jpeg_mem_term(jpeg_common_struct*)
	* jpeg_open_backing_store(jpeg_common_struct*, backing_store_struct*, long)
	* jpeg_quality_scaling(int)
	* jpeg_read_coefficients(jpeg_decompress_struct*)
	* jpeg_read_header(jpeg_decompress_struct*, unsigned char)
	* jpeg_read_raw_data(jpeg_decompress_struct*, unsigned char***, unsigned int)
	* jpeg_read_scanlines(jpeg_decompress_struct*, unsigned char**, unsigned int)
	* jpeg_resync_to_restart(jpeg_decompress_struct*, int)
	* jpeg_set_colorspace(jpeg_compress_struct*, J_COLOR_SPACE)
	* jpeg_set_defaults(jpeg_compress_struct*)
	* jpeg_set_linear_quality(jpeg_compress_struct*, int, unsigned char)
	* jpeg_set_marker_processor(jpeg_decompress_struct*, int, unsigned char (*)(jpeg_decompress_struct*))
	* jpeg_set_quality(jpeg_compress_struct*, int, unsigned char)
	* jpeg_start_compress(jpeg_compress_struct*, unsigned char)
	* jpeg_start_decompress(jpeg_decompress_struct*)
	* jpeg_std_error(jpeg_error_mgr*)
	* jpeg_stdio_dest(jpeg_compress_struct*, __sFILE*)
	* jpeg_stdio_src(jpeg_decompress_struct*, __sFILE*)
	* jpeg_suppress_tables(jpeg_compress_struct*, unsigned char)
	* jpeg_write_coefficients(jpeg_compress_struct*, jvirt_barray_control**)
	* jpeg_write_m_byte(jpeg_compress_struct*, int)
	* jpeg_write_m_header(jpeg_compress_struct*, int, unsigned int)
	* jpeg_write_marker(jpeg_compress_struct*, int, unsigned char const*, unsigned int)
	* jpeg_write_raw_data(jpeg_compress_struct*, unsigned char***, unsigned int)
	* jpeg_write_scanlines(jpeg_compress_struct*, unsigned char**, unsigned int)
	* jpeg_write_tables(jpeg_compress_struct*)
	* jround_up(long, long)
	* jzero_far(void*, unsigned int)
	* load_file(char const*)
	* mallocAlignPC(int, int)
	* mpg123_add_string
	* mpg123_add_substring
	* mpg123_clip
	* mpg123_close
	* mpg123_copy_string
	* mpg123_current_decoder
	* mpg123_decode
	* mpg123_decode_frame
	* mpg123_decoder
	* mpg123_decoders
	* mpg123_delete
	* mpg123_delete_pars
	* mpg123_enc_from_id3
	* mpg123_encodings
	* mpg123_encsize
	* mpg123_eq
	* mpg123_errcode
	* mpg123_exit
	* mpg123_feature
	* mpg123_feed
	* mpg123_feedseek
	* mpg123_fmt
	* mpg123_fmt_all
	* mpg123_fmt_none
	* mpg123_fmt_support
	* mpg123_format
	* mpg123_format_all
	* mpg123_format_none
	* mpg123_format_support
	* mpg123_framebyframe_decode
	* mpg123_framebyframe_next
	* mpg123_free_string
	* mpg123_geteq
	* mpg123_getformat
	* mpg123_getpar
	* mpg123_getparam
	* mpg123_getstate
	* mpg123_getvolume
	* mpg123_grow_string
	* mpg123_icy
	* mpg123_icy2utf8
	* mpg123_id3
	* mpg123_index
	* mpg123_info
	* mpg123_init
	* mpg123_init_string
	* mpg123_length
	* mpg123_meta_check
	* mpg123_new
	* mpg123_new_pars
	* mpg123_open
	* mpg123_open_fd
	* mpg123_open_feed
	* mpg123_open_handle
	* mpg123_outblock
	* mpg123_par
	* mpg123_param
	* mpg123_parnew
	* mpg123_plain_strerror
	* mpg123_position
	* mpg123_rates
	* mpg123_read
	* mpg123_replace_buffer
	* mpg123_replace_reader
	* mpg123_replace_reader_handle
	* mpg123_reset_eq
	* mpg123_resize_string
	* mpg123_safe_buffer
	* mpg123_scan
	* mpg123_seek
	* mpg123_seek_frame
	* mpg123_set_filesize
	* mpg123_set_index
	* mpg123_set_string
	* mpg123_set_substring
	* mpg123_store_utf8
	* mpg123_strerror
	* mpg123_strlen
	* mpg123_supported_decoders
	* mpg123_tell
	* mpg123_tell_stream
	* mpg123_tellframe
	* mpg123_timeframe
	* mpg123_tpf
	* mpg123_volume
	* mpg123_volume_change
	* nvGetSystemCapabilities(_NvSysCaps*, bool)
	* nv_flush_tracked_attribs()
	* nv_load_program(char const*, char const*)
	* nv_set_attrib_by_index(int, int, unsigned int, unsigned char, int, void*)
	* nv_set_attrib_by_name(unsigned int, char const*, int, unsigned int, unsigned char, int, void*)
	* nv_shader_init()
	* operator!=(RQMatrix const&, RQMatrix const&)
	* operator*(CMatrix const&, CMatrix const&)
	* operator*(CMatrix const&, CVector const&)
	* operator+(CMatrix const&, CMatrix const&)
	* operator==(RQMatrix const&, RQMatrix const&)
	* png_access_version_number
	* png_build_gamma_table
	* png_build_grayscale_palette
	* png_calculate_crc
	* png_check_chunk_name
	* png_check_keyword
	* png_check_sig
	* png_chunk_error
	* png_chunk_warning
	* png_combine_row
	* png_convert_from_struct_tm
	* png_convert_from_time_t
	* png_convert_to_rfc1123
	* png_crc_error
	* png_crc_finish
	* png_crc_read
	* png_create_info_struct
	* png_create_read_struct
	* png_create_read_struct_2
	* png_create_struct
	* png_create_struct_2
	* png_create_write_struct
	* png_create_write_struct_2
	* png_data_freer
	* png_decompress_chunk
	* png_destroy_info_struct
	* png_destroy_read_struct
	* png_destroy_struct
	* png_destroy_struct_2
	* png_destroy_write_struct
	* png_do_background
	* png_do_bgr
	* png_do_chop
	* png_do_dither
	* png_do_expand
	* png_do_expand_palette
	* png_do_gamma
	* png_do_gray_to_rgb
	* png_do_invert
	* png_do_pack
	* png_do_packswap
	* png_do_read_filler
	* png_do_read_interlace
	* png_do_read_invert_alpha
	* png_do_read_swap_alpha
	* png_do_read_transformations
	* png_do_rgb_to_gray
	* png_do_shift
	* png_do_strip_filler
	* png_do_swap
	* png_do_unpack
	* png_do_unshift
	* png_do_write_interlace
	* png_do_write_invert_alpha
	* png_do_write_swap_alpha
	* png_do_write_transformations
	* png_error
	* png_flush
	* png_free
	* png_free_data
	* png_free_default
	* png_get_IHDR
	* png_get_PLTE
	* png_get_bKGD
	* png_get_bit_depth
	* png_get_cHRM
	* png_get_cHRM_fixed
	* png_get_channels
	* png_get_color_type
	* png_get_compression_buffer_size
	* png_get_compression_type
	* png_get_copyright
	* png_get_error_ptr
	* png_get_filter_type
	* png_get_gAMA
	* png_get_gAMA_fixed
	* png_get_hIST
	* png_get_header_ver
	* png_get_header_version
	* png_get_iCCP
	* png_get_image_height
	* png_get_image_width
	* png_get_int_32
	* png_get_interlace_type
	* png_get_io_ptr
	* png_get_libpng_ver
	* png_get_mem_ptr
	* png_get_oFFs
	* png_get_pCAL
	* png_get_pHYs
	* png_get_pixel_aspect_ratio
	* png_get_pixels_per_meter
	* png_get_progressive_ptr
	* png_get_rgb_to_gray_status
	* png_get_rowbytes
	* png_get_rows
	* png_get_sBIT
	* png_get_sCAL
	* png_get_sPLT
	* png_get_sRGB
	* png_get_signature
	* png_get_tIME
	* png_get_tRNS
	* png_get_text
	* png_get_uint_16
	* png_get_uint_32
	* png_get_unknown_chunks
	* png_get_user_chunk_ptr
	* png_get_user_transform_ptr
	* png_get_valid
	* png_get_x_offset_microns
	* png_get_x_offset_pixels
	* png_get_x_pixels_per_meter
	* png_get_y_offset_microns
	* png_get_y_offset_pixels
	* png_get_y_pixels_per_meter
	* png_handle_IEND
	* png_handle_IHDR
	* png_handle_PLTE
	* png_handle_as_unknown
	* png_handle_bKGD
	* png_handle_cHRM
	* png_handle_gAMA
	* png_handle_hIST
	* png_handle_iCCP
	* png_handle_oFFs
	* png_handle_pCAL
	* png_handle_pHYs
	* png_handle_sBIT
	* png_handle_sCAL
	* png_handle_sPLT
	* png_handle_sRGB
	* png_handle_tEXt
	* png_handle_tIME
	* png_handle_tRNS
	* png_handle_unknown
	* png_handle_zTXt
	* png_info_destroy
	* png_info_init
	* png_info_init_3
	* png_init_io
	* png_init_read_transformations
	* png_malloc
	* png_malloc_default
	* png_memcpy_check
	* png_memset_check
	* png_permit_empty_plte
	* png_process_IDAT_data
	* png_process_data
	* png_process_some_data
	* png_progressive_combine_row
	* png_push_crc_finish
	* png_push_crc_skip
	* png_push_fill_buffer
	* png_push_handle_tEXt
	* png_push_handle_unknown
	* png_push_handle_zTXt
	* png_push_have_end
	* png_push_have_info
	* png_push_have_row
	* png_push_process_row
	* png_push_read_IDAT
	* png_push_read_chunk
	* png_push_read_sig
	* png_push_read_tEXt
	* png_push_read_zTXt
	* png_push_restore_buffer
	* png_push_save_buffer
	* png_read_data
	* png_read_destroy
	* png_read_end
	* png_read_filter_row
	* png_read_finish_row
	* png_read_image
	* png_read_info
	* png_read_init
	* png_read_init_2
	* png_read_init_3
	* png_read_png
	* png_read_push_finish_row
	* png_read_row
	* png_read_rows
	* png_read_start_row
	* png_read_transform_info
	* png_read_update_info
	* png_reset_crc
	* png_reset_zstream
	* png_save_int_32
	* png_save_uint_16
	* png_save_uint_32
	* png_set_IHDR
	* png_set_PLTE
	* png_set_bKGD
	* png_set_background
	* png_set_bgr
	* png_set_cHRM
	* png_set_cHRM_fixed
	* png_set_compression_buffer_size
	* png_set_compression_level
	* png_set_compression_mem_level
	* png_set_compression_method
	* png_set_compression_strategy
	* png_set_compression_window_bits
	* png_set_crc_action
	* png_set_dither
	* png_set_error_fn
	* png_set_expand
	* png_set_filler
	* png_set_filter
	* png_set_filter_heuristics
	* png_set_flush
	* png_set_gAMA
	* png_set_gAMA_fixed
	* png_set_gamma
	* png_set_gray_1_2_4_to_8
	* png_set_gray_to_rgb
	* png_set_hIST
	* png_set_iCCP
	* png_set_interlace_handling
	* png_set_invalid
	* png_set_invert_alpha
	* png_set_invert_mono
	* png_set_keep_unknown_chunks
	* png_set_mem_fn
	* png_set_oFFs
	* png_set_pCAL
	* png_set_pHYs
	* png_set_packing
	* png_set_packswap
	* png_set_palette_to_rgb
	* png_set_progressive_read_fn
	* png_set_read_fn
	* png_set_read_status_fn
	* png_set_read_user_chunk_fn
	* png_set_read_user_transform_fn
	* png_set_rgb_to_gray
	* png_set_rgb_to_gray_fixed
	* png_set_rows
	* png_set_sBIT
	* png_set_sCAL
	* png_set_sPLT
	* png_set_sRGB
	* png_set_sRGB_gAMA_and_cHRM
	* png_set_shift
	* png_set_sig_bytes
	* png_set_strip_16
	* png_set_strip_alpha
	* png_set_swap
	* png_set_swap_alpha
	* png_set_tIME
	* png_set_tRNS
	* png_set_tRNS_to_alpha
	* png_set_text
	* png_set_unknown_chunk_location
	* png_set_unknown_chunks
	* png_set_user_transform_info
	* png_set_write_fn
	* png_set_write_status_fn
	* png_set_write_user_transform_fn
	* png_sig_cmp
	* png_start_read_image
	* png_warning
	* png_write_IDAT
	* png_write_IEND
	* png_write_IHDR
	* png_write_PLTE
	* png_write_bKGD
	* png_write_cHRM
	* png_write_cHRM_fixed
	* png_write_chunk
	* png_write_chunk_data
	* png_write_chunk_end
	* png_write_chunk_start
	* png_write_data
	* png_write_destroy
	* png_write_end
	* png_write_filtered_row
	* png_write_find_filter
	* png_write_finish_row
	* png_write_flush
	* png_write_gAMA
	* png_write_gAMA_fixed
	* png_write_hIST
	* png_write_iCCP
	* png_write_image
	* png_write_info
	* png_write_info_before_PLTE
	* png_write_init
	* png_write_init_2
	* png_write_init_3
	* png_write_oFFs
	* png_write_pCAL
	* png_write_pHYs
	* png_write_png
	* png_write_row
	* png_write_rows
	* png_write_sBIT
	* png_write_sCAL
	* png_write_sPLT
	* png_write_sRGB
	* png_write_sig
	* png_write_start_row
	* png_write_tEXt
	* png_write_tIME
	* png_write_tRNS
	* png_write_zTXt
	* png_zalloc
	* png_zfree
	* postprocess_buffer
	* psAlwaysOnTop(int)
	* psCameraBeginUpdate(RwCamera*)
	* psCameraShowRaster(RwCamera*)
	* psDebugMessageHandler(RwDebugType, char const*)
	* psErrorMessage(char const*)
	* psGetMemoryFunctions()
	* psGrabScreen(RwCamera*)
	* psInitialize()
	* psInstallFileSystem()
	* psMouseSetVisibility(int)
	* psNativeTextureSupport()
	* psPathGetSeparator()
	* psPathnameCreate(char const*)
	* psPathnameDestroy(char*)
	* psSelectDevice()
	* psTerminate()
	* psTimer()
	* psWarningMessage(char const*)
	* readDataFile(char const*, char*, unsigned int)
	* rwIsAlphaBlendOn()
	* rwIsDepthWriteOn()
	* samples_to_storage
	* sortLODs(void const*, void const*)
	* strcmpIgnoringDigits(char const*, char const*)
	* strdup
	* strreplace(char*, char const*, char const*)
	* test()
	* uncompress
	* void AssignBlockToPixels<unsigned int>(unsigned char const*, unsigned int*, unsigned int, unsigned int*)
	* void AssignBlockToPixels<unsigned short>(unsigned char const*, unsigned short*, unsigned int, unsigned short*)
	* void OrBlockToPixels<unsigned int>(unsigned char const*, unsigned int*, unsigned int, unsigned int*)
	* void OrBlockToPixels<unsigned short>(unsigned char const*, unsigned short*, unsigned int, unsigned short*)
	* wrapped_glCompressedTexImage2D(RQTexture*&, int, unsigned int, int, int, int, void const*, bool)
	* wrapped_glCompressedTexImage2D(unsigned int, int, unsigned int, int, int, int, void const*)
	* zError
	* zcalloc
	* zcfree
	* zlibVersion

RQMatrix (1 variables, 1 functions)
Variables list:
	* Identity

Functions list:
	* operator*=(RQMatrix const&)

EmulatedMatrixStack (0 variables, 1 functions)
Variables list:

Functions list:
	* EmulatedMatrixStack()

ArrayState (0 variables, 6 functions)
Variables list:

Functions list:
	* ArrayState(ArrayState const&, unsigned char, unsigned char)
	* Draw(unsigned int)
	* DrawWithIndex(ArrayState*, unsigned int, unsigned int, unsigned int)
	* SetupDrawState()
	* SetupVertexState(ArrayState*, bool)
	* ~ArrayState()

ANDThreadData (0 variables, 1 functions)
Variables list:

Functions list:
	* Destroy(void*)

OSArray<ZIPFile*> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~OSArray()

APKFile (0 variables, 1 functions)
Variables list:

Functions list:
	* Find(char const*)

ButtonContainer<98> (0 variables, 2 functions)
Variables list:

Functions list:
	* Update(bool)
	* ~ButtonContainer()

_JNIEnv (0 variables, 8 functions)
Variables list:

Functions list:
	* CallBooleanMethod(_jobject*, _jmethodID*, ...)
	* CallFloatMethod(_jobject*, _jmethodID*, ...)
	* CallIntMethod(_jobject*, _jmethodID*, ...)
	* CallLongMethod(_jobject*, _jmethodID*, ...)
	* CallObjectMethod(_jobject*, _jmethodID*, ...)
	* CallStaticObjectMethod(_jclass*, _jmethodID*, ...)
	* CallVoidMethod(_jobject*, _jmethodID*, ...)
	* NewObject(_jclass*, _jmethodID*, ...)

ButtonContainer<2> (0 variables, 1 functions)
Variables list:

Functions list:
	* Update(bool)

ButtonContainer<16> (0 variables, 1 functions)
Variables list:

Functions list:
	* Update(bool)

CAEBankLoader (0 variables, 7 functions)
Variables list:

Functions list:
	* CAEBankLoader()
	* GetBankLookup(unsigned short)
	* Initialise()
	* LoadBankLookupFile()
	* LoadBankSlotFile()
	* LoadSFXPakLookupFile()
	* ~CAEBankLoader()

CAEMP3BankLoader (0 variables, 15 functions)
Variables list:

Functions list:
	* CAEMP3BankLoader()
	* GetLoopOffset(unsigned short, short)
	* GetSoundBankLoadingStatus(unsigned short, short)
	* GetSoundBuffer(unsigned short, short, unsigned short*)
	* GetSoundHeadroom(unsigned short, short)
	* GetSoundLoadingStatus(unsigned short, unsigned short, short)
	* Initialise()
	* IsSoundBankLoaded(unsigned short, short)
	* IsSoundLoaded(unsigned short, unsigned short, short)
	* LoadRequest(ZIPFile*, int, int, int)
	* LoadSound(unsigned short, unsigned short, short)
	* LoadSoundBank(unsigned short, short)
	* Service()
	* UpdateVirtualChannels(tVirtualChannelSettings*, short*, short*)
	* ~CAEMP3BankLoader()

OSArray<LoadTask*> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~OSArray()

OSArray<BankData> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~OSArray()

LoadTask (0 variables, 1 functions)
Variables list:

Functions list:
	* TryLoadSound(int, SoundData&)

CAEMP3Decoder (0 variables, 11 functions)
Variables list:

Functions list:
	* CAEMP3Decoder(CAEDataStream*, bool)
	* DecodeEntireFile(unsigned char*, unsigned int, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
	* Feed(unsigned int)
	* FillBuffer(void*, unsigned long, int*)
	* GetSampleRate()
	* GetStreamID()
	* GetStreamLengthMs()
	* GetStreamPlayTimeMs()
	* Initialise()
	* SetCursor(unsigned long)
	* ~CAEMP3Decoder()

CAEStreamingDecoder (0 variables, 3 functions)
Variables list:

Functions list:
	* CAEStreamingDecoder(CAEDataStream*)
	* GetHeader()
	* ~CAEStreamingDecoder()

CAEMP3TrackLoader (0 variables, 6 functions)
Variables list:

Functions list:
	* CAEMP3TrackLoader()
	* GetDataStream(unsigned int)
	* Initialise()
	* LoadStreamPackTable()
	* LoadTrackLookupTable()
	* ~CAEMP3TrackLoader()

OALBuffer (0 variables, 3 functions)
Variables list:

Functions list:
	* OALBuffer(void*, unsigned int, unsigned int, unsigned int)
	* OALBuffer(void*, unsigned int, void*, unsigned int, unsigned int, unsigned int)
	* ~OALBuffer()

OALSource (1 variables, 14 functions)
Variables list:
	* activeSources

Functions list:
	* GetVolume()
	* OALSource()
	* ObtainSource()
	* Pause()
	* Play()
	* QueueBuffer(OALBuffer*)
	* SetBuffer(OALBuffer*)
	* SetData(void*, unsigned int, unsigned int, unsigned int)
	* SetStream()
	* SetVolume(float)
	* SetZero(unsigned int, unsigned int)
	* UnqueueBuffers()
	* Update()
	* ~OALSource()

OALBase (2 variables, 1 functions)
Variables list:
	* livingCount
	* trashCan

Functions list:
	* ~OALBase()

OSArray<OALBase*> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~OSArray()

OSArray<OALSource*> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~OSArray()

CAnimatedBuilding (0 variables, 4 functions)
Variables list:

Functions list:
	* PreRender()
	* ProcessCollision()
	* ProcessControl()
	* ~CAnimatedBuilding()

CBuilding (0 variables, 5 functions)
Variables list:

Functions list:
	* CBuilding()
	* ReplaceWithNewModel(int)
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CBuilding()

CEntity (0 variables, 60 functions)
Variables list:

Functions list:
	* Add()
	* Add(CRect const&)
	* AttachToRwObject(RwObject*, bool)
	* BuildWindSockMatrix()
	* CEntity()
	* CalculateBBProjection(CVector*, CVector*, CVector*, CVector*)
	* CleanUpOldReference(CEntity**)
	* CreateEffects()
	* CreateRwObject()
	* DeleteRwObject()
	* DestroyEffects()
	* DetachFromRwObject()
	* DoesNotCollideWithFlyers()
	* FindTriggerPointCoors(int)
	* FlagToDestroyWhenNextProcessed()
	* GetBoundCentre() const
	* GetBoundCentre(CVector&) const
	* GetBoundRect() const
	* GetColModel()
	* GetDistanceFromCentreOfMassToBaseOfModel()
	* GetIsBoundingBoxOnScreen()
	* GetIsOnScreen()
	* GetIsTouching(CEntity*) const
	* GetIsTouching(CVector const&, float) const
	* GetRandom2dEffect(int, unsigned char)
	* HasPreRenderEffects()
	* IsEntityOccluded()                                    #
	* IsVisible()
	* LivesInThisNonOverlapSector(int, int)
	* ModifyMatrixForBannerInWind()
	* ModifyMatrixForCrane()
	* ModifyMatrixForTreeInWind()
	* PreRender()
	* PreRenderForGlassWindow()
	* ProcessCollision()
	* ProcessControl()
	* ProcessLightsForEntity()
	* ProcessShift()
	* PruneReferences()
	* RegisterReference(CEntity**)
	* Remove()
	* RemoveEscalatorsForEntity()
	* RemoveLighting(bool)
	* Render()
	* RenderEffects()
	* ResolveReferences()
	* SetIsStatic(bool)
	* SetModelIndex(unsigned int)
	* SetModelIndexNoCreate(unsigned int)
	* SetRwObjectAlpha(int)
	* SetupBigBuilding()
	* SetupLighting()
	* SpecialEntityCalcCollisionSteps(bool&, bool&)
	* SpecialEntityPreCollisionStuff(CPhysical*, bool, bool&, bool&, bool&, bool&)
	* Teleport(CVector, unsigned char)
	* TestCollision(bool)
	* UpdateAnim()
	* UpdateRpHAnim()
	* UpdateRwFrame()
	* ~CEntity()

CIplStore (3 variables, 32 functions)
Variables list:
	* m_onlyBB
	* ms_pPool
	* ms_pQuadTree

Functions list:
	* AddIplSlot(char const*)
	* AddIplsNeededAtPosn(CVector const&)
	* ClearIplsNeededAtPosn()
	* EnableDynamicStreaming(int, bool)
	* EnsureIplsAreInMemory(CVector const&)
	* FindIplSlot(char const*)
	* FindRelatedIplSlot(char const*)
	* GetBoundingBox(int)
	* GetIplEntityIndexArray(int)
	* GetIplName(int)
	* GetNewIplEntityIndexArray(int)
	* HaveIplsLoaded(CVector const&, int)
	* IncludeEntity(int, CEntity*)
	* Initialise()
	* Load()
	* LoadAllRemainingIpls()
	* LoadIpl(int, unsigned char*, int)
	* LoadIplBoundingBox(int, unsigned char*, int)
	* LoadIpls(CVector, bool)
	* RemoveAllIpls()
	* RemoveIpl(int)
	* RemoveIplAndIgnore(int)
	* RemoveIplSlot(int)
	* RemoveIplWhenFarAway(int)
	* RemoveRelatedIpls(int)
	* RequestIplAndIgnore(int)
	* RequestIpls(CVector const&, int)
	* Save()
	* SetIplsRequired(CVector const&, int)
	* SetIsInterior(int, bool)
	* SetupRelatedIpls(char const*, int, CEntity**)
	* Shutdown()

CAdjustableHUD (1 variables, 15 functions)
Variables list:
	* m_pInstance

Functions list:
	* CAdjustableHUD()
	* ConstrainToDraggableRegion(CVector2D&, float)
	* Draw()
	* EnableButtons()
	* GetTopAreaHeight()
	* IsInsideCircle(CVector2D, CRect)
	* IsInsideRect(CVector2D, CRect)
	* IsValidPosition(CVector2D const&, float, CVector2D*)
	* RestoreButtonPositions()
	* RestoreDefaults()
	* SaveToDisk()
	* SetTextures()
	* Toggle()
	* Update()
	* ~CAdjustableHUD()

CRGBA (0 variables, 2 functions)
Variables list:

Functions list:
	* CRGBA(unsigned char, unsigned char, unsigned char, unsigned char)
	* ~CRGBA()

CHID (2 variables, 25 functions)
Variables list:
	* m_GamepadType
	* m_pInstance

Functions list:
	* CheckForInputChange()
	* DrawHelpIcon(char const*, HIDMapping, float, float, float, int, bool)
	* FlushQueuedText()
	* GetHelpSprite(char const*, HIDMapping, CVector2D*, CVector2D*)
	* GetInputType()
	* Implements(HIDMapping)
	* InternalCacheAnalogValues()
	* InternalDrawHelpIcon(char const*, HIDMapping, float, float, float, int, bool)
	* InternalFlushQueuedText()
	* InternalGetHelpSprite(char const*, HIDMapping, CVector2D*, CVector2D*)
	* InternalIsPressedNegative(HIDMapping)
	* InternalIsPressedPositive(HIDMapping)
	* InternalIsReleasedNegative(HIDMapping)
	* InternalIsReleasedPositive(HIDMapping)
	* InternalRemoveQueuedText()
	* IsDoubleTapped(HIDMapping)
	* IsPressed(HIDMapping, float*)
	* IsPressedNegative(HIDMapping)
	* IsPressedPositive(HIDMapping)
	* IsReleased(HIDMapping)
	* IsReleasedNegative(HIDMapping)
	* IsReleasedPositive(HIDMapping)
	* RemoveQueuedText()
	* Replaces(HIDMapping)
	* ~CHID()

CHIDJoystick (0 variables, 16 functions)
Variables list:

Functions list:
	* AddMapping(int, HIDMapping, bool)
	* CHIDJoystick(char const*)
	* InternalCacheAnalogValues()
	* InternalDrawHelpIcon(char const*, HIDMapping, float, float, float, int, bool)
	* InternalGetHelpSprite(char const*, HIDMapping, CVector2D*, CVector2D*)
	* InternalGetInputType()
	* InternalImplements(HIDMapping)
	* InternalIsDoubleTapped(HIDMapping)
	* InternalIsPressed(HIDMapping, float*)
	* InternalIsPressedNegative(HIDMapping)
	* InternalIsPressedPositive(HIDMapping)
	* InternalIsReleased(HIDMapping)
	* InternalIsReleasedNegative(HIDMapping)
	* InternalIsReleasedPositive(HIDMapping)
	* InternalReplaces(HIDMapping)
	* ~CHIDJoystick()

CHIDJoystickIOSExtended (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickIOSExtended(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickIOSExtended()

CHIDJoystickIOSSimple (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickIOSSimple(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickIOSSimple()

CHIDJoystickMogaPocket (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickMogaPocket(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickMogaPocket()

CHIDJoystickMogaPro (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickMogaPro(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickMogaPro()

CHIDJoystickPS3 (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickPS3(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickPS3()

CHIDJoystickXbox360 (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDJoystickXbox360(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDJoystickXbox360()

CHIDKeyboard (0 variables, 15 functions)
Variables list:

Functions list:
	* AddMapping(OSKeyboardKey, HIDMapping, bool)
	* CHIDKeyboard(char const*)
	* InternalCacheAnalogValues()
	* InternalDrawHelpIcon(char const*, HIDMapping, float, float, float, int, bool)
	* InternalFlushQueuedText()
	* InternalGetHelpSprite(char const*, HIDMapping, CVector2D*, CVector2D*)
	* InternalGetInputType()
	* InternalImplements(HIDMapping)
	* InternalIsDoubleTapped(HIDMapping)
	* InternalIsPressed(HIDMapping, float*)
	* InternalIsReleased(HIDMapping)
	* InternalRemoveQueuedText()
	* InternalReplaces(HIDMapping)
	* QueueTextRender(HIDMapping, float, float, float, int, bool)
	* ~CHIDKeyboard()

CHIDKeyboardPC (0 variables, 3 functions)
Variables list:

Functions list:
	* CHIDKeyboardPC(char const*)
	* FindUVsFromMapping(char const*, HIDMapping, bool)
	* ~CHIDKeyboardPC()

CHoldEffect (2 variables, 6 functions)
Variables list:
	* m_pChainHead
	* m_pChainTail

Functions list:
	* CHoldEffect(char const*, bool, CRGBA, bool)
	* Draw()
	* DrawAll()
	* SetVertices(int, float*, float*, CRGBA const&)
	* UpdateAll()
	* ~CHoldEffect()

MenuScreen (0 variables, 22 functions)
Variables list:

Functions list:
	* DoesTextWrap(unsigned short*, int, CVector2D)
	* DrawBack(float)
	* DrawQuad(CVector2D*, RwRGBA*)
	* DrawQuad(CVector2D, CVector2D, RwRGBA)
	* DrawQuad(CVector2D, CVector2D, RwRGBA*)
	* DrawSlider(CVector2D, CVector2D, float, bool, unsigned char, bool)
	* DrawSprite(RwTexture*, CVector2D*, CVector2D*, RwRGBA*, bool)
	* DrawSprite(RwTexture*, RwRGBA, CVector2D, CVector2D, CVector2D, CVector2D)
	* DrawSprite(RwTexture*, RwRGBA, CVector2D, CVector2D, bool)
	* DrawText(char const*, TextAlign, int, RwRGBA, bool, CVector2D, CVector2D, bool)
	* DrawTextDirect(unsigned short*, TextAlign, int, RwRGBA, bool, CVector2D, CVector2D, bool, int*)
	* GainedFocus()
	* IsFlow()
	* IsFlowScreen()
	* MenuScreen(bool)
	* OnBack()
	* PopScreen(bool)
	* PushScreen(MenuScreen*, bool)
	* Render(int)
	* SetPreviousScreen(MenuScreen*)
	* Update(float)
	* ~MenuScreen()

MobileMenu (0 variables, 27 functions)
Variables list:

Functions list:
	* AddScreen(MenuScreen*, bool)
	* CalcBGUVSize()
	* ClampBGCoords(CVector2D&)
	* DrawQuad(CVector2D*, RwRGBA*)
	* DrawQuad(CVector2D, CVector2D, RwRGBA*)
	* DrawSprite(RwTexture*, CVector2D*, CVector2D*, RwRGBA*)
	* DrawSprite(RwTexture*, RwRGBA, CVector2D, CVector2D)
	* DrawSprite(RwTexture*, RwRGBA, CVector2D, CVector2D, CVector2D, CVector2D)
	* Exit()
	* GetRandomBGCoords()
	* InitForDownload()
	* InitForNag()
	* InitForPause()
	* InitForRetry()
	* InitForSave()
	* InitForTitle()
	* InitGameVars()
	* Load()
	* MobileMenu()
	* PrepareToRender()
	* ProcessPending()
	* RemoveTopScreen(bool, bool)
	* Render()
	* Unload()
	* Update()
	* UpdateDownload(int, bool)
	* ~MobileMenu()

SelectScreen::MenuSelection (0 variables, 8 functions)
Variables list:

Functions list:
	* Deselected()
	* GetColor()
	* GetTextPercent()
	* GetTitle()
	* HandleInput(SelectScreen*, float)
	* Render(SelectScreen*, CVector2D, CVector2D, float)
	* SetDefault()
	* ~MenuSelection()

SelectScreen::ActionSelection (0 variables, 3 functions)
Variables list:

Functions list:
	* GetTextPercent()
	* HandleInput(SelectScreen*, float)
	* ~ActionSelection()

SelectScreen::SettingSelection (0 variables, 5 functions)
Variables list:

Functions list:
	* Deselected()
	* HandleInput(SelectScreen*, float)
	* Render(SelectScreen*, CVector2D, CVector2D, float)
	* SetDefault()
	* ~SettingSelection()

SelectScreen (0 variables, 11 functions)
Variables list:

Functions list:
	* AddItem(SelectScreen::MenuSelection*)
	* GetEndY()
	* GetMenuLeft()
	* GetMenuRight()
	* GetStartY()
	* GetYSize(int)
	* OnRestoreDefaults(SelectScreen*, int)
	* OnSocialClub(SelectScreen*, int)
	* Render(int)
	* Update(float)
	* ~SelectScreen()

CharSelectScreen (0 variables, 5 functions)
Variables list:

Functions list:
	* CharSelectScreen(char const*, bool)
	* GetMenuLeft()
	* Render(int)
	* Update(float)
	* ~CharSelectScreen()

ConfirmationScreen (0 variables, 3 functions)
Variables list:

Functions list:
	* GetStartY()
	* Render(int)
	* ~ConfirmationScreen()

SaveSelectScreen::SaveSelection (1 variables, 4 functions)
Variables list:
	* GetTitle()::chars

Functions list:
	* GetColor()
	* GetSaveName()
	* GetTitle()
	* ~SaveSelection()

SaveScreen::SaveScreenSelection (0 variables, 6 functions)
Variables list:

Functions list:
	* ConfirmSave(void*)
	* HandleInput(SelectScreen*, float)
	* Save()
	* SaveDone(void*)
	* SaveFailed(void*)
	* ~SaveScreenSelection()

LoadScreen::LoadScreenSelection (0 variables, 5 functions)
Variables list:

Functions list:
	* ConfirmLoad(void*)
	* HandleInput(SelectScreen*, float)
	* Load()
	* LoadFailed(void*)
	* ~LoadScreenSelection()

DownloadScreen (0 variables, 4 functions)
Variables list:

Functions list:
	* CancelDownload(void*)
	* Render(int)
	* RetryDownload(void*)
	* ~DownloadScreen()

StatsScreen (0 variables, 6 functions)
Variables list:

Functions list:
	* GetMenuRight()
	* Render(int)
	* StatsCat(SelectScreen*, int)
	* StatsScreen()
	* Update(float)
	* ~StatsScreen()

FlowScreen (0 variables, 13 functions)
Variables list:

Functions list:
	* AddItem(char const*, char const*, void (*)())
	* DrawFeatheredQuad(CVector2D*, RwRGBA*)
	* FlowScreen(bool)
	* GainedFocus()
	* IsFlow()
	* IsFlowScreen()
	* OnBack()
	* OnBriefs()
	* OnStats()
	* Render(int)
	* SetPreviousScreen(MenuScreen*)
	* Update(float)
	* ~FlowScreen()

MainMenuScreen (0 variables, 8 functions)
Variables list:

Functions list:
	* MainMenuScreen(bool)
	* OnBack()
	* OnExit()
	* OnResume()
	* OnSettings()
	* OnStartGame()
	* Update(float)
	* ~MainMenuScreen()

DeleteScreen::DeleteScreenSelection (0 variables, 3 functions)
Variables list:

Functions list:
	* ConfirmDelete(void*)
	* HandleInput(SelectScreen*, float)
	* ~DeleteScreenSelection()

AudioScreen (0 variables, 6 functions)
Variables list:

Functions list:
	* AudioScreen()
	* OnBack()
	* OnRestoreDefaults(SelectScreen*, int)
	* Render(int)
	* Update(float)
	* ~AudioScreen()

ControlsScreen (0 variables, 3 functions)
Variables list:

Functions list:
	* ControlsScreen()
	* DoAdjustableHUD(SelectScreen*, int)
	* ~ControlsScreen()

LanguageScreen (0 variables, 9 functions)
Variables list:

Functions list:
	* English(SelectScreen*, int)
	* French(SelectScreen*, int)
	* German(SelectScreen*, int)
	* Italian(SelectScreen*, int)
	* Japenese(SelectScreen*, int)
	* LanguageScreen()
	* Russian(SelectScreen*, int)
	* Spanish(SelectScreen*, int)
	* ~LanguageScreen()

AudioScreen::RadioSelection (0 variables, 4 functions)
Variables list:

Functions list:
	* HandleInput(SelectScreen*, float)
	* RadioSelection()
	* Render(SelectScreen*, CVector2D, CVector2D, float)
	* ~RadioSelection()

DisplayScreen (0 variables, 2 functions)
Variables list:

Functions list:
	* DisplayScreen()
	* ~DisplayScreen()

GameScreen (0 variables, 2 functions)
Variables list:

Functions list:
	* GameScreen()
	* ~GameScreen()

SaveScreen (0 variables, 2 functions)
Variables list:

Functions list:
	* SaveScreen()
	* ~SaveScreen()

CloudWaitScreen (0 variables, 3 functions)
Variables list:

Functions list:
	* Render(int)
	* SaveDone(void*)
	* ~CloudWaitScreen()

BriefScreen (0 variables, 5 functions)
Variables list:

Functions list:
	* BriefScreen()
	* ComputeTotalHeight()
	* Render(int)
	* Update(float)
	* ~BriefScreen()

OkScreen (0 variables, 3 functions)
Variables list:

Functions list:
	* OkFunc(SelectScreen*, int)
	* OkScreen(char const*, char const*, void (*)(void*), void*)
	* ~OkScreen()

YesNoScreen (0 variables, 4 functions)
Variables list:

Functions list:
	* NoFunc(SelectScreen*, int)
	* YesFunc(SelectScreen*, int)
	* YesNoScreen(char const*, char const*, void (*)(void*), void*, void (*)(void*), bool)
	* ~YesNoScreen()

SaveSelectScreen (0 variables, 1 functions)
Variables list:

Functions list:
	* ~SaveSelectScreen()

DeleteScreen (0 variables, 2 functions)
Variables list:

Functions list:
	* DeleteScreen()
	* ~DeleteScreen()

LoadScreen (0 variables, 2 functions)
Variables list:

Functions list:
	* LoadScreen(bool)
	* ~LoadScreen()

SettingsScreen (0 variables, 7 functions)
Variables list:

Functions list:
	* OnAdjustControls()
	* OnDisplayOptions()
	* OnGameOptions()
	* OnLanguageOptions()
	* OnSoundOptions()
	* SettingsScreen()
	* ~SettingsScreen()

StartGameScreen (0 variables, 5 functions)
Variables list:

Functions list:
	* OnDeleteGame()
	* OnLoadGame()
	* OnNewGame()
	* StartGameScreen()
	* ~StartGameScreen()

OSArray<SelectScreen::MenuSelection*> (0 variables, 1 functions)
Variables list:

Functions list:
	* Realloc(unsigned int)

OSArray<float> (0 variables, 1 functions)
Variables list:

Functions list:
	* Realloc(unsigned int)

OSArray<FlowScreen::MenuItem> (0 variables, 2 functions)
Variables list:

Functions list:
	* Add(FlowScreen::MenuItem const&)
	* Realloc(unsigned int)

OSArray<MenuScreen*> (0 variables, 2 functions)
Variables list:

Functions list:
	* Add(MenuScreen* const&)
	* Realloc(unsigned int)

Telemetry (0 variables, 1 functions)
Variables list:

Functions list:
	* SendTelemetry()

CCarFXRenderer (1 variables, 14 functions)
Variables list:
	* ms_aDirtTextures

Functions list:
	* AtomicRemapDirtCB(RpAtomic*, void*)
	* CustomCarPipeAtomicSetup(RpAtomic*)
	* CustomCarPipeClumpSetup(RpClump*)
	* GetFxEnvMapLightMult()
	* Initialise()
	* InitialiseDirtTexture()
	* IsCCPCPipelineAttached(RpAtomic*)
	* MaterialRemapDirtCB(RpMaterial*, void*)
	* PreRenderUpdate()
	* RegisterPlugins()
	* RemapDirt(CVehicleModelInfo*, unsigned int)
	* SetCustomFXAtomicRenderPipelinesVMICB(RpAtomic*, void*)
	* SetFxEnvMapLightMult(float)
	* Shutdown()

CCustomBuildingRenderer (0 variables, 9 functions)
Variables list:

Functions list:
	* AtomicSetup(RpAtomic*)
	* CCustomBuildingRenderer()
	* Initialise()
	* IsCBPCPipelineAttached(RpAtomic*)
	* PluginAttach()
	* Shutdown()
	* Update()
	* UpdateDayNightBalanceParam()
	* ~CCustomBuildingRenderer()

CCustomBuildingDNPipeline (6 variables, 27 functions)
Variables list:
	* ObjPipeline
	* m_AtmDNWorkingIndex
	* m_bCameraChange
	* m_bDeviceSupportsVS11
	* m_fDNBalanceParam
	* ms_extraVertColourPluginOffset

Functions list:
	* CCustomBuildingDNPipeline()
	* CreateCustomObjPipe()
	* CreatePipe()
	* CustomPipeAtomicSetup(RpAtomic*)
	* CustomPipeInstanceCB(void*, RxOpenGLMeshInstanceData*, int, int)
	* CustomPipeMaterialSetup(RpMaterial*, void*)
	* CustomPipeRenderCB(RwResEntry*, void*, unsigned char, unsigned int)
	* DestroyPipe()
	* ExtraVertColourPluginAttach()
	* GetExtraVertColourPtr(RpGeometry*)
	* GetFxEnvScaleX(RpMaterial*)
	* GetFxEnvScaleY(RpMaterial*)
	* GetFxEnvShininess(RpMaterial*)
	* GetFxEnvTexture(RpMaterial*)
	* GetFxEnvTransSclX(RpMaterial*)
	* GetFxEnvTransSclY(RpMaterial*)
	* SetFxEnvScale(RpMaterial*, float, float)
	* SetFxEnvShininess(RpMaterial*, float)
	* SetFxEnvTexture(RpMaterial*, RwTexture*)
	* SetFxEnvTransScl(RpMaterial*, float, float)
	* UsesThisPipeline(RpAtomic*)
	* pluginExtraVertColourConstructorCB(void*, int, int)
	* pluginExtraVertColourDestructorCB(void*, int, int)
	* pluginExtraVertColourStreamGetSizeCB(void const*, int, int)
	* pluginExtraVertColourStreamReadCB(RwStream*, int, void*, int, int)
	* pluginExtraVertColourStreamWriteCB(RwStream*, int, void const*, int, int)
	* ~CCustomBuildingDNPipeline()

CCustomBuildingPipeline (1 variables, 18 functions)
Variables list:
	* ObjPipeline

Functions list:
	* CCustomBuildingPipeline()
	* CreateCustomObjPipe()
	* CreatePipe()
	* CustomPipeAtomicSetup(RpAtomic*)
	* CustomPipeMaterialSetup(RpMaterial*, void*)
	* CustomPipeRenderCB(RwResEntry*, void*, unsigned char, unsigned int)
	* DestroyPipe()
	* GetFxEnvScaleX(RpMaterial*)
	* GetFxEnvScaleY(RpMaterial*)
	* GetFxEnvShininess(RpMaterial*)
	* GetFxEnvTexture(RpMaterial*)
	* GetFxEnvTransSclX(RpMaterial*)
	* GetFxEnvTransSclY(RpMaterial*)
	* SetFxEnvScale(RpMaterial*, float, float)
	* SetFxEnvShininess(RpMaterial*, float)
	* SetFxEnvTexture(RpMaterial*, RwTexture*)
	* SetFxEnvTransScl(RpMaterial*, float, float)
	* ~CCustomBuildingPipeline()

CCustomCarEnvMapPipeline (9 variables, 44 functions)
Variables list:
	* ObjPipeline
	* fakeEnvMapPipeMatData
	* m_EnvMapLightingMult
	* m_gEnvMapPipeAtmDataPool
	* m_gEnvMapPipeMatDataPool
	* m_gSpecMapPipeMatDataPool
	* ms_envMapAtmPluginOffset
	* ms_envMapPluginOffset
	* ms_specularMapPluginOffset

Functions list:
	* AllocEnvMapPipeAtomicData(RpAtomic*)
	* CCustomCarEnvMapPipeline()
	* CreateCustomOpenGLObjPipe()
	* CreatePipe()
	* CustomPipeAtomicSetup(RpAtomic*)
	* CustomPipeInstanceCB(void*, RxOpenGLMeshInstanceData*, int, int)
	* CustomPipeMaterialSetup(RpMaterial*, void*)
	* CustomPipeRenderCB(RwResEntry*, void*, unsigned char, unsigned int)
	* DestroyPipe()
	* DuplicateCustomEnvMapPipeMaterialData(CustomEnvMapPipeMaterialData**)
	* GetFxEnvScaleX(RpMaterial*)
	* GetFxEnvScaleY(RpMaterial*)
	* GetFxEnvShininess(RpMaterial*)
	* GetFxEnvTexture(RpMaterial*)
	* GetFxEnvTransSclX(RpMaterial*)
	* GetFxEnvTransSclY(RpMaterial*)
	* GetFxSpecSpecularity(RpMaterial*)
	* GetFxSpecTexture(RpMaterial*)
	* PreRenderUpdate()
	* RegisterPlugin()
	* SetCustomEnvMapPipeAtomicDataDefaults(CustomEnvMapPipeAtomicData*)
	* SetCustomEnvMapPipeMaterialDataDefaults(CustomEnvMapPipeMaterialData*)
	* SetFxEnvScale(RpMaterial*, float, float)
	* SetFxEnvShininess(RpMaterial*, float)
	* SetFxEnvTexture(RpMaterial*, RwTexture*)
	* SetFxEnvTransScl(RpMaterial*, float, float)
	* SetFxSpecSpecularity(RpMaterial*, float)
	* SetFxSpecTexture(RpMaterial*, RwTexture*)
	* pluginEnvAtmConstructorCB(void*, int, int)
	* pluginEnvAtmCopyConstructorCB(void*, void const*, int, int)
	* pluginEnvAtmDestructorCB(void*, int, int)
	* pluginEnvMatConstructorCB(void*, int, int)
	* pluginEnvMatCopyConstructorCB(void*, void const*, int, int)
	* pluginEnvMatDestructorCB(void*, int, int)
	* pluginEnvMatStreamGetSizeCB(void const*, int, int)
	* pluginEnvMatStreamReadCB(RwStream*, int, void*, int, int)
	* pluginEnvMatStreamWriteCB(RwStream*, int, void const*, int, int)
	* pluginSpecMatConstructorCB(void*, int, int)
	* pluginSpecMatCopyConstructorCB(void*, void const*, int, int)
	* pluginSpecMatDestructorCB(void*, int, int)
	* pluginSpecMatStreamGetSizeCB(void const*, int, int)
	* pluginSpecMatStreamReadCB(RwStream*, int, void*, int, int)
	* pluginSpecMatStreamWriteCB(RwStream*, int, void const*, int, int)
	* ~CCustomCarEnvMapPipeline()

CPool<CustomEnvMapPipeMaterialData, CustomEnvMapPipeMaterialData> (0 variables, 2 functions)
Variables list:

Functions list:
	* Delete(CustomEnvMapPipeMaterialData*)
	* New()

CPool<CustomEnvMapPipeAtomicData, CustomEnvMapPipeAtomicData> (0 variables, 1 functions)
Variables list:

Functions list:
	* New()

CPool<CustomSpecMapPipeMaterialData, CustomSpecMapPipeMaterialData> (0 variables, 1 functions)
Variables list:

Functions list:
	* New()

CPPTriPlantBuffer (0 variables, 8 functions)
Variables list:

Functions list:
	* CPPTriPlantBuffer()
	* ChangeCurrentPlantModelsSet(int)
	* Flush()
	* GetPPTriPlantPtr(int)
	* GetPlantModelsTab(unsigned int)
	* IncreaseBufferIndex(int, int)
	* SetPlantModelsTab(unsigned int, RpAtomic**)
	* ~CPPTriPlantBuffer()

CGrassRenderer (4 variables, 13 functions)
Variables list:
	* m_closeDist
	* m_farDist
	* m_vecCameraPos
	* m_windBending

Functions list:
	* AddTriPlant(PPTriPlant*, unsigned int)
	* CGrassRenderer()
	* DrawTriPlants(PPTriPlant*, int, RpAtomic**, RwMatrixTag*)
	* FlushTriPlantBuffer()
	* GetPlantModelsTab(unsigned int)
	* Initialise()
	* SetCloseFarAlphaDist(float, float)
	* SetCurrentScanCode(unsigned short)
	* SetGlobalCameraPos(CVector const&)
	* SetGlobalWindBending(float)
	* SetPlantModelsTab(unsigned int, RpAtomic**)
	* Shutdown()
	* ~CGrassRenderer()

CPlantMgr (18 variables, 25 functions)
Variables list:
	* PC_PlantModelSlotTab
	* PC_PlantModelsTab0
	* PC_PlantModelsTab1
	* PC_PlantModelsTab2
	* PC_PlantModelsTab3
	* PC_PlantSlotTextureTab
	* PC_PlantTextureTab0
	* PC_PlantTextureTab1
	* PC_PlantTextureTab2
	* PC_PlantTextureTab3
	* m_AmbientColor
	* m_CloseColEntListHead
	* m_CloseLocTriListHead
	* m_ColEntCacheTab
	* m_LocTrisTab
	* m_UnusedColEntListHead
	* m_UnusedLocTriListHead
	* m_scanCode

Functions list:
	* CPlantMgr()
	* CalculateWindBending()
	* DbgCountCachedEntities(unsigned int*)
	* DbgCountLocTrisAndPlants(unsigned int, unsigned int*, unsigned int*)
	* DbgRenderCachedEntities(unsigned int*)
	* DbgRenderLocTris()
	* Initialise()
	* MoveColEntToList(CPlantColEntEntry**, CPlantColEntEntry**, CPlantColEntEntry*)
	* MoveLocTriToList(CPlantLocTri**, CPlantLocTri**, CPlantLocTri*)
	* PreUpdateOnceForNewCameraPos(CVector const&)
	* ReloadConfig()
	* Render()
	* SetPlantFriendlyFlagInAtomicMI(CAtomicModelInfo*)
	* Shutdown()
	* Update(CVector const&)
	* UpdateAmbientColor()
	* _ColEntityCache_Add(CEntity*, unsigned char)
	* _ColEntityCache_FindInCache(CEntity*)
	* _ColEntityCache_Remove(CEntity*)
	* _ColEntityCache_Update(CVector const&, unsigned char)
	* _ProcessEntryCollisionDataSections(CPlantColEntEntry*, CVector const&, int)
	* _ProcessEntryCollisionDataSections_AddLocTris(CPlantColEntEntry*, CVector const&, int, int, int)
	* _ProcessEntryCollisionDataSections_RemoveLocTris(CPlantColEntEntry*, CVector const&, int, int, int)
	* _UpdateLocTris(CVector const&, int)
	* ~CPlantMgr()

CPlantLocTri (0 variables, 2 functions)
Variables list:

Functions list:
	* Add(RwV3d const&, RwV3d const&, RwV3d const&, unsigned char, unsigned char, unsigned char, unsigned char)
	* Release()

CPlantColEntEntry (0 variables, 2 functions)
Variables list:

Functions list:
	* AddEntry(CEntity*)
	* ReleaseEntry()

CPlantSurfPropMgr (3 variables, 7 functions)
Variables list:
	* m_SurfPropPtrTab
	* m_SurfPropTab
	* m_countSurfPropsAllocated

Functions list:
	* AllocSurfProperties(unsigned short, unsigned char)
	* CPlantSurfPropMgr()
	* GetSurfProperties(unsigned short)
	* Initialise()
	* LoadPlantsDat(char const*)
	* Shutdown()
	* ~CPlantSurfPropMgr()

CMBlur (5 variables, 11 functions)
Variables list:
	* BlurOn
	* Drunkness
	* ms_bJustInitialised
	* pBufVertCount
	* pFrontBuffer

Functions list:
	* CMBlur()
	* ClearDrunkBlur()
	* CreateImmediateModeData(RwCamera*, RwRect*)
	* CreateImmediateModeData(RwCamera*, RwRect*, RwOpenGLVertex*, RwRGBA, float, float, float, float, float, int)
	* MotionBlurClose()
	* MotionBlurOpen(RwCamera*)
	* MotionBlurRender(RwCamera*, unsigned int, unsigned int, unsigned int, unsigned int, int, unsigned int)
	* OverlayRender(RwCamera*, RwRaster*, RwRGBA, int, int)
	* OverlayRenderFx(RwCamera*, RwRaster*)
	* SetDrunkBlur(float)
	* ~CMBlur()

CStreamingInfo (1 variables, 10 functions)
Variables list:
	* ms_pArrayBase

Functions list:
	* AddToList(CStreamingInfo*)
	* GetCdPosn()
	* GetCdPosnAndSize(unsigned int&, unsigned int&)
	* GetCdSize()
	* GetNext()
	* GetPrev()
	* InList()
	* Init()
	* RemoveFromList()
	* SetCdPosnAndSize(unsigned int, unsigned int)

CStreaming (39 variables, 120 functions)
Variables list:
	* desiredNumVehiclesLoaded
	* m_bBoatsNeeded
	* m_bHarvesterModelsRequested
	* m_bStreamHarvesterModelsThisFrame
	* ms_NextPedToLoadFromGroup
	* ms_aInfoForModel
	* ms_bEnableRequestListPurge
	* ms_bIsInitialised
	* ms_bLoadingBigModel
	* ms_channel
	* ms_channelError
	* ms_currentZoneType
	* ms_disableStreaming
	* ms_files
	* ms_imageOffsets
	* ms_imageSize
	* ms_imageSizes
	* ms_interiorImageOffsets
	* ms_lastCullZone
	* ms_lastImageRead
	* ms_loadedGangCars
	* ms_loadedGangs
	* ms_memoryAvailable
	* ms_memoryUsed
	* ms_numModelsRequested
	* ms_numPedsLoaded
	* ms_numPriorityRequests
	* ms_oldSectorX
	* ms_oldSectorY
	* ms_pEndLoadedList
	* ms_pEndRequestedList
	* ms_pExtraObjectsDir
	* ms_pStartLoadedList
	* ms_pStartRequestedList
	* ms_pStreamingBuffer
	* ms_pedsLoaded
	* ms_rwObjectInstances
	* ms_streamingBufferSize
	* ms_vehiclesLoaded

Functions list:
	* AddEntity(CEntity*)
	* AddImageToList(char const*, bool)
	* AddLodsToRequestList(CVector const&, unsigned int)
	* AddModelsToRequestList(CVector const&, unsigned int)
	* AddToLoadedVehiclesList(int)
	* AreAnimsUsedByRequestedModels(int)
	* CarIsCandateForRemoval(int)
	* ClearFlagForAll(unsigned int)
	* ClearSlots(int)
	* ConvertBufferToObject(char*, int, int)
	* DeleteAllRwObjects()
	* DeleteFarAwayRwObjects(CVector const&)
	* DeleteLeastUsedEntityRwObject(bool, unsigned int)
	* DeleteRwObjectsAfterDeath(CVector const&)
	* DeleteRwObjectsBehindCamera(int)
	* DeleteRwObjectsBehindCameraInSectorList(CPtrList&, int)
	* DeleteRwObjectsInSectorList(CPtrList&, int, int)
	* DeleteRwObjectsNotInFrustumInSectorList(CPtrList&, int)
	* DisableCopBikes(bool)
	* FindMIPedSlotForInterior(int)
	* FinishLoadingLargeFile(char*, int)
	* FlushChannels()
	* FlushRequestList()
	* ForceLayerToRead(int)
	* GetCdImageOffset(int)
	* GetDefaultAmbulanceModel()
	* GetDefaultCabDriverModel()
	* GetDefaultCopCarModel(unsigned int)
	* GetDefaultCopModel()
	* GetDefaultFireEngineModel()
	* GetDefaultFiremanModel()
	* GetDefaultMedicModel()
	* GetDiscInDrive()
	* GetGta3ImageIndex()
	* GetModelCDName(int)
	* GetNextFileOnCd(int, bool)
	* HasSpecialCharLoaded(int)
	* HasVehicleUpgradeLoaded(int)
	* IHaveUsedStreamingMemory()
	* ImGonnaUseStreamingMemory()
	* Init()
	* Init2()
	* InitImageList()
	* InstanceLoadedModels(CVector const&)
	* InstanceLoadedModelsInSectorList(CPtrList&)
	* IsCarModelNeededInCurrentZone(int)
	* IsInitialised()
	* IsObjectInCdImage(int)
	* IsVeryBusy()
	* Load()
	* LoadAllRequestedModels(bool)
	* LoadCdDirectory()
	* LoadCdDirectory(char const*, int)
	* LoadInitialPeds()
	* LoadInitialVehicles()
	* LoadInitialWeapons()
	* LoadRequestedModels()
	* LoadScene(CVector const&)
	* LoadSceneCollision(CVector const&)
	* LoadZoneVehicle(CVector const&)
	* MakeSpaceFor(int)
	* PlayerIsFlyingFast()
	* PossiblyStreamCarOutAfterCreation(int)
	* ProcessEntitiesInSectorList(CPtrList&, float, float, float, float, float, float, float, unsigned int)
	* ProcessEntitiesInSectorList(CPtrList&, unsigned int)
	* ProcessLoadingChannel(int)
	* PurgeRequestList()
	* ReInit()
	* ReadIniFile()
	* ReclassifyLoadedCars()
	* RemoveAllUnusedModels()
	* RemoveBigBuildings()
	* RemoveBuildingsNotInArea(int)
	* RemoveCarModel(int)
	* RemoveCurrentZonesModels()
	* RemoveDodgyPedsFromRandomSlots()
	* RemoveEntity(CLink<CEntity*>*)
	* RemoveInappropriatePedModels()
	* RemoveLeastUsedModel(unsigned int)
	* RemoveLoadedVehicle()
	* RemoveLoadedZoneModel()
	* RemoveModel(int)
	* RemoveModelsNotVisibleFromCullzone()
	* RemoveModelsNotVisibleFromCullzoneInSectorList(CPtrList&)
	* RemoveUnusedModelsInLoadedList()
	* RenderEntity(CLink<CEntity*>*)
	* RequestAllModels()
	* RequestBigBuildings(CVector const&)
	* RequestFile(int, int, int, int, int)
	* RequestFilesInChannel(int)
	* RequestModel(int, int)
	* RequestModelStream(int)
	* RequestPlayerSection(int, char const*, int)
	* RequestSpecialChar(int, char const*, int)
	* RequestSpecialModel(int, char const*, int)
	* RequestVehicleUpgrade(int, int)
	* RetryLoadFile(int)
	* Save()
	* SetLoadVehiclesInLoadScene(bool)
	* SetMissionDoesntRequireModel(int)
	* SetMissionDoesntRequireSpecialChar(int)
	* SetModelIsDeletable(int)
	* SetModelTxdIsDeletable(int)
	* SetSpecialCharIsDeletable(int)
	* Shutdown()
	* StartRenderEntities()
	* StreamAmbulanceAndMedic(bool)
	* StreamCopModels(int)
	* StreamFireEngineAndFireman(bool)
	* StreamOneNewCar()
	* StreamPedsForInterior(int)
	* StreamPedsIntoRandomSlots(int*)
	* StreamVehiclesAndPeds()
	* StreamVehiclesAndPeds_Always(CVector const&)
	* StreamZoneModels(CVector const&)
	* StreamZoneModels_Gangs(CVector const&)
	* Update()
	* UpdateForAnimViewer()
	* UpdateMemoryUsed()
	* WeAreTryingToPhaseVehicleOut(int)

CLinkList<CEntity*> (0 variables, 1 functions)
Variables list:

Functions list:
	* Insert(CEntity* const&)

CBox (0 variables, 2 functions)
Variables list:

Functions list:
	* Recalc()
	* Set(CVector const&, CVector const&)

CColBox (0 variables, 2 functions)
Variables list:

Functions list:
	* Set(CVector const&, CVector const&, unsigned char, unsigned char, unsigned char)
	* operator=(CColBox const&)

CColLine (0 variables, 2 functions)
Variables list:

Functions list:
	* CColLine(CVector const&, CVector const&)
	* Set(CVector const&, CVector const&)

CCollision (8 variables, 57 functions)
Variables list:
	* bCamCollideWithBuildings
	* bCamCollideWithObjects
	* bCamCollideWithPeds
	* bCamCollideWithVehicles
	* ms_colModelCache
	* ms_collisionInMemory
	* ms_iProcessLineNumCrossings
	* relVelCamCollisionVehiclesSqr

Functions list:
	* BuildCacheOfCameraCollision(CColSphere*, CColSphere*)
	* CalculateTrianglePlanes(CColModel*)
	* CalculateTrianglePlanes(CCollisionData*)
	* CameraConeCastVsWorldCollision(CColSphere*, CColSphere*, float*, float)
	* CheckCameraCollisionBuildings(int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*)
	* CheckCameraCollisionObjects(int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*)
	* CheckCameraCollisionPeds(int, int, CVector*, CVector*, float*)
	* CheckCameraCollisionVehicles(int, int, CColBox*, CColSphere*, CColSphere*, CColSphere*, CVector*)
	* CheckPeds(CVector*, CVector*, float*)
	* Closest3(CVector*, CVector*)
	* ClosestPointOnLine(CVector*, CVector*, CVector*, CVector*)
	* ClosestPointOnPoly(CColTriangle*, CVector*, CVector*)
	* ClosestPointsOnPoly(CColTriangle*, CVector*, CVector*, CVector*)
	* DistAlongLine2D(float, float, float, float, float, float)
	* DistToLine(CVector const*, CVector const*, CVector const*)
	* DistToLineSqr(CVector const*, CVector const*, CVector const*)
	* DistToMathematicalLine(CVector const*, CVector const*, CVector const*)
	* DistToMathematicalLine2D(float, float, float, float, float, float)
	* GetBoundingBoxFromTwoSpheres(CColBox*, CColSphere*, CColSphere*)
	* GetPrincipleAxis(CVector*)
	* Init()
	* IsStoredPolyStillValidVerticalLine(CVector const&, float, CColPoint&, CStoredCollPoly*)
	* IsThisVehicleSittingOnMe(CVehicle*, CVehicle*)
	* PointInPoly(CVector*, CColTriangle*, CVector*, CVector*)
	* PointInTriangle(CVector const&, CVector const*)
	* ProcessColModels(CMatrix const&, CColModel&, CMatrix const&, CColModel&, CColPoint*, CColPoint*, float*, bool)
	* ProcessLineBox(CColLine const&, CColBox const&, CColPoint&, float&)
	* ProcessLineOfSight(CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool, bool)
	* ProcessLineSphere(CColLine const&, CColSphere const&, CColPoint&, float&)
	* ProcessLineTriangle(CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&, CStoredCollPoly*)
	* ProcessSphereBox(CColSphere const&, CColBox const&, CColPoint&, float&)
	* ProcessSphereSphere(CColSphere const&, CColSphere const&, CColPoint&, float&)
	* ProcessSphereTriangle(CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&)
	* ProcessVerticalLine(CColLine const&, CMatrix const&, CColModel&, CColPoint&, float&, bool, bool, CStoredCollPoly*)
	* ProcessVerticalLineTriangle(CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&, CColPoint&, float&, CStoredCollPoly*)
	* RayPolyPOP(CVector*, CVector*, CColTriangle*, CVector*, CVector*)
	* RemoveTrianglePlanes(CColModel*)
	* RemoveTrianglePlanes(CCollisionData*)
	* Shutdown()
	* SortOutCollisionAfterLoad()
	* SphereCastVersusVsPoly(CColSphere*, CColSphere*, CColTriangle*, CColTrianglePlane*, CompressedVector*)
	* SphereCastVsBBox(CColSphere*, CColSphere*, CColBox*)
	* SphereCastVsCaches(CColSphere*, CVector*, int, CColCacheEntry*, int*, CColCacheEntry*)
	* SphereCastVsEntity(CColSphere*, CColSphere*, CEntity*)
	* SphereCastVsSphere(CColSphere*, CColSphere*, CColSphere*)
	* SphereVsEntity(CColSphere*, CEntity*)
	* Test2DLineAgainst2DLine(float, float, float, float, float, float, float, float)
	* TestLineBox(CColLine const&, CBox const&)
	* TestLineBox_DW(CColLine const&, CBox const&)
	* TestLineOfSight(CColLine const&, CMatrix const&, CColModel&, bool, bool)
	* TestLineSphere(CColLine const&, CColSphere const&)
	* TestLineTriangle(CColLine const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&)
	* TestSphereBox(CSphere const&, CBox const&)
	* TestSphereSphere(CColSphere const&, CColSphere const&)
	* TestSphereTriangle(CColSphere const&, CompressedVector const*, CColTriangle const&, CColTrianglePlane const&)
	* TestVerticalLineBox(CColLine const&, CBox const&)
	* Update()

CLinkList<CCollisionData*> (0 variables, 1 functions)
Variables list:

Functions list:
	* Insert(CCollisionData* const&)

CCollisionPlugin (0 variables, 2 functions)
Variables list:

Functions list:
	* PluginAttach()
	* SetModelInfo(CClumpModelInfo*)

CBoundingBox (0 variables, 1 functions)
Variables list:

Functions list:
	* CBoundingBox()

CCollisionData (0 variables, 9 functions)
Variables list:

Functions list:
	* CCollisionData()
	* CalculateTrianglePlanes()
	* Copy(CCollisionData const&)
	* GetLinkPtr()
	* GetShadTrianglePoint(CVector&, int) const
	* GetTrianglePoint(CVector&, int) const
	* RemoveCollisionVolumes()
	* RemoveTrianglePlanes()
	* SetLinkPtr(CLink<CCollisionData*>*)

CColModel (0 variables, 12 functions)
Variables list:

Functions list:
	* AllocateData()
	* AllocateData(int)
	* AllocateData(int, int, int, int, int, bool)
	* CColModel()
	* CalculateTrianglePlanes()
	* MakeMultipleAlloc()
	* RemoveCollisionVolumes()
	* RemoveTrianglePlanes()
	* operator delete(void*)
	* operator new(unsigned int)
	* operator=(CColModel const&)
	* ~CColModel()

CColPoint (0 variables, 1 functions)
Variables list:

Functions list:
	* operator=(CColPoint const&)

CSphere (0 variables, 1 functions)
Variables list:

Functions list:
	* Set(float, CVector const&)

CColSphere (0 variables, 5 functions)
Variables list:

Functions list:
	* IntersectEdge(CVector const&, CVector const&, CVector&, CVector&) const
	* IntersectPoint(CVector const&) const
	* IntersectRay(CVector const&, CVector const&, CVector&, CVector&) const
	* IntersectSphere(CColSphere const&) const
	* Set(float, CVector const&, unsigned char, unsigned char, unsigned char)

CColDisk (0 variables, 1 functions)
Variables list:

Functions list:
	* Set(float, CVector const&, CVector const&, float, unsigned char, unsigned char, unsigned char)

CColStore (3 variables, 22 functions)
Variables list:
	* m_onlyBB
	* ms_pColPool
	* ms_pQuadTree

Functions list:
	* AddColSlot(char const*)
	* AddCollisionNeededAtPosn(CVector const&)
	* AddRef(int)
	* BoundingBoxesPostProcess()
	* EnsureCollisionIsInMemory(CVector const&)
	* FindColSlot(char const*)
	* GetBoundingBox(int)
	* HasCollisionLoaded(CVector const&, int)
	* IncludeModelIndex(int, int)
	* Initialise()
	* LoadAllBoundingBoxes()
	* LoadAllCollision()
	* LoadCol(int, char const*)
	* LoadCol(int, unsigned char*, int)
	* LoadCollision(CVector, bool)
	* RemoveAllCollision()
	* RemoveCol(int)
	* RemoveColSlot(int)
	* RemoveRef(int)
	* RequestCollision(CVector const&, int)
	* SetCollisionRequired(CVector const&, int)
	* Shutdown()

CColTrianglePlane (0 variables, 1 functions)
Variables list:

Functions list:
	* Set(CompressedVector const*, CColTriangle&)

CTempColModels (13 variables, 2 functions)
Variables list:
	* ms_colModelBBox
	* ms_colModelBodyPart1
	* ms_colModelBodyPart2
	* ms_colModelBonnet1
	* ms_colModelBoot1
	* ms_colModelBumper1
	* ms_colModelCutObj
	* ms_colModelDoor1
	* ms_colModelPanel1
	* ms_colModelPed1
	* ms_colModelPed2
	* ms_colModelWeapon
	* ms_colModelWheel1

Functions list:
	* Initialise()
	* Shutdown()

CAutoPilot (0 variables, 2 functions)
Variables list:

Functions list:
	* ModifySpeed(float)
	* RemoveOnePathNode()

CBridge (10 variables, 5 functions)
Variables list:
	* DefaultZLiftPart
	* DefaultZLiftRoad
	* DefaultZLiftWeight
	* OldLift
	* OldState
	* State
	* TimeOfBridgeBecomingOperational
	* pLiftPart
	* pLiftRoad
	* pWeight

Functions list:
	* FindBridgeEntities()
	* Init()
	* ShouldLightsBeFlashing()
	* ThisIsABridgeObjectMovingUp(unsigned int)
	* Update()

CCarAI (2 variables, 25 functions)
Variables list:
	* ms_fAccurateAchievePointRadius
	* ms_fAchievePointRadius

Functions list:
	* AddAmbulanceOccupants(CVehicle*)
	* AddFiretruckOccupants(CVehicle*)
	* AddPoliceCarOccupants(CVehicle*, bool)
	* BackToCruisingIfNoWantedLevel(CVehicle*)
	* CarHasReasonToStop(CVehicle*)
	* EntitiesGoHeadOn(CEntity*, CEntity*)
	* FindPoliceBikeMissionForWantedLevel()
	* FindPoliceBoatMissionForWantedLevel()
	* FindPoliceCarMissionForWantedLevel()
	* FindPoliceCarSpeedForWantedLevel(CVehicle*)
	* FindSwitchDistanceClose(CVehicle*)
	* FindSwitchDistanceFar(CVehicle*)
	* GetCarToGoToCoors(CVehicle*, CVector*, int, bool)
	* GetCarToGoToCoorsAccurate(CVehicle*, CVector*, int, bool)
	* GetCarToGoToCoorsRacing(CVehicle*, CVector*, int, bool)
	* GetCarToGoToCoorsStraightLine(CVehicle*, CVector*, int, bool)
	* GetCarToParkAtCoors(CVehicle*, CVector*)
	* MakeWayForCarWithSiren(CVehicle*)
	* MellowOutChaseSpeed(CVehicle*)
	* MellowOutChaseSpeedBoat(CVehicle*)
	* TellCarToBlockOtherCar(CVehicle*, CVehicle*)
	* TellCarToFollowOtherCar(CVehicle*, CVehicle*, float)
	* TellCarToRamOtherCar(CVehicle*, CVehicle*)
	* TellOccupantsToLeaveCar(CVehicle*)
	* UpdateCarAI(CVehicle*)

CVector (0 variables, 6 functions)
Variables list:

Functions list:
	* FromMultiply(CMatrix const&, CVector const&)
	* FromMultiply3X3(CMatrix const&, CVector const&)
	* Magnitude() const
	* Magnitude2D() const
	* Normalise()
	* NormaliseAndMag()

CTaskComplexSequence (0 variables, 14 functions)
Variables list:

Functions list:
	* AddTask(CTask*)
	* AddTask(int, CTask*)
	* CTaskComplexSequence()
	* Clone() const
	* Contains(int)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateFirstSubTask(CPed*, int&, int&)
	* CreateNextSubTask(CPed*)
	* CreateNextSubTask(CPed*, int&, int&)
	* Flush()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexSequence()

CCarCtrl (19 variables, 119 functions)
Variables list:
	* CarDensityMultiplier
	* CountDownToCarsAtStart
	* LastTimeAmbulanceCreated
	* LastTimeFireTruckCreated
	* LastTimeLawEnforcerCreated
	* LastTimeMiamiViceGenerated
	* MaxNumberOfCarsInUse
	* MiamiViceCycle
	* NumAmbulancesOnDuty
	* NumFireTrucksOnDuty
	* NumLawEnforcerCars
	* NumMissionCars
	* NumParkedCars
	* NumPermanentVehicles
	* NumRandomCars
	* TimeNextMadDriverChaseCreated
	* bAllowEmergencyServicesToBeCreated
	* bCarIsBeingCreated
	* bCarsGeneratedAroundCamera

Functions list:
	* BoatWithTallMast(unsigned int)
	* ChooseBoatModel()
	* ChooseCarModelToLoad(int)
	* ChooseGangCarModel(int)
	* ChooseModel(int*)
	* ChoosePoliceCarModel(unsigned int)
	* ClearInterestingVehicleList()
	* ClipTargetOrientationToLink(CVehicle*, CLinkAddress, signed char, float*, float, float)
	* CreateCarForScript(int, CVector, unsigned char)
	* CreateConvoy(CVehicle*, int)
	* CreatePoliceChase(CVehicle*, int, CNodeAddress)
	* DealWithBend_Racing(CVehicle*, CLinkAddress, CLinkAddress, CLinkAddress, CLinkAddress, signed char, signed char, signed char, signed char, float, float*, float*, float*, float*, CVector*)
	* DragCarToPoint(CVehicle*, CVector*)
	* FindAngleToWeaveThroughTraffic(CVehicle*, CPhysical*, float, float, float)
	* FindGhostRoadHeight(CVehicle*)
	* FindIntersection2Lines(float, float, float, float, float, float, float, float, float*, float*)
	* FindLinksToGoWithTheseNodes(CVehicle*)
	* FindMaxSteerAngle(CVehicle*)
	* FindMaximumSpeedForThisCarInTraffic(CVehicle*)
	* FindNodesThisCarIsNearestTo(CVehicle*, CNodeAddress&, CNodeAddress&)
	* FindPathDirection(CNodeAddress, CNodeAddress, CNodeAddress, bool*)
	* FindPercDependingOnDistToLink(CVehicle*, CLinkAddress)
	* FindSequenceElement(int)
	* FindSpeedMultiplier(float, float, float, float)
	* FindSpeedMultiplierWithSpeedFromNodes(signed char)
	* FireHeliRocketsAtTarget(CAutomobile*, CEntity*)
	* FlyAIHeliInCertainDirection(CHeli*, float, float, bool)
	* FlyAIHeliToTarget_FixedOrientation(CHeli*, float, CVector, bool)
	* FlyAIPlaneInCertainDirection(CPlane*)
	* GenerateCarCreationCoors2(CVector, float, float, float, bool, float, float, CVector*, CNodeAddress*, CNodeAddress*, float*, bool, bool)
	* GenerateEmergencyServicesCar()
	* GenerateOneEmergencyServicesCar(unsigned int, CVector)
	* GenerateOneRandomCar()
	* GenerateRandomCars()
	* GetAIHeliToAttackPlayer(CAutomobile*)
	* GetAIHeliToFlyInDirection(CAutomobile*)
	* GetAIPlaneToAttackPlayer(CAutomobile*)
	* GetAIPlaneToDoDogFight(CAutomobile*)
	* GetAIPlaneToDoDogFightAgainstPlayer(CAutomobile*)
	* GetAIPlaneToFlyInDirection(CAutomobile*)
	* GetNewVehicleDependingOnCarModel(int, unsigned char)
	* Init()
	* InitSequence(int)
	* IsAnyoneParking()
	* IsPoliceVehicleInPursuit(int)
	* IsThisAnAppropriateNode(CVehicle*, CNodeAddress, CNodeAddress, CNodeAddress, bool, bool)
	* IsThisVehicleInteresting(CVehicle*)
	* IsThisVehicleOnRadar(CVehicle*, int*)
	* JoinCarWithRoadAccordingToMission(CVehicle*)
	* JoinCarWithRoadSystem(CVehicle*)
	* JoinCarWithRoadSystemGotoCoors(CVehicle*, CVector const&, bool, bool)
	* MapCouldMoveInThisArea(float, float)
	* PickNextNodeAccordingStrategy(CVehicle*)
	* PickNextNodeForPlayer(CVehicle*)
	* PickNextNodeRandomly(CVehicle*)
	* PickNextNodeToChaseCar(CVehicle*, float, float, float, CVehicle*)
	* PickNextNodeToFollowPath(CVehicle*)
	* PossiblyFireHSMissile(CVehicle*, CEntity*)
	* PossiblyRemoveVehicle(CVehicle*)
	* PruneVehiclesOfInterest()
	* ReInit()
	* ReconsiderRoute(CVehicle*)
	* RegisterVehicleOfInterest(CVehicle*)
	* RemoveCarsIfThePoolGetsFull()
	* RemoveDistantCars()
	* RemoveFromInterestingVehicleList(CVehicle*)
	* ScanForPedDanger(CVehicle*)
	* ScriptGenerateOneEmergencyServicesCar(unsigned int, CVector)
	* SetCoordsOfScriptCar(CVehicle*, float, float, float, unsigned char, unsigned char)
	* SetUpDriverAndPassengersForVehicle(CVehicle*, int, int, bool, bool, int)
	* SlowCarDownForCarsSectorList(CPtrList&, CVehicle*, float, float, float, float, float*, float)
	* SlowCarDownForObject(CEntity*, CVehicle*, float*, float)
	* SlowCarDownForObjectsSectorList(CPtrList&, CVehicle*, float, float, float, float, float*, float)
	* SlowCarDownForOtherCar(CEntity*, CVehicle*, float*, float)
	* SlowCarDownForPedsSectorList(CPtrList&, CVehicle*, float, float, float, float, float*, float)
	* SlowCarOnRailsDownForTrafficAndLights(CVehicle*)
	* SteerAIBoatWithPhysicsAttackingPlayer(CVehicle*, float*, float*, float*, bool*)
	* SteerAIBoatWithPhysicsCirclingPlayer(CVehicle*, float*, float*, float*, bool*)
	* SteerAIBoatWithPhysicsHeadingForTarget(CVehicle*, float, float, float*, float*, float*)
	* SteerAICarBlockingPlayerForwardAndBack(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarParkParallel(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarParkPerpendicular(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarTowardsPointInEscort(CVehicle*, CVehicle*, float, float, float*, float*, float*, bool*)
	* SteerAICarWithPhysics(CVehicle*)
	* SteerAICarWithPhysicsFollowPath(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarWithPhysicsFollowPath_Racing(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarWithPhysicsFollowPreRecordedPath(CVehicle*, float*, float*, float*, bool*)
	* SteerAICarWithPhysicsHeadingForTarget(CVehicle*, CPhysical*, float, float, float*, float*, float*, bool*)
	* SteerAICarWithPhysicsTryingToBlockTarget(CVehicle*, CEntity*, float, float, float, float, float*, float*, float*, bool*)
	* SteerAICarWithPhysicsTryingToBlockTarget_Stop(CVehicle*, float, float, float, float, float*, float*, float*, bool*)
	* SteerAICarWithPhysics_OnlyMission(CVehicle*, float*, float*, float*, bool*)
	* SteerAIHeliAsPoliceHeli(CAutomobile*)
	* SteerAIHeliFlyingAwayFromPlayer(CAutomobile*)
	* SteerAIHeliToCrashAndBurn(CAutomobile*)
	* SteerAIHeliToFollowEntity(CAutomobile*)
	* SteerAIHeliToKeepEntityInView(CAutomobile*)
	* SteerAIHeliToLand(CAutomobile*)
	* SteerAIHeliTowardsTargetCoors(CAutomobile*)
	* SteerAIPlaneToCrashAndBurn(CAutomobile*)
	* SteerAIPlaneToFollowEntity(CAutomobile*)
	* SteerAIPlaneTowardsTargetCoors(CAutomobile*)
	* SteerPlayerWhilstCruising(CVehicle*, float*, float*, float*, bool*)
	* StopCarIfNodesAreInvalid(CVehicle*)
	* SwitchBetweenPhysicsAndGhost(CVehicle*)
	* SwitchVehicleToRealPhysics(CVehicle*)
	* TestCollisionBetween2MovingRects(CVehicle*, CVehicle*, float, float, CVector*, CVector*)
	* TestCollisionBetween2MovingRects_OnlyFrontBumper(CVehicle*, CVehicle*, float, float, CVector*, CVector*)
	* TestWhetherToFirePlaneGuns(CVehicle*, CEntity*)
	* ThisRoadObjectCouldMove(unsigned int)
	* ThisVehicleShouldTryNotToTurn(CVehicle*)
	* TriggerDogFightMoves(CVehicle*, CVehicle*)
	* UpdateCarCount(CVehicle*, unsigned char)
	* UpdateCarOnRails(CVehicle*)
	* WeaveForObject(CEntity*, CVehicle*, float*, float*)
	* WeaveForOtherCar(CEntity*, CVehicle*, float*, float*)
	* WeaveForPed(CEntity*, CVehicle*, float*, float*)
	* WeaveThroughCarsSectorList(CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*)
	* WeaveThroughObjectsSectorList(CPtrList&, CVehicle*, float, float, float, float, float*, float*)
	* WeaveThroughPedsSectorList(CPtrList&, CVehicle*, CPhysical*, float, float, float, float, float*, float*)

CEvent (0 variables, 17 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEvent()
	* CalcSoundLevelIncrement(float, float)
	* CanBeInterruptedBySameEvent() const
	* DoInformVehicleOccupants(CPed*) const
	* GetLocalSoundLevel() const
	* GetSoundLevel(CEntity const*, CVector const&) const
	* GetSourceEntity() const
	* HasEditableResponse() const
	* IsCriminalEvent() const
	* IsValid(CPed*) const
	* ReportCriminalEvent(CPed*) const
	* TakesPriorityOver(CEvent const&) const
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CEvent()

CEventEditableResponse (0 variables, 12 functions)
Variables list:

Functions list:
	* CEventEditableResponse()
	* Clone() const
	* ComputeResponseTaskOfType(CPed*, int) const
	* ComputeResponseTaskType(CPed*, bool)
	* ComputeResponseTaskType(CPedGroup*)
	* HasEditableResponse() const
	* InformGroup(CPed*) const
	* InformRespectedFriends(CPed*) const
	* InformVehicleOccupants(CPed*) const
	* TriggerLookAt(CPed*) const
	* WillRespond() const
	* ~CEventEditableResponse()

CEventAcquaintancePed (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEventAcquaintancePed(CPed*)
	* CanBeInterruptedBySameEvent() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventAcquaintancePed()

CEventAcquaintancePedHate (0 variables, 4 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventAcquaintancePedHate()

CGeneral (0 variables, 9 functions)
Variables list:

Functions list:
	* GetATanOfXY(float, float)                                 #
	* GetAngleBetweenPoints(float, float, float, float)         #
	* GetNodeHeadingFromVector(float, float)                    #
	* GetRadianAngleBetweenPoints(float, float, float, float)   #
	* GetRandomNumberInRange(float, float)
	* GetRandomNumberInRange(int, int)
	* LimitAngle(float)                                         #
	* LimitRadianAngle(float)                                   #
	* SolveQuadratic(float, float, float, float&, float&)       #

CCamera (5 variables, 127 functions)
Variables list:
	* m_bUseMouse3rdPerson
	* m_f3rdPersonCHairMultX
	* m_f3rdPersonCHairMultY
	* m_fMouseAccelHorzntl
	* m_fMouseAccelVertical

Functions list:
	* AddShake(float, float, float, float, float)
	* AddShakeSimple(float, int, float)                                     #
	* AllowShootingWith2PlayersInCar(bool)                                  #
	* ApplyVehicleCameraTweaks(CVehicle*)
	* AvoidTheGeometry(CVector const&, CVector const&, CVector&, float)
	* CCamera()
	* CalculateDerivedValues(bool, bool)
	* CalculateFrustumPlanes(bool)
	* CalculateGroundHeight(unsigned int)
	* CalculateMirroredMatrix(CVector, float, CMatrix*, CMatrix*)               #
	* CamControl()
	* CamShake(float, float, float, float)          #
	* CameraColDetAndReact(CVector*, CVector*)
	* CameraGenericModeSpecialCases(CPed*)
	* CameraPedAimModeSpecialCases(CPed*)
	* CameraPedModeSpecialCases(CPed*)
	* CameraVehicleModeSpecialCases(CVehicle*)
	* ClearPlayerWeaponMode()
	* ConeCastCollisionResolve(CVector*, CVector*, CVector*, float, float, float*)  #
	* ConsiderPedAsDucking(CPed*)
	* CopyCameraMatrixToRWCam(bool)                     #
	* DealWithMirrorBeforeConstructRenderList(bool, CVector, float, CMatrix*)       #
	* DeleteCutSceneCamDataMemory()
	* DontProcessObbeCinemaCamera()
	* DrawBordersForWideScreen()
	* Enable1rstPersonCamCntrlsScript()
	* Enable1rstPersonWeaponsCamera() 
	* Fade(float, short)                                                            #
	* Find3rdPersonCamTargetVector(float, CVector, CVector&, CVector&)              #
	* Find3rdPersonQuickAimPitch()                                                  #
	* FindCamFOV()
	* FinishCutscene()
	* GetArrPosForVehicleType(int, int&)
	* GetCamDirectlyBehind()
	* GetCutSceneFinishTime()
	* GetCutsceneBarHeight()
	* GetFading()
	* GetFadingDirection()                                                          
	* GetGameCamPosition()
	* GetLookDirection()
	* GetLookingForwardFirstPerson()
	* GetLookingLRBFirstPerson()
	* GetPositionAlongSpline()
	* GetRoughDistanceToGround()
	* GetScreenFadeStatus()
	* GetScreenRect(CRect&)
	* Get_Just_Switched_Status()
	* HandleCameraMotionForDucking(CPed*, CVector*, CVector*, bool)
	* HandleCameraMotionForDuckingDuringAim(CPed*, CVector*, CVector*, bool)
	* ImproveNearClip(CVehicle*, CPed*, CVector*, CVector*)
	* Init()
	* InitCameraVehicleTweaks()
	* InitialiseCameraForDebugMode()
	* InitialiseScriptableComponents()
	* IsExtraEntityToIgnore(CEntity*)
	* IsItTimeForNewcam(int, int)
	* IsSphereVisible(CVector const&, float)
	* IsTargetingActive()
	* LerpFOV(float, float, float, bool)                        #
	* LoadPathSplines(int)
	* Process()
	* ProcessFOVLerp()
	* ProcessFOVLerp(float)                                     #
	* ProcessFade()                                             #
	* ProcessMusicFade()                                        #
	* ProcessObbeCinemaCameraBoat()
	* ProcessObbeCinemaCameraCar()
	* ProcessObbeCinemaCameraHeli()
	* ProcessObbeCinemaCameraPed()
	* ProcessObbeCinemaCameraPlane()
	* ProcessObbeCinemaCameraTrain()
	* ProcessScriptedCommands()
	* ProcessShake()    
	* ProcessShake(float)                               #
	* ProcessVectorMoveLinear()                         #
	* ProcessVectorMoveLinear(float)                    #
	* ProcessVectorTrackLinear()                        #
	* ProcessVectorTrackLinear(float)                   #
	* ProcessWideScreenOn()
	* RenderMotionBlur()
	* ResetDuckingSystem(CPed*)
	* Restore()                                         #
	* RestoreCameraAfterMirror()
	* RestoreWithJumpCut()                              #
	* SetCamCollisionVarDataSet(int)
	* SetCamCutSceneOffSet(CVector const&)                              #
	* SetCamPositionForFixedMode(CVector const&, CVector const&)        #
	* SetCameraDirectlyBehindForFollowPed_CamOnAString()                #
	* SetCameraDirectlyBehindForFollowPed_ForAPed_CamOnAString(CPed*)   #
	* SetCameraDirectlyInFrontForFollowPed_CamOnAString()               #
	* SetCameraDirectlyInFrontForFollowPed_ForAPed_CamOnAString(CPed*)  #
	* SetCameraUpForMirror()
	* SetColVarsAimWeapon(int)
	* SetColVarsPed(int, int)
	* SetColVarsVehicle(int, int)
	* SetFadeColour(unsigned char, unsigned char, unsigned char)        #    
	* SetMotionBlur(int, int, int, int, int)                            #
	* SetMotionBlurAlpha(int)                                           #
	* SetNearClipBasedOnPedCollision(float)
	* SetNearClipScript(float)                                          #
	* SetNewPlayerWeaponMode(short, short, short)
	* SetParametersForScriptInterpolation(float, float, unsigned int)
	* SetPercentAlongCutScene(float)
	* SetRwCamera(RwCamera*)                                            #
	* SetToSphereMap(float)
	* SetWideScreenOff()                                                #
	* SetWideScreenOn()                                                 #
	* SetZoomValueCamStringScript(short)                                #
	* SetZoomValueFollowPedScript(short)                                #
	* ShouldPedControlsBeRelative()
	* StartCooperativeCamMode()
	* StartTransition(short)
	* StartTransitionWhenNotFinishedInter(short)
	* StopCooperativeCamMode()
	* StoreValuesDuringInterPol(CVector&, CVector&, CVector&, float&)   #
	* TakeControl(CEntity*, short, short, int)                                              #
	* TakeControlAttachToEntity(CEntity*, CEntity*, CVector&, CVector&, float, short, int)  #
	* TakeControlNoEntity(CVector const&, short, int)                                       #
	* TakeControlWithSpline(short)
	* TryToStartNewCamMode(int)                                                             #
	* UpdateAimingCoors(CVector const&)                                 #
	* UpdateSoundDistances()
	* UpdateTargetEntity()                                          #
	* Using1stPersonWeaponMode()    
	* VectorMoveLinear(CVector*, CVector*, float, bool)                                     #
	* VectorTrackLinear(CVector*, CVector*, float, bool)                                    #
	* ~CCamera()

CCheat (8 variables, 93 functions)
Variables list:
	* CheatLabel
	* m_CheatString
	* m_aCheatFunctions
	* m_aCheatHashKeys
	* m_aCheatsActive
	* m_bHasPlayerCheated
	* m_bShowMappings
	* m_nLastScriptBypasstime

Functions list:
	* AddToCheatString(char)
	* AdrenalineCheat()
	* AllCarsAreGreatCheat()
	* AllCarsAreShitCheat()
	* ApacheCheat()
	* BeachPartyCheat()
	* BlackCarsCheat()
	* BlowUpCarsCheat()
	* ClearGameCheatsList()
	* ClearMissionSkip()
	* CloudyWeatherCheat()
	* CountrysideInvasionCheat()
	* DoCheats()
	* DozerCheat()
	* DrivebyCheat()
	* DuskCheat()
	* ElvisLivesCheat()
	* EverybodyAttacksPlayerCheat()
	* ExtraSunnyWeatherCheat()
	* FastTimeCheat()
	* FatCheat()
	* FindCheatIndex(char const*)
	* FlyboyCheat()
	* FoggyWeatherCheat()
	* FunhouseCheat()
	* GangLandCheat()
	* GangsCheat()
	* GolfcartCheat()
	* HandleAllCheats()
	* HandleCarCheat()
	* HandleCheatMenu(bool)
	* HandleGameCheats()
	* HandleMissionJump(bool, int)
	* HealthCheat()
	* HearseCheat()
	* JetpackCheat()
	* LoveConquersAllCheat()
	* LovefistCheat()
	* MayhemCheat()
	* MidnightCheat()
	* MoneyArmourHealthCheat()
	* MonsterTruckCheat()
	* MuscleCheat()
	* NinjaCheat()
	* NotWantedCheat()
	* ParachuteCheat()
	* PinkCarsCheat()
	* PredatorCheat()
	* ProcessAllCheats()
	* ProcessCheatMenu()
	* ProcessCheats()
	* ProcessDebugCarCheats()
	* ProcessDebugMissionSkip()
	* ProcessWeaponSlotCheats()
	* QuadCheat()
	* RainyWeatherCheat()
	* ResetCheats()
	* RiotCheat()
	* SandstormCheat()
	* ScriptBypassCheat()
	* ShowMappingsCheat()
	* SkinnyCheat()
	* SlowTimeCheat()
	* StaminaCheat()
	* StockCar2Cheat()
	* StockCar3Cheat()
	* StockCar4Cheat()
	* StockCarCheat()
	* StormCheat()
	* StuntPlaneCheat()
	* SuicideCheat()
	* SunnyWeatherCheat()
	* TankCheat()
	* TankerCheat()
	* TheGamblerCheat()
	* TimeTravelCheat()
	* TogglePlayerInvincibility()
	* ToggleShowTapToTarget()
	* ToggleShowTargeting()
	* TrashmasterCheat()
	* VehicleCheat(int)
	* VehicleSkillsCheat()
	* VillagePeopleCheat()
	* VortexCheat()
	* WantedCheat()
	* WantedLevelDownCheat()
	* WantedLevelUpCheat()
	* WeaponCheat1()
	* WeaponCheat2()
	* WeaponCheat3()
	* WeaponCheat4()
	* WeaponSkillsCheat()
	* WeaponSlotCheat()

CConversationNode (0 variables, 2 functions)
Variables list:

Functions list:
	* Clear()
	* ClearRecursively()

CConversationForPed (0 variables, 3 functions)
Variables list:

Functions list:
	* Clear(bool)
	* IsPlayerInPositionForConversation(bool)
	* Update()

CConversations (7 variables, 15 functions)
Variables list:
	* m_AwkwardSayStatus
	* m_SettingUpConversationNumNodes
	* m_aConversations
	* m_aNodes
	* m_aTempNodes
	* m_bSettingUpConversation
	* m_pSettingUpConversationPed

Functions list:
	* AwkwardSay(int, CPed*)
	* Clear()
	* DoneSettingUpConversation(bool)
	* EnableConversation(CPed*, bool)
	* FindConversationForPed(CPed*)
	* FindFreeConversationSlot()
	* FindFreeNodeSlot()
	* GetConversationStatus(CPed*)
	* IsConversationAtNode(char*, CPed*)
	* IsConversationGoingOn()
	* IsPlayerInPositionForConversation(CPed*, bool)
	* RemoveConversationForPed(CPed*)
	* SetUpConversationNode(char*, char*, char*, int, int, int)
	* StartSettingUpConversation(CPed*)
	* Update()

CPedToPlayerConversations (7 variables, 3 functions)
Variables list:
	* m_StartTime
	* m_State
	* m_TimeOfLastPlayerConversation
	* m_Topic
	* m_bPositiveOpening
	* m_bPositiveReply
	* m_pPed

Functions list:
	* Clear()
	* EndConversation()
	* Update()

CPed (4 variables, 152 functions)
Variables list:
	* m_sGunFlashBlendOutRate
	* m_sGunFlashBlendStart
	* nCloseBlockedLosWaitTime
	* nFarBlockedLosWaitTime

Functions list:
	* AddGogglesModel(int, bool*)
	* AddWeaponModel(int)
	* AttachPedToBike(CEntity*, CVector, unsigned short, float, float, eWeaponType)
	* AttachPedToEntity(CEntity*, CVector, unsigned short, float, eWeaponType)
	* CPed(unsigned int)
	* CalculateNewOrientation()
	* CalculateNewVelocity()
	* CanBeArrested()
	* CanBeDeleted()
	* CanBeDeletedEvenInVehicle()
	* CanPedHoldConversation()
	* CanSeeEntity(CEntity*, float)
	* CanSetPedState()
	* CanStrafeOrMouseControl()
	* CanThrowEntityThatThisPedIsHolding()
	* CanUseTorsoWhenLooking()
	* CanWeRunAndFireWithWeapon()
	* ClearAimFlag()
	* ClearAll()
	* ClearLook()
	* ClearLookFlag()
	* ClearWeapon(eWeaponType)
	* ClearWeapons()
	* CreateDeadPedMoney()
	* CreateDeadPedPickupCoors(float*, float*, float*)
	* CreateDeadPedWeaponPickups()
	* DeadPedMakesTyresBloody()
	* DeleteRwObject()
	* DettachPedFromEntity()
	* DisablePedSpeech(short)
	* DisablePedSpeechForScriptSpeech(short)
	* DoFootLanded(bool, unsigned char)
	* DoGunFlash(int, bool)
	* DoWeHaveWeaponAvailable(eWeaponType)
	* DoesLOSBulletHitPed(CColPoint&)
	* Dress()
	* DropEntityThatThisPedIsHolding(unsigned char)
	* EnablePedSpeech()
	* EnablePedSpeechForScriptSpeech()
	* FinishJumpCB(CAnimBlendAssociation*, void*)
	* FlagToDestroyWhenNextProcessed()
	* GetBikeRidingSkill()
	* GetBonePosition(RwV3d&, unsigned int, bool)
	* GetEntityThatThisPedIsHolding()
	* GetHeadAndFootPositions(CVector&, CVector&, bool)
	* GetHoldingTask()
	* GetLocalDirection(CVector2D const&)
	* GetPedStateString()
	* GetPedTalking()
	* GetTransformedBonePosition(RwV3d&, unsigned int, bool)
	* GetWalkAnimSpeed()
	* GetWeaponSkill()
	* GetWeaponSkill(eWeaponType)
	* GetWeaponSlot(eWeaponType)
	* GiveDelayedWeapon(eWeaponType, unsigned int)
	* GiveObjectToPedToHold(int, unsigned char)
	* GiveWeapon(eWeaponType, unsigned int, bool)
	* GiveWeaponAtStartOfFight()
	* GiveWeaponWhenJoiningGang()
	* GrantAmmo(eWeaponType, unsigned int)
	* Initialise()
	* IsAlive() const
	* IsPedHeadAbovePos(float)
	* IsPedInControl()
	* IsPedShootable()
	* IsPlayer() const
	* IsPlayingHandSignal()
	* IsPointerValid()
	* KillPedWithCar(CVehicle*, float, bool)
	* Load()
	* Look()
	* MakeTyresMuddySectorList(CPtrList&)
	* OurPedCanSeeThisEntity(CEntity*, bool)
	* PedCanPickUpPickUp()
	* PedIsInvolvedInConversation()
	* PedIsReadyForConversation(bool)
	* PlayFootSteps()
	* PositionAnyPedOutOfCollision()
	* PositionAttachedPed()
	* PositionPedOutOfCollision(int, CVehicle*, bool)
	* PreRender()
	* PreRenderAfterTest()
	* ProcessBuoyancy()
	* ProcessControl()
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* PutOnGoggles()
	* ReleaseCoverPoint()
	* RemoveBodyPart(int, signed char)
	* RemoveGogglesModel()
	* RemoveLighting(bool)
	* RemoveWeaponAnims(int, float)
	* RemoveWeaponForScriptedCutscene()
	* RemoveWeaponModel(int)
	* RemoveWeaponWhenEnteringVehicle(int)
	* Render()
	* ReplaceWeaponForScriptedCutscene()
	* ReplaceWeaponWhenExitingVehicle()
	* RequestDelayedWeapon()
	* ResetGunFlashAlpha()
	* RestartNonPartialAnims()
	* RestoreHeadingRate()
	* RestoreHeadingRateCB(CAnimBlendAssociation*, void*)
	* Save()
	* Say(unsigned short, unsigned int, float, unsigned char, unsigned char, unsigned char)
	* SayScript(int, unsigned char, unsigned char, unsigned char)
	* SetAimFlag(CEntity*)
	* SetAimFlag(float)
	* SetAmmo(eWeaponType, unsigned int)
	* SetCharCreatedBy(unsigned char)
	* SetCurrentWeapon(eWeaponType)
	* SetCurrentWeapon(int)
	* SetGunFlashAlpha(bool)
	* SetIdle()
	* SetLook(CEntity*)
	* SetLook(float)
	* SetLookFlag(CEntity*, bool, bool)
	* SetLookFlag(float, bool, bool)
	* SetLookTimer(unsigned int)
	* SetModelIndex(unsigned int)
	* SetMoveAnim()
	* SetMoveAnimSpeed(CAnimBlendAssociation*)
	* SetMoveState(eMoveState)
	* SetPedDefaultDecisionMaker()
	* SetPedPositionInCar()
	* SetPedState(ePedState)
	* SetPedStats(ePedStats)
	* SetRadioStation()
	* SetWeaponLockOnTarget(CEntity*)
	* SetWeaponSkill(eWeaponType, signed char)
	* SetupLighting()
	* ShoulderBoneRotation(RpClump*)
	* SortPeds(CPed**, int, int)
	* SpawnFlyingComponent(int, signed char)
	* SpecialEntityCalcCollisionSteps(bool&, bool&)
	* SpecialEntityPreCollisionStuff(CPhysical*, bool, bool&, bool&, bool&, bool&)
	* StopNonPartialAnims()
	* StopPlayingHandSignal()
	* TakeOffGoggles()
	* Teleport(CVector, unsigned char)
	* TurnBody()
	* Undress(char*)
	* Update()
	* UpdatePosition()
	* UpdateStatEnteringVehicle()
	* UpdateStatLeavingVehicle()
	* UseGroundColModel()
	* WorkOutHeadingForMovingFirstPerson(float)
	* operator delete(void*)
	* operator delete(void*, int)
	* operator new(unsigned int)
	* operator new(unsigned int, int)
	* ~CPed()

CPlaceable (0 variables, 13 functions)
Variables list:

Functions list:
	* AllocateMatrix()
	* AllocateStaticMatrix()
	* CPlaceable()
	* FreeStaticMatrix()
	* GetForward() const
	* GetMatrix()
	* InitMatrixArray()
	* IsWithinArea(float, float, float, float) const
	* IsWithinArea(float, float, float, float, float, float) const
	* RemoveMatrix()
	* SetMatrix(CMatrix const&)
	* ShutdownMatrixArray()
	* ~CPlaceable()

CCurves (0 variables, 6 functions)
Variables list:

Functions list:
	* CalcCorrectedDist(float, float, float, float*)
	* CalcCurvePoint(CVector const&, CVector const&, CVector const&, CVector const&, float, int, CVector&, CVector&)
	* CalcSpeedScaleFactor(CVector const&, CVector const&, float, float, float, float)
	* CalcSpeedVariationInBend(CVector const&, CVector const&, float, float, float, float)
	* DistForLineToCrossOtherLine(float, float, float, float, float, float, float, float)
	* TestCurves()

CDarkel (18 variables, 19 functions)
Variables list:
	* AmmoInterruptedWeapon
	* InterruptedWeaponType
	* InterruptedWeaponTypeSelected
	* KillsNeeded
	* ModelToKill
	* ModelToKill2
	* ModelToKill3
	* ModelToKill4
	* PreviousTime
	* RegisteredKills
	* Status
	* TimeLimit
	* TimeOfFrenzyStart
	* WeaponType
	* bNeedHeadShot
	* bProperKillFrenzy
	* bStandardSoundAndMessages
	* pStartMessage

Functions list:
	* CalcFade(unsigned int, unsigned int, unsigned int)
	* CheckDamagedWeaponType(int, int)
	* DealWithWeaponChangeAtEndOfFrenzy()
	* DrawMessages()
	* FailKillFrenzy()
	* FindTotalPedsKilledByPlayer(int)
	* FrenzyOnGoing()
	* Init()
	* QueryModelsKilledByPlayer(int, int)
	* ReadStatus()
	* RegisterCarBlownUpByPlayer(CVehicle*, int)
	* RegisterKillByPlayer(CPed const*, eWeaponType, bool, int)
	* RegisterKillNotByPlayer(CPed const*, eWeaponType)
	* ResetModelsKilledByPlayer(int)
	* ResetOnPlayerDeath()
	* StartFrenzy(eWeaponType, int, unsigned short, int, unsigned short*, int, int, int, bool, bool)
	* ThisPedShouldBeKilledForFrenzy(CPed const*)
	* ThisVehicleShouldBeKilledForFrenzy(CVehicle const*)
	* Update()

CEntryExitManager (11 variables, 27 functions)
Variables list:
	* mp_Active
	* mp_QuadTree
	* mp_poolEntryExits
	* ms_bBurglaryHousesEnabled
	* ms_bDisabled
	* ms_entryExitStack
	* ms_entryExitStackPosn
	* ms_exitEnterState
	* ms_numVisibleEntities
	* ms_oldAreaCode
	* ms_visibleEntityList

Functions list:
	* AddEntryExitToStack(CEntryExit*)
	* AddOne(float, float, float, float, float, float, float, float, float, float, float, int, int, int, int, int, int, char const*)
	* DeleteOne(int)
	* EnableBurglaryHouses(bool)
	* FindNearestDoor(CEntryExit const&, float)
	* FindNearestEntryExit(CVector2D const&, float, int)
	* GetEntryExitIndex(char const*, unsigned short, unsigned short)
	* GetPositionRelativeToOutsideWorld(CVector&)
	* GotoEntryExit(CEntryExit*)
	* GotoEntryExitVC(char const*)
	* GotoNextEntryExit()
	* GotoPreviousEntryExit()
	* Init()
	* LinkEntryExit(CEntryExit*)
	* Load()
	* PostEntryExitsCreation()
	* ResetAreaCodeForVisibleObjects()
	* Save()
	* SetAreaCodeForVisibleObjects()
	* SetEnabled(int, bool)
	* SetEnabledByName(char const*, bool)
	* SetEntryExitFlag(char const*, unsigned int, bool)
	* SetEntryExitFlagWithIndex(int, unsigned int, bool)
	* Shutdown()
	* ShutdownForRestart()
	* Update()
	* WeAreInInteriorTransition()

CEntryExit (3 variables, 11 functions)
Variables list:
	* ms_bWarping
	* ms_pDoor
	* ms_spawnPoint

Functions list:
	* FindValidTeleportPoint(CVector&)
	* GenerateAmbientPeds(CVector const&)
	* GetEntryExitToDisplayNameOf()
	* GetPositionRelativeToOutsideWorld(CVector&)
	* IsInArea(CVector const&)
	* ProcessStealableObjects(CPed*)
	* RequestAmbientPeds()
	* RequestObjectsInFrustum()
	* TransitionFinished(CPed*)
	* TransitionStarted(CPed*)
	* WarpGangWithPlayer(CPed*)

CTask (0 variables, 9 functions)
Variables list:

Functions list:
	* CTask()
	* CreateTask()
	* IsGoToTask(CTask const*)
	* IsTaskPtr(void*)
	* Serialize()
	* StopTimer(CEvent const*)
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CTask()

CTaskSimple (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskSimple()
	* GetSubTask() const
	* IsSimpleTask() const
	* SetPedPosition(CPed*)
	* ~CTaskSimple()

CTaskSimpleUninterruptable (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleUninterruptable()

CGameLogic (28 variables, 29 functions)
Variables list:
	* ActivePlayers
	* AfterDeathStartPointOrientations
	* AfterDeathStartPoints
	* GameState
	* MaxPlayerDistance
	* MissionDropOffReadyToBeUsed
	* NumAfterDeathStartPoints
	* SavedWeaponSlots
	* ShortCutDropOffForMission
	* ShortCutDropOffOrientationForMission
	* SkipDestination
	* SkipDestinationOrientation
	* SkipState
	* SkipTimer
	* SkipToBeFinishedByScript
	* SkipVehicle
	* TimeOfLastEvent
	* bLimitPlayerDistance
	* bPenaltyForArrestApplies
	* bPenaltyForDeathApplies
	* bPlayersCanBeInSeparateCars
	* bPlayersCannotTargetEachother
	* bScriptCoopGameGoingOn
	* f2PlayerStartHeading
	* n2PlayerPedInFocus
	* nPrintFocusHelpCounter
	* nPrintFocusHelpTimer
	* vec2PlayerStartLocation

Functions list:
	* CalcDistanceToForbiddenTrainCrossing(CVector, CVector, bool, CVector*)
	* ClearSkip(bool)
	* Disable2ndControllerForDebug()
	* DoWeaponStuffAtStartOf2PlayerGame(bool)
	* FindCityClosestToPoint(CVector)
	* ForceDeathRestart()
	* InitAtStartOfGame()
	* IsCoopGameGoingOn()
	* IsPlayerAllowedToGoInThisDirection(CPlayerPed*, CVector, float)
	* IsPlayerUse2PlayerControls(CPlayerPed*)
	* IsPointWithinLineArea(CVector*, int, CVector)
	* IsScriptCoopGameGoingOn()
	* IsSkipWaitingForScriptToFadeIn()
	* LaRiotsActiveHere()
	* Load()
	* PassTime(unsigned int)
	* Remove2ndPlayerIfPresent()
	* ResetStuffUponResurrection()
	* RestorePedsWeapons(CPed*)
	* RestorePlayerStuffDuringResurrection(CPlayerPed*, CVector, float)
	* Save()
	* SetPlayerWantedLevelForForbiddenTerritories(bool)
	* SetUpSkip(CVector, float, bool, CVehicle*, bool)
	* SkipCanBeActivated()
	* SortOutStreamingAndMemory(CVector const&, float)
	* StopPlayerMovingFromDirection(int, CVector)
	* StorePedsWeapons(CPed*)
	* Update()
	* UpdateSkip()

CGangWars (27 variables, 35 functions)
Variables list:
	* CoorsOfPlayerAtStartOfWar
	* Difficulty
	* FightTimer
	* Gang1
	* Gang2
	* GangRatingStrength
	* GangRatings
	* LastTimeInArea
	* NumSpecificZones
	* PointOfAttack
	* Provocation
	* RadarBlip
	* State
	* State2
	* TerritoryUnderControlPercentage
	* TimeStarted
	* TimeTillNextAttack
	* WarFerocity
	* ZoneInfoForTraining
	* aSpecificZones
	* bCanTriggerGangWarWhenOnAMission
	* bGangWarsActive
	* bIsPlayerOnAMission
	* bPlayerIsCloseby
	* bTrainingMission
	* pZoneInfoToFightOver
	* pZoneToFightOver

Functions list:
	* AddKillToProvocation(int)
	* AttackWaveOvercome()
	* CalculateTimeTillNextAttack()
	* CanPlayerStartAGangWarHere(CZoneInfo*)
	* CheerVictory()
	* ClearSpecificZonesToTriggerGangWar()
	* ClearTheStreets()
	* CreateAttackWave(int, int)
	* CreateDefendingGroup(int)
	* DoStuffWhenPlayerVictorious()
	* DoesPlayerControlThisZone(CZoneInfo*)
	* DontCreateCivilians()
	* EndGangWar(bool)
	* GangWarFightingGoingOn()
	* GangWarGoingOn()
	* InitAtStartOfGame()
	* Load()
	* MakeEnemyGainInfluenceInZone(int, int)
	* MakePlayerGainInfluenceInZone(float)
	* PedStreamedInForThisGang(int)
	* PickStreamedInPedForThisGang(int, int*)
	* PickZoneToAttack()
	* ReleaseCarsInAttackWave()
	* ReleasePedsInAttackWave(bool, bool)
	* Save()
	* SetGangWarsActive(bool)
	* SetSpecificZoneToTriggerGangWar(int)
	* StartDefensiveGangWar()
	* StartOffensiveGangWar()
	* StrengthenPlayerInfluenceInZone(int)
	* SwitchGangWarsActive()
	* TellGangMembersTo(int)
	* TellStreamingWhichGangsAreNeeded(int*)
	* Update()
	* UpdateTerritoryUnderControlPercentage()

CGarages (21 variables, 35 functions)
Variables list:
	* BankVansCollected
	* BombsAreFree
	* CarTypesCollected
	* CarsCollected
	* CrushedCarId
	* LastGaragePlayerWasIn
	* LastTimeHelpMessage
	* MessageEndTime
	* MessageIDString
	* MessageNumberInString
	* MessageNumberInString2
	* MessageStartTime
	* NoResprays
	* NumGarages
	* PlayerInGarage
	* PoliceCarsCollected
	* RespraysAreFree
	* aCarsInSafeHouse
	* aGarages
	* bCamShouldBeOutside
	* bDebugDisplayGarages

Functions list:
	* ActivateGarage(short)
	* AddOne(float, float, float, float, float, float, float, float, unsigned char, unsigned int, char*, unsigned int)
	* AllRespraysCloseOrOpen(bool)
	* CameraShouldBeOutside()
	* ChangeGarageType(short, unsigned char, unsigned int)
	* CloseHideOutGaragesBeforeSave()
	* CountCarsInHideoutGarage(unsigned char)
	* DeActivateGarage(short)
	* FindDoorHeightForMI(unsigned int)
	* FindGarageForObject(CObject*)
	* FindGarageIndex(char*)
	* FindSafeHouseIndexForGarageType(int)
	* GivePlayerDetonator()
	* HasCarBeenDroppedOffYet(short)
	* HasResprayHappened(short)
	* Init()
	* Init_AfterRestart()
	* IsCarSprayable(CVehicle*)
	* IsGarageClosed(short)
	* IsGarageOpen(short)
	* IsModelIndexADoor(int)
	* IsPointInAGarageCameraZone(CVector)
	* IsPointWithinAnyGarage(CVector&)
	* IsPointWithinHideOutGarage(CVector&)
	* IsThisCarWithinGarageArea(short, CEntity*)
	* Load()
	* PlayerArrestedOrDied()
	* PrintMessages()
	* Save()
	* SetTargetCarForMissionGarage(short, CAutomobile*)
	* Shutdown()
	* StopCarFromBlowingUp(CAutomobile*)
	* StoreCarInNearestImpoundingGarage(CVehicle*)
	* TriggerMessage(char*, short, unsigned short, short)
	* Update()

CGarage (0 variables, 36 functions)
Variables list:

Functions list:
	* BuildRotatedDoorMatrix(CEntity*, float)
	* CalcDistToGarageRectangleSquared(float, float)
	* CenterCarInGarage(CVehicle*)
	* CloseThisGarage()
	* CountCarsWithCenterPointWithinGarage(CEntity*)
	* EntityHasASphereWayOutsideGarage(CEntity*, float)
	* FindDoorsWithGarage(CObject**, CObject**)
	* FindMaxNumStoredCarsForGarage()
	* InitDoorsAtStart()
	* IsAnyCarBlockingDoor()
	* IsAnyOtherCarTouchingGarage(CVehicle*)
	* IsAnyOtherPedTouchingGarage(CPed*)
	* IsEntityEntirelyInside3D(CEntity*, float)
	* IsEntityEntirelyOutside(CEntity*, float)
	* IsEntityTouching3D(CEntity*)
	* IsGarageEmpty()
	* IsPlayerEntirelyInsideGarage()
	* IsPlayerOutsideGarage(float)
	* IsPointInsideGarage(CVector)
	* IsPointInsideGarage(CVector, float)
	* IsStaticPlayerCarEntirelyInside()
	* NeatlyLineUpStoredCars(CStoredCar*)
	* OpenThisGarage()
	* PlayerArrestedOrDied()
	* RemoveCarsBlockingDoorNotInside()
	* RestoreCarsForThisHideOut(CStoredCar*)
	* RestoreCarsForThisImpoundingGarage(CStoredCar*)
	* RightModTypeForThisGarage(CVehicle*)
	* SlideDoorClosed()
	* SlideDoorOpen()
	* StoreAndRemoveCarsForThisHideOut(CStoredCar*, int)
	* StoreAndRemoveCarsForThisImpoundingGarage(CStoredCar*, int)
	* ThrowCarsNearDoorOutOfGarage(CVehicle*)
	* TidyUpGarage()
	* TidyUpGarageClose()
	* Update(int)

CStoredCar (0 variables, 2 functions)
Variables list:

Functions list:
	* RestoreCar()
	* StoreCar(CVehicle*)

CObject (5 variables, 53 functions)
Variables list:
	* bAircraftCarrierSamSiteDisabled
	* bArea51SamSiteDisabled
	* fDistToNearestTree
	* nBodyCastHealth
	* nNoTempObjects

Functions list:
	* AddToControlCodeList()
	* CObject()                                     #
	* CObject(CDummyObject*)                        #
	* CObject(int, bool)                            #
	* CanBeDeleted()                                #
	* CanBeTargetted()                              #
	* CanBeUsedToTakeCoverBehind()                  #
	* Create(CDummyObject*)                         #
	* Create(int, bool)                             #
	* CreateRwObject()                              #
	* DeleteAllMissionObjects()                     #
	* DeleteAllTempObjects()                        #
	* DeleteAllTempObjectsInArea(CVector, float)    #
	* DoBurnEffect()                                #
	* Explode()                                     #
	* GetLightingFromCollisionBelow()               #
	* GetObjectCarriedWithRope()                    #
	* GetRopeHeight()                               #
	* GrabObjectToCarryWithRope(CPhysical*)         #
	* Init()                                        #
	* Load()
	* LockDoor()                                    #
	* ObjectDamage(float, CVector*, CVector*, CEntity*, eWeaponType)    #
	* ObjectFireDamage(float, CEntity*)             #
	* PreRender()                                   #
	* ProcessControl()                              #
	* ProcessControlLogic()                         #
	* ProcessGarageDoorBehaviour()                  
	* ProcessSamSiteBehaviour()                     #
	* ProcessTrainCrossingBehaviour()               #
	* RefModelInfo(int)                             #
	* ReleaseObjectCarriedWithRope()                #
	* RemoveFromControlCodeList()
	* RemoveLighting(bool)
	* Render()                                      #
	* ResetDoorAngle()                                  #
	* Save()
	* SetIsStatic(bool)                                 #
	* SetMatrixForTrainCrossing(CMatrix*, float)        #
	* SetObjectTargettable(unsigned char)               #
	* SetRelatedDummy(CDummyObject*)                    #
	* SetRemapTexture(RwTexture*, char const*)
	* SetRopeHeight(float)                              #
	* SetupLighting()
	* SpecialEntityCalcCollisionSteps(bool&, bool&)     #
	* SpecialEntityPreCollisionStuff(CPhysical*, bool, bool&, bool&, bool&, bool&)                                       #
	* Teleport(CVector, unsigned char)                  #
	* TryToExplode()                                    #
	* TryToFreeUpTempObjects(int)                       #
	* operator delete(void*)                            #
	* operator new(unsigned int)                        #
	* operator new(unsigned int, int)                   #
	* ~CObject()                                        #

COnscreenTimerEntry (0 variables, 2 functions)
Variables list:

Functions list:
	* Process()
	* ProcessForDisplayClock()

COnscreenCounterEntry (0 variables, 2 functions)
Variables list:

Functions list:
	* ProcessForDisplayCounter(unsigned short)
	* SetColourID(unsigned char)

COnscreenTimer (0 variables, 13 functions)
Variables list:

Functions list:
	* AddClock(unsigned int, char*, bool)
	* AddCounter(unsigned int, unsigned short, char*, unsigned short)
	* AddCounterCounter(unsigned int, unsigned int, char*, unsigned short)
	* ClearClock(unsigned int)
	* ClearCounter(unsigned int)
	* Init()
	* Load()
	* Process()
	* ProcessForDisplay()
	* Save()
	* SetClockBeepCountdownSecs(unsigned int, unsigned int)
	* SetCounterColourID(unsigned int, unsigned char)
	* SetCounterFlashWhenFirstDisplayed(unsigned int, unsigned char)

CPathFind (0 variables, 88 functions)
Variables list:

Functions list:
	* AddDynamicLinkBetween2Nodes(CNodeAddress, CNodeAddress)
	* AddDynamicLinkBetween2Nodes_For1Node(CNodeAddress, CNodeAddress)
	* AddInteriorLink(int, int)
	* AddInteriorLinkToExternalNode(int, CNodeAddress)
	* AddNodeToList(CPathNode*, int)
	* AddNodeToNewInterior(float, float, float, bool, signed char, signed char, signed char, signed char, signed char, signed char)
	* AllocatePathFindInfoMem()
	* AreNodesLoadedForArea(float, float, float, float)
	* CalcDistToAnyConnectingLinks(CPathNode*, CVector)
	* CalcRoadDensity(float, float)
	* CheckGrid()
	* CompleteNewInterior(CNodeAddress*)
	* ComputeRoute(unsigned char, CVector const&, CVector const&, CNodeAddress const&, CNodeRoute&)
	* CountFloodFillGroups(unsigned char)
	* CountNeighboursToBeSwitchedOff(CPathNode*)
	* DoPathSearch(unsigned char, CVector, CNodeAddress, CVector, CNodeAddress*, short*, int, float*, float, CNodeAddress*, float, bool, CNodeAddress, bool, bool)
	* Find2NodesForCarCreation(CVector, CNodeAddress*, CNodeAddress*, bool)
	* FindLinkBetweenNodes(CNodeAddress, CNodeAddress)
	* FindNearestExteriorNodeToInteriorNode(int)
	* FindNextNodeWandering(unsigned char, CVector, CNodeAddress*, CNodeAddress*, unsigned char, unsigned char*)
	* FindNodeClosestInRegion(CNodeAddress*, unsigned short, CVector, unsigned char, float*, bool, bool, bool, bool)
	* FindNodeClosestToCoors(CVector, unsigned char, float, bool, bool, bool, bool, bool)
	* FindNodeClosestToCoorsFavourDirection(CVector, unsigned char, float, float)
	* FindNodeCoorsForScript(CNodeAddress, CNodeAddress, float*, bool*)
	* FindNodeCoorsForScript(CNodeAddress, bool*)
	* FindNodeOrientationForCarPlacement(CNodeAddress)
	* FindNodeOrientationForCarPlacementFacingDestination(CNodeAddress, float, float, bool)
	* FindNodePairClosestToCoors(CVector, unsigned char, CNodeAddress*, CNodeAddress*, float*, float, float, bool, bool, bool)
	* FindNthNodeClosestToCoors(CVector, unsigned char, float, bool, bool, int, bool, bool, CNodeAddress*)
	* FindParkingNodeInArea(float, float, float, float, float, float)
	* FindRegionForCoors(float, float)
	* FindStartPointOfRegion(int, int, float&, float&)
	* FindXCoorsForRegion(int)
	* FindXRegionForCoors(float)
	* FindYCoorsForRegion(int)
	* FindYRegionForCoors(float)
	* GeneratePedCreationCoors(float, float, float, float, float, float, CVector*, CNodeAddress*, CNodeAddress*, float*, bool, CMatrix*)
	* GeneratePedCreationCoors_Interior(float, float, CVector*, CNodeAddress*, CNodeAddress*, float*)
	* HaveRequestedNodesBeenLoaded()
	* Init()
	* IsWaterNodeNearby(CVector, float)
	* Load()
	* LoadPathFindData(RwStream*, int)
	* LoadPathFindData(int)
	* LoadSceneForPathNodes(CVector)
	* MakeRequestForNodesToBeLoaded(float, float, float, float)
	* MarkRegionsForCoors(CVector, float)
	* MarkRoadNodeAsDontWander(float, float, float)
	* MarkRoadsBetweenLevelsInArea(float, float, float, float, float, float)
	* MarkRoadsBetweenLevelsNodeAndNeighbours(int)
	* PedMarkRoadsBetweenLevelsInArea(float, float, float, float, float, float)
	* PreparePathData()
	* ReInit()
	* RecordNodesClosestToCoors(CVector, unsigned char, int, CNodeAddress*, float, bool, bool, bool, bool)
	* RecordNodesInCircle(CVector const&, float, unsigned char, int, CNodeAddress*, bool, bool, bool, bool, bool)
	* RegisterMarker(CVector*)
	* ReleaseRequestedNodes()
	* RemoveBadStartNode(CVector, CNodeAddress*, short*)
	* RemoveInterior(unsigned int)
	* RemoveInteriorLinks(int)
	* RemoveNodeFromList(CPathNode*)
	* ReturnInteriorNodeIndex(unsigned int, int)
	* Save()
	* SetLinksBridgeLights(float, float, float, float, bool)
	* SetPathsNeededAtPosition(CVector const&)
	* Shutdown()
	* StartNewInterior(unsigned int)
	* StoreDetachedNodeInfoCar(int, signed char, int, float, float, float, float, signed char, signed char, bool, bool, unsigned char, bool, bool, unsigned char, bool, unsigned char)
	* StoreDetachedNodeInfoPed(int, signed char, int, float, float, float, float, bool, bool, bool, unsigned char, bool, unsigned char, bool)
	* StoreNodeInfoCar(short, short, signed char, signed char, short, short, short, float, signed char, signed char, bool, bool, unsigned char, bool, bool, unsigned char, unsigned char)
	* StoreNodeInfoPed(short, short, signed char, signed char, short, short, short, float, bool, unsigned char, bool, unsigned char)
	* SwitchOffNodeAndNeighbours(CPathNode*, CPathNode**, CPathNode**, bool, bool)
	* SwitchPedRoadsOffInArea(float, float, float, float, float, float, bool, bool)
	* SwitchRoadsInAngledArea(float, float, float, float, float, float, float, unsigned char, unsigned char)
	* SwitchRoadsOffInArea(float, float, float, float, float, float, bool, bool, bool)
	* SwitchRoadsOffInAreaForOneRegion(float, float, float, float, float, float, bool, bool, int, bool)
	* TakeWidthIntoAccountForCoors(CNodeAddress, CNodeAddress, unsigned short, float*, float*)
	* TakeWidthIntoAccountForWandering(CNodeAddress, unsigned short)
	* TestCoorsCloseness(CVector, unsigned char, CVector)
	* TestCrossesRoad(CNodeAddress, CNodeAddress)
	* TestForPedTrafficLight(CNodeAddress, CNodeAddress)
	* These2NodesAreAdjacent(CNodeAddress, CNodeAddress)
	* ThisNodeHasToBeSwitchedOff(CPathNode*)
	* ThisNodeWillLeadIntoADeadEnd(CPathNode*, CPathNode*)
	* TidyUpNodeSwitchesAfterMission()
	* UnLoadPathFindData(int)
	* UnMarkAllRoadNodesAsDontWander()
	* UpdateStreaming(bool)

CAutomobile (2 variables, 114 functions)
Variables list:
	* m_sAllTaxiLights
	* vecHunterGunPos

Functions list:
	* AddMovingCollisionSpeed(CVector&)
	* BlowUpCar(CEntity*, unsigned char)
	* BlowUpCarCutSceneNoExtras(bool, bool, bool, bool)
	* BlowUpCarsInPath()
	* BoostJumpControl()
	* BreakTowLink()
	* BurstTyre(unsigned char, bool)
	* CAutomobile(int, unsigned char, unsigned char)
	* ClearHeliOrientation()
	* CloseAllDoors()
	* CloseBoot()
	* CustomCarPlate_AfterRenderingStop(CVehicleModelInfo*)
	* CustomCarPlate_BeforeRenderingStart(CVehicleModelInfo*)
	* DebugCode()
	* DoBurstAndSoftGroundRatios()
	* DoHeliDustEffect(float, float)
	* DoHoverSuspensionRatios()
	* DoNitroEffect(float)
	* DoSoftGroundResistance(unsigned int&)
	* FindWheelWidth(bool)
	* FireTruckControl(CFire*)
	* Fix()
	* FixDoor(int, eDoors)
	* FixPanel(int, ePanels)
	* FixTyre(eWheels)
	* GetAllWheelsOffGround() const
	* GetCarPitch()
	* GetCarRoll()
	* GetComponentWorldPosition(int, CVector&)
	* GetDooorAngleOpenRatio(eDoors) const
	* GetDooorAngleOpenRatio(unsigned int) const
	* GetHeightAboveRoad() const
	* GetJackedCounter()
	* GetMovingCollisionOffset()
	* GetNumContactWheels()
	* GetTowBarPos(CVector&, bool, CVehicle*)
	* GetTowHitchPos(CVector&, bool, CVehicle*)
	* HasCarStoppedBecauseOfLight() const
	* HideAllComps()
	* HydraulicControl()
	* IsComponentPresent(int) const
	* IsDoorClosed(eDoors) const
	* IsDoorClosed(unsigned int) const
	* IsDoorFullyOpen(eDoors) const
	* IsDoorFullyOpen(unsigned int) const
	* IsDoorMissing(eDoors) const
	* IsDoorMissing(unsigned int) const
	* IsDoorReady(eDoors) const
	* IsDoorReady(unsigned int) const
	* IsInAir()
	* IsOpenTopCar() const
	* IsRoomForPedToLeaveCar(unsigned int, CVector*)
	* KnockPedOutCar(eWeaponType, unsigned short, CPed*)
	* Load()
	* NitrousControl(signed char)
	* OpenDoor(CPed*, int, eDoors, float, bool)
	* PlaceOnRoadProperly()
	* PlayCarHorn()
	* PlayHornIfNecessary()
	* PopBoot()
	* PopBootUsingPhysics()
	* PopDoor(int, eDoors, bool)
	* PopPanel(int, ePanels, bool)
	* PreRender()
	* ProcessAI(unsigned int&)
	* ProcessAutoBusDoors()
	* ProcessBuoyancy()
	* ProcessCarOnFireAndExplode(unsigned char)
	* ProcessCarWheelPair(int, int, float, CVector*, CVector*, float, float, float, bool)
	* ProcessControl()
	* ProcessControlCollisionCheck(bool)
	* ProcessControlInputs(unsigned char)
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* ProcessFlyingCarStuff()
	* ProcessHarvester()
	* ProcessSuspension()
	* ProcessSwingingDoor(int, eDoors)
	* RcbanditCheck1CarWheels(CPtrList&) const
	* RcbanditCheckHitWheels() const
	* ReduceHornCounter()
	* RemoveBonnetInPedCollision()
	* RemoveRefsToVehicle(CEntity*)
	* Render()
	* ResetSuspension()
	* Save()
	* ScanForCrimes()
	* SetAllTaxiLights(bool)
	* SetBumperDamage(ePanels, bool)
	* SetBusDoorTimer(unsigned int, unsigned char)
	* SetDoorDamage(eDoors, bool)
	* SetHeliOrientation(float)
	* SetModelIndex(unsigned int)
	* SetPanelDamage(ePanels, bool)
	* SetRandomDamage(bool)
	* SetTaxiLight(bool)
	* SetTotalDamage(bool)
	* SetTowLink(CVehicle*, bool)
	* SetUpWheelColModel(CColModel*)
	* SetupDamageAfterLoad()
	* SetupModelNodes()
	* SetupSuspensionLines()
	* ShowAllComps()
	* SpawnFlyingComponent(int, unsigned int)
	* StopNitroEffect()
	* TankControl()
	* Teleport(CVector, unsigned char)
	* TellHeliToGoToCoors(float, float, float, float, float)
	* TellPlaneToGoToCoors(float, float, float, float, float)
	* TowTruckControl()
	* UpdateMovingCollision(float)
	* UpdateWheelMatrix(int, int)
	* VehicleDamage(float, unsigned short, CEntity*, CVector*, CVector*, eWeaponType)
	* dmgDrawCarCollidingParticles(CVector const&, float, eWeaponType)
	* ~CAutomobile()

CCarPathLink (0 variables, 1 functions)
Variables list:

Functions list:
	* OneWayLaneOffset()

CPedPath (0 variables, 5 functions)
Variables list:

Functions list:
	* AddBlockade(CEntity*, CPedPathNode (*) [40], CVector*)
	* AddBlockadeSectorList(CPtrList&, CPedPathNode (*) [40], CVector*)
	* AddBuildingBlockade(CEntity*, CPedPathNode (*) [40], CVector*)
	* AddBuildingBlockadeSectorList(CPtrList&, CPedPathNode (*) [40], CVector*)
	* CalcPedRoute(unsigned char, CVector, CVector, CVector*, short*, short)

CPhone (0 variables, 2 functions)
Variables list:

Functions list:
	* CPhone()
	* ~CPhone()

CPhoneInfo (0 variables, 12 functions)
Variables list:

Functions list:
	* CPhoneInfo()
	* FindNearestFreePhone(CVector*)
	* GrabPhone(float, float)
	* HasMessageBeenDisplayed(int)
	* Initialise()
	* IsMessageBeingDisplayed(int)
	* PhoneAtThisPosition(CVector)
	* SetPhoneMessage_JustOnce(int, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
	* SetPhoneMessage_Repeatedly(int, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*, unsigned short*)
	* Shutdown()
	* Update()
	* ~CPhoneInfo()

CPickups (11 variables, 37 functions)
Variables list:
	* CollectedPickUpIndex
	* DisplayHelpMessage
	* NumMessages
	* PlayerOnWeaponPickup
	* StaticCamCoors
	* StaticCamStartTime
	* aMessages
	* aPickUps
	* aPickUpsCollected
	* bPickUpcamActivated
	* pPlayerVehicle

Functions list:
	* AddToCollectedPickupsArray(int)
	* CreatePickupCoorsCloseToCoors(float, float, float, float*, float*, float*)
	* CreateSomeMoney(CVector, int)
	* DetonateMinesHitByGunShot(CVector*, CVector*)
	* DoCollectableEffects(CEntity*)
	* DoMineEffects(CEntity*)
	* DoMoneyEffects(CEntity*)
	* DoPickUpEffects(CEntity*)
	* FindPickUpForThisObject(CObject*)
	* GenerateNewOne(CVector, unsigned int, unsigned char, unsigned int, unsigned int, bool, char*)
	* GenerateNewOne_WeaponType(CVector, eWeaponType, unsigned char, unsigned int, bool, char*)
	* GetActualPickupIndex(int)
	* GetNewUniquePickupIndex(int)
	* GetUniquePickupIndex(int)
	* GivePlayerGoodiesWithPickUpMI(unsigned short, int)
	* Init()
	* IsPickUpPickedUp(int)
	* Load()
	* ModelForWeapon(eWeaponType)
	* PassTime(unsigned int)
	* PickedUpHorseShoe()
	* PickedUpOyster()
	* PictureTaken()
	* PlayerCanPickUpThisWeaponTypeAtThisMoment(eWeaponType)
	* ReInit()
	* RemoveMissionPickUps()
	* RemovePickUp(int)
	* RemovePickUpsInArea(float, float, float, float, float, float)
	* RemovePickupObjects()
	* RemoveUnnecessaryPickups(CVector const&, float)
	* RenderPickUpText()
	* Save()
	* TestForPickupsInBubble(CVector, float)
	* TryToMerge_WeaponType(CVector, eWeaponType, unsigned char, unsigned int, bool)
	* Update()
	* UpdateMoneyPerDay(int, unsigned short)
	* WeaponForModel(int)

CPickup (0 variables, 10 functions)
Variables list:

Functions list:
	* ExtractAmmoFromPickup(CPlayerPed*)
	* FindStringForTextIndex(int)
	* FindTextIndexForString(char*)
	* GetRidOfObjects()
	* GiveUsAPickUpObject(CObject**, int)
	* IsPickUpCloseEnoughForObjects()
	* PickUpShouldBeInvisible()
	* ProcessGunShot(CVector*, CVector*)
	* Remove()
	* Update(CPlayerPed*, CVehicle*, int)

CVehicleRecording (14 variables, 29 functions)
Variables list:
	* DisplayMode
	* NumPlayBackFiles
	* PlayBackStreamingIndex
	* PlaybackBufferSize
	* PlaybackIndex
	* PlaybackRunningTime
	* PlaybackSpeed
	* StreamingArray
	* bPlaybackGoingOn
	* bPlaybackLooped
	* bPlaybackPaused
	* bUseCarAI
	* pPlaybackBuffer
	* pVehicleForPlayback

Functions list:
	* ChangeCarPlaybackToUseAI(CVehicle*)
	* FindIndexWithFileNameNumber(int)
	* HasRecordingFileBeenLoaded(int)
	* Init()
	* InitAtStartOfGame()
	* InterpolateInfoForCar(CVehicle*, CVehicleStateEachFrame*, float)
	* IsPlaybackGoingOnForCar(CVehicle*)
	* IsPlaybackPausedForCar(CVehicle*)
	* Load(RwStream*, int, int)
	* PausePlaybackRecordedCar(CVehicle*)
	* RegisterRecordingFile(char const*)
	* RemoveAllRecordingsThatArentUsed()
	* RemoveRecordingFile(int)
	* Render()
	* RenderLineSegment(int&)
	* RequestRecordingFile(int)
	* RestoreInfoForCar(CVehicle*, CVehicleStateEachFrame*, bool)
	* RestoreInfoForMatrix(CMatrix&, CVehicleStateEachFrame*)
	* SaveOrRetrieveDataForThisFrame()
	* SetPlaybackSpeed(CVehicle*, float)
	* SetRecordingToPointClosestToCoors(int, CVector)
	* ShutDown()
	* SkipForwardInRecording(CVehicle*, float)
	* SkipToEndAndStopPlaybackRecordedCar(CVehicle*)
	* SmoothRecording(int)
	* StartPlaybackRecordedCar(CVehicle*, unsigned int, bool, bool)
	* StopPlaybackRecordedCar(CVehicle*)
	* StopPlaybackWithIndex(int)
	* UnpausePlaybackRecordedCar(CVehicle*)

CRemote (0 variables, 3 functions)
Variables list:

Functions list:
	* GivePlayerRemoteControlledCar(float, float, float, float, unsigned short)
	* TakeRemoteControlOfCar(CVehicle*)
	* TakeRemoteControlledCarFromPlayer(bool)

CReplay (69 variables, 46 functions)
Variables list:
	* ActiveSequences
	* BufferStatus
	* Buffers
	* CameraFixedX
	* CameraFixedY
	* CameraFixedZ
	* CameraMode
	* ClockHours
	* ClockMinutes
	* CurrArea
	* FireArray
	* Frame
	* FramesActiveLookAroundCam
	* LastRecordedFrameTime
	* LoadSceneX
	* LoadSceneY
	* LoadSceneZ
	* Mode
	* NewWeatherType
	* OldRadioStation
	* OldWeatherType
	* PedGroup_NumKills
	* PedGroup_OnMission
	* Playback
	* PlayerInfo
	* Record
	* Time1
	* Time2
	* Time3
	* Time4
	* Time5
	* Time6
	* Time7
	* TimeScale
	* TimeStep
	* TimeStepNonClipped
	* WeatherInterpolationValue
	* WorldPtrList
	* bAllowLookAroundCam
	* bDoLoadSceneWhenDone
	* bPlayingBackFromFile
	* bReplayEnabled
	* fAlphaAngleLookAroundCam
	* fBetaAngleLookAroundCam
	* fDistanceLookAroundCam
	* m_PedPoolConversion
	* m_VehiclePoolConversion
	* ms_nNumCivFemale_Stored
	* ms_nNumCivMale_Stored
	* ms_nNumCop_Stored
	* ms_nNumDealers_Stored
	* ms_nNumEmergency_Stored
	* ms_nNumGang_Stored
	* ms_nTotalCarPassengerPeds_Stored
	* ms_nTotalCivPeds_Stored
	* ms_nTotalGangPeds_Stored
	* ms_nTotalMissionPeds_Stored
	* ms_nTotalPeds_Stored
	* pBufSeq0
	* pBufSeq1
	* pEmptyReferences
	* pGarages
	* pPickups
	* pRadarBlips
	* pReferences
	* pStoredCam
	* pWorld1
	* paProjectileInfo
	* paProjectiles

Functions list:
	* CanWeFindPoolIndexForPed(int)
	* CanWeFindPoolIndexForVehicle(int)
	* CreatePlayerPed()
	* DealWithNewPedPacket(CPacketNewPed*, bool, CPacketPlayerClothes*)
	* DisableReplays()
	* Display()
	* EmptyPedsAndVehiclePools_NoDestructors()
	* EmptyReplayBuffer()
	* EnableReplays()
	* FastForwardToTime(unsigned int)
	* FindFirstFocusCoordinate(CVector*)
	* FindPoolIndexForPed(int)
	* FindPoolIndexForVehicle(int)
	* FindSizeOfPacket(unsigned char)
	* FinishPlayback()
	* GoToNextBlock()
	* Init()
	* InitialisePedPoolConversionTable()
	* InitialisePoolConversionTables()
	* InitialiseVehiclePoolConversionTable()
	* IsThisPedUsedInRecording(int)
	* IsThisVehicleUsedInRecording(int)
	* MarkEverythingAsNew()
	* NumberFramesAvailableToPlay()
	* PlayBackThisFrame()
	* PlayBackThisFrameInterpolation(CAddressInReplayBuffer*, float, unsigned int*)
	* ProcessLookAroundCam()
	* ProcessPedUpdate(CPed*, float, CAddressInReplayBuffer*)
	* ProcessReplayCamera()
	* RecordPedDeleted(CPed*)
	* RecordThisFrame()
	* RecordVehicleDeleted(CVehicle*)
	* RestoreClothesDesc(CPedClothesDesc*, CPacketPlayerClothes*)
	* RestorePlayerInfoVariables()
	* RestoreStuffFromMem()
	* RetrievePedAnimation(CPed*, CStoredAnimationState*)
	* SaveReplayToHD()
	* ShouldStandardCameraBeProcessed()
	* StoreClothesDesc(CPedClothesDesc*, CPacketPlayerClothes*)
	* StorePedAnimation(CPed*, CStoredAnimationState*)
	* StorePedUpdate(CPed*, int)
	* StorePlayerInfoVariables()
	* StoreStuffInMem()
	* StreamAllNecessaryCarsAndPeds()
	* TriggerPlayback(unsigned char, float, float, float, bool)
	* Update()

CPacketVehicleUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CVehicle*, float)
	* Store(CVehicle*, int)

CPacketCarUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CAutomobile*, float)
	* Store(CAutomobile*, int)

CPacketBmxUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CBmx*, float)
	* Store(CBmx*, int)

CPacketBikeUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CBike*, float)
	* Store(CBike*, int)

CPacketPlaneUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CPlane*, float)
	* Store(CPlane*, int)

CPacketHeliUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CHeli*, float)
	* Store(CHeli*, int)

CPacketTrainUpdate (0 variables, 2 functions)
Variables list:

Functions list:
	* Extract(CTrain*, float)
	* Store(CTrain*, int)

CPlayerInfo (0 variables, 30 functions)
Variables list:

Functions list:
	* AddHealth(int)
	* ArrestPlayer()
	* BlowUpRCBuggy(bool)
	* CPlayerInfo()
	* CancelPlayerEnteringCars(CVehicle*)
	* Clear()
	* DeletePlayerSkin()
	* EvaluateCarPosition(CEntity*, CPed*, float, float*, CVehicle**)
	* FindClosestCarSectorList(CPtrList&, CPed*, float, float, float, float, float*, CVehicle**)
	* FindObjectToSteal(CPed*)
	* GetPos()
	* GetSpeed()
	* GivePlayerParachute()
	* IsPlayerInRemoteMode()
	* IsRestartingAfterArrest()
	* IsRestartingAfterDeath()
	* IsRestartingAfterMissionFailed()
	* KillPlayer()
	* Load()
	* LoadPlayerSkin()
	* MakePlayerSafe(bool, float)
	* PlayerFailedCriticalMission()
	* Process(int)
	* Save()
	* SetLastTargetVehicle(CVehicle*)
	* SetPlayerSkin(char const*)
	* StreamParachuteWeapon(bool)
	* WorkOutEnergyFromHunger()
	* operator=(CPlayerInfo const&)
	* ~CPlayerInfo()

CPlayerPedData (0 variables, 6 functions)
Variables list:

Functions list:
	* AllocateData()
	* CPlayerPedData()
	* DeAllocateData()
	* SetInitialState()
	* operator=(CPlayerPedData const&)
	* ~CPlayerPedData()

CRestart (21 variables, 11 functions)
Variables list:
	* ExtraHospitalRestartCoors
	* ExtraHospitalRestartHeading
	* ExtraHospitalRestartRadius
	* ExtraPoliceStationRestartCoors
	* ExtraPoliceStationRestartHeading
	* ExtraPoliceStationRestartRadius
	* HospitalRestartHeadings
	* HospitalRestartPoints
	* HospitalRestartWhenToUse
	* NumberOfHospitalRestarts
	* NumberOfPoliceRestarts
	* OverrideHeading
	* OverridePosition
	* OverrideRespawnBasePointForMission
	* PoliceRestartHeadings
	* PoliceRestartPoints
	* PoliceRestartWhenToUse
	* bFadeInAfterNextArrest
	* bFadeInAfterNextDeath
	* bOverrideRespawnBasePointForMission
	* bOverrideRestart

Functions list:
	* AddHospitalRestartPoint(CVector const&, float, int)
	* AddPoliceRestartPoint(CVector const&, float, int)
	* CancelOverrideRestart()
	* ClearRespawnPointForDurationOfMission()
	* FindClosestHospitalRestartPoint(CVector, CVector*, float*)
	* FindClosestPoliceRestartPoint(CVector, CVector*, float*)
	* Initialise()
	* Load()
	* OverrideNextRestart(CVector const&, float)
	* Save()
	* SetRespawnPointForDurationOfMission(CVector)

CRoadBlocks (5 variables, 8 functions)
Variables list:
	* InOrOut
	* NumRoadBlocks
	* RoadBlockNodes
	* aScriptRoadBlocks
	* bGenerateDynamicRoadBlocks

Functions list:
	* ClearScriptRoadBlocks()
	* ClearSpaceForRoadBlockObject(CVector, CVector)
	* CreateRoadBlockBetween2Points(CVector, CVector, unsigned int)
	* GenerateRoadBlockPedsForCar(CVehicle*, int, ePedType)
	* GenerateRoadBlocks()
	* GetRoadBlockNodeInfo(CNodeAddress, float&, CVector&)
	* Init()
	* RegisterScriptRoadBlock(CVector, CVector, bool)

CPointRoute (0 variables, 3 functions)
Variables list:

Functions list:
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CPointRoute()

CPatrolRoute (0 variables, 5 functions)
Variables list:

Functions list:
	* CPatrolRoute()
	* Reverse()
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CPatrolRoute()

CNodeRoute (0 variables, 2 functions)
Variables list:

Functions list:
	* operator delete(void*)
	* operator new(unsigned int)

CMissionCleanup (0 variables, 8 functions)
Variables list:

Functions list:
	* AddEntityToList(int, unsigned char)
	* CMissionCleanup()
	* CheckIfCollisionHasLoadedForMissionObjects()
	* DoFadeScrewUpCheck()
	* FindFree()
	* Init()
	* Process()
	* RemoveEntityFromList(int, unsigned char)

CUpsideDownCarCheck (0 variables, 8 functions)
Variables list:

Functions list:
	* AddCarToCheck(int)
	* AreAnyCarsUpsideDown()
	* HasCarBeenUpsideDownForAWhile(int)
	* Init()
	* IsCarUpsideDown(CVehicle const*)
	* IsCarUpsideDown(int)
	* RemoveCarFromCheck(int)
	* UpdateTimers()

CStuckCarCheck (0 variables, 9 functions)
Variables list:

Functions list:
	* AddCarToCheck(int, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, signed char)
	* AttemptToWarpVehicle(CVehicle*, CVector&, float)
	* ClearStuckFlagForCar(int)
	* HasCarBeenStuckForAWhile(int)
	* Init()
	* IsCarInStuckCarArray(int)
	* Process()
	* RemoveCarFromCheck(int)
	* ResetArrayElement(unsigned short)

CRunningScript (0 variables, 68 functions)
Variables list:

Functions list:
	* AddScriptToList(CRunningScript**)
	* CanAllowMissionReplay()
	* CarInAreaCheckCommand(int)
	* CharInAngledAreaCheckCommand(int)
	* CharInAreaCheckCommand(int)
	* CollectNextParameterWithoutIncreasingPC()
	* CollectParameters(short)
	* DoDeatharrestCheck()
	* FlameInAngledAreaCheckCommand(int)
	* GetCorrectPedModelIndexForEmergencyServiceType(int, int*)
	* GetIndexOfGlobalVariable()
	* GetPadState(unsigned short, unsigned short)
	* GetPointerToLocalArrayElement(unsigned int, unsigned short, unsigned char)
	* GetPointerToLocalVariable(unsigned int)
	* GetPointerToScriptVariable(unsigned char)
	* GivePedScriptedTask(int, CTask*, int)
	* Init()
	* IsPedDead(CPed*)
	* LocateCarCommand(int)
	* LocateCharCarCommand(int)
	* LocateCharCharCommand(int)
	* LocateCharCommand(int)
	* LocateCharObjectCommand(int)
	* LocateObjectCommand(int)
	* ObjectInAngledAreaCheckCommand(int)
	* ObjectInAreaCheckCommand(int)
	* PlayAnimScriptCommand(int)
	* Process()
	* ProcessCommands0To99(int)
	* ProcessCommands1000To1099(int)
	* ProcessCommands100To199(int)
	* ProcessCommands1100To1199(int)
	* ProcessCommands1200To1299(int)
	* ProcessCommands1300To1399(int)
	* ProcessCommands1400To1499(int)
	* ProcessCommands1500To1599(int)
	* ProcessCommands1600To1699(int)
	* ProcessCommands1700To1799(int)
	* ProcessCommands1800To1899(int)
	* ProcessCommands1900To1999(int)
	* ProcessCommands2000To2099(int)
	* ProcessCommands200To299(int)
	* ProcessCommands2100To2199(int)
	* ProcessCommands2200To2299(int)
	* ProcessCommands2300To2399(int)
	* ProcessCommands2400To2499(int)
	* ProcessCommands2500To2599(int)
	* ProcessCommands2600To2699(int)
	* ProcessCommands300To399(int)
	* ProcessCommands400To499(int)
	* ProcessCommands500To599(int)
	* ProcessCommands600To699(int)
	* ProcessCommands700To799(int)
	* ProcessCommands800To899(int)
	* ProcessCommands900To999(int)
	* ProcessOneCommand()
	* ReadArrayInformation(int, unsigned short*, int*)
	* ReadParametersForNewlyStartedScript(CRunningScript*)
	* ReadTextLabelFromScript(char*, unsigned char)
	* RemoveScriptFromList(CRunningScript**)
	* ScriptTaskPickUpObject(int)
	* SetCharCoordinates(CPed*, float, float, float, bool, bool)
	* ShutdownThisScript()
	* StoreParameters(short)
	* ThisIsAValidRandomCop(unsigned int, int, int, int, int, int)
	* ThisIsAValidRandomPed(unsigned int, int, int, int)
	* UpdateCompareFlag(unsigned char)
	* UpdatePC(int)

CTheScripts (83 variables, 84 functions)
Variables list:
	* BuildingSwapArray
	* CardStack
	* CardStackPosition
	* CommandsExecuted
	* DbgFlag
	* EntitiesWaitingForScriptBrain
	* FailCurrentMission
	* ForceRandomCarModel
	* HideAllFrontEndMapBlips
	* IntroRectangles
	* IntroTextLines
	* InvisibilitySettingArray
	* LargestMissionScriptSize
	* LargestNumberOfMissionScriptLocalVariables
	* LastMissionPassedTime
	* LastRandomPedId
	* LocalVariablesForCurrentMission
	* MainScriptSize
	* MessageCentre
	* MessageWidth
	* MissionCleanUp
	* MultiScriptArray
	* NumberOfEntriesInSwitchTable
	* NumberOfEntriesStillToReadForSwitch
	* NumberOfExclusiveMissionScripts
	* NumberOfIntroRectanglesThisFrame
	* NumberOfIntroTextLinesThisFrame
	* NumberOfMissionScripts
	* NumberOfScriptCheckpoints
	* NumberOfScriptSearchLights
	* NumberOfUsedObjects
	* OnAMissionFlag
	* RadarShowBlipOnAllLevels
	* RadarZoomValue
	* RiotIntensity
	* ScriptAttachedAnimGroups
	* ScriptCheckpointArray
	* ScriptConnectLodsObjects
	* ScriptEffectSystemArray
	* ScriptPickupCycleIndex
	* ScriptResourceManager
	* ScriptSearchLightArray
	* ScriptSequenceTaskArray
	* ScriptSpace
	* ScriptSphereArray
	* ScriptSprites
	* ScriptsArray
	* ScriptsForBrains
	* ScriptsUpdated
	* StoreVehicleIndex
	* StoreVehicleWasRandom
	* StreamedScripts
	* StuckCars
	* SuppressedVehicleModels
	* SwitchDefaultAddress
	* SwitchDefaultExists
	* SwitchJumpTable
	* UpsideDownCars
	* UseTextCommands
	* UsedObjectArray
	* ValueToCheckInSwitchStatement
	* VehicleModelsBlockedByScript
	* bAddNextMessageToPreviousBriefs
	* bAlreadyRunningAMissionScript
	* bDisplayHud
	* bDisplayNonMiniGameHelpMessages
	* bDrawCrossHair
	* bDrawOddJobTitleBeforeFade
	* bDrawSubtitlesBeforeFade
	* bEnableCraneLower
	* bEnableCraneRaise
	* bEnableCraneRelease
	* bMiniGameInProgress
	* bPlayerHasMetDebbieHarry
	* bPlayerIsOffTheMap
	* bScriptHasFadedOut
	* bUseMessageFormatting
	* bUsingAMultiScriptFile
	* fCameraHeadingStepWhenPlayerIsAttached
	* fCameraHeadingWhenPlayerIsAttached
	* m_nMenuIndex
	* pActiveScripts
	* pIdleScripts

Functions list:
	* AddScriptCheckpoint(float, float, float, float, float, float, float, int)
	* AddScriptEffectSystem(FxSystem_c*)
	* AddScriptSearchLight(float, float, float, CEntity*, float, float, float, float, float)
	* AddScriptSphere(unsigned int, CVector, float)
	* AddToBuildingSwapArray(CBuilding*, int, int)
	* AddToInvisibilitySwapArray(CEntity*, bool)
	* AddToListOfConnectedLodObjects(CObject*, CObject*)
	* AddToListOfSpecialAnimGroupsAttachedToCharModels(int, char*)
	* AddToSuppressedCarModelArray(int)
	* AddToSwitchJumpTable(int, int)
	* AddToVehicleModelsBlockedByScript(int)
	* AddToWaitingForScriptBrainArray(CEntity*, short)
	* AttachSearchlightToSearchlightObject(int, CObject*, CObject*, CObject*, float, float, float)
	* CheckScriptVersion(int, char*)
	* CheckStreamedScriptVersion(RwStream*, char*)
	* CleanUpThisObject(CObject*)
	* CleanUpThisPed(CPed*)
	* CleanUpThisVehicle(CVehicle*)
	* ClearAllSuppressedCarModels()
	* ClearAllVehicleModelsBlockedByScript()
	* ClearSpaceForMissionEntity(CVector const&, CEntity*)
	* DoScriptSetupAfterPoolsHaveLoaded()
	* DrawDebugAngledCube(float, float, float, float, float, float, float, float, float, float)
	* DrawDebugAngledSquare(float, float, float, float, float, float, float, float)
	* DrawDebugCube(float, float, float, float, float, float)
	* DrawDebugSquare(float, float, float, float)
	* DrawScriptSpheres()
	* DrawScriptSpritesAndRectangles(unsigned char)
	* GetActualScriptThingIndex(int, unsigned char)
	* GetNewUniqueScriptThingIndex(int, unsigned char)
	* GetScriptIndexFromPointer(CRunningScript*)
	* GetUniqueScriptThingIndex(int, unsigned char)
	* HasCarModelBeenSuppressed(int)
	* HasVehicleModelBeenBlockedByScript(int)
	* HighlightImportantAngledArea(unsigned int, float, float, float, float, float, float, float, float, float)
	* HighlightImportantArea(unsigned int, float, float, float, float, float)
	* Init()
	* InitialiseAllConnectLodObjects()
	* InitialiseConnectLodObjects(unsigned short)
	* InitialiseSpecialAnimGroup(unsigned short)
	* InitialiseSpecialAnimGroupsAttachedToCharModels()
	* IsEntityWithinAnySearchLight(CEntity*, int*)
	* IsEntityWithinSearchLight(int, CEntity*)
	* IsPedStopped(CPed*)
	* IsPlayerOnAMission()
	* IsPointWithinSearchLight(CVector&, int)
	* IsVehicleStopped(CVehicle*)
	* Load()
	* LoadAfter()
	* MoveSearchLightBetweenTwoPoints(int, float, float, float, float, float, float, float)
	* MoveSearchLightToEntity(int, CEntity*, float)
	* MoveSearchLightToPointAndStop(int, float, float, float, float)
	* PrintListSizes()
	* Process()
	* ProcessAllSearchLights()
	* ProcessWaitingForScriptBrainArray()
	* ReadMultiScriptFileOffsetsFromScript()
	* ReadObjectNamesFromScript()
	* ReinitialiseSwitchStatementData()
	* RemoveFromSuppressedCarModelArray(int)
	* RemoveFromVehicleModelsBlockedByScript(int)
	* RemoveFromWaitingForScriptBrainArray(CEntity*, short)
	* RemoveScriptCheckpoint(int)
	* RemoveScriptEffectSystem(int)
	* RemoveScriptSearchLight(int)
	* RemoveScriptSphere(int)
	* RemoveScriptTextureDictionary()
	* RemoveThisPed(CPed*)
	* RenderAllSearchLights()
	* RenderTheScriptDebugLines()
	* Save()
	* SaveAfter()
	* ScriptAttachAnimGroupToCharModel(int, char*)
	* ScriptConnectLodsFunction(int, int)
	* ScriptDebugCircle2D(float, float, float, float, int)
	* ScriptDebugLine3D(float, float, float, float, float, float, unsigned int, unsigned int)
	* StartNewScript(unsigned char*)
	* StartNewScript(unsigned char*, unsigned short)
	* StartTestScript()
	* UndoBuildingSwaps()
	* UndoEntityInvisibilitySettings()
	* UpdateObjectIndices()
	* UseSwitchJumpTable(int*)
	* WipeLocalVariableMemoryForMissionScript()

CTaskSimpleNone (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleNone()

CTaskSimpleFinishBrain (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskSimpleFinishBrain()

CDecisionMakerTypes (4 variables, 13 functions)
Variables list:
	* ScriptReferenceIndex
	* m_bIsActive
	* m_pPedDecisionTypes
	* m_types

Functions list:
	* AddDecisionMaker(CDecisionMaker const&, unsigned char, unsigned char, int)
	* AddEventResponse(int, int, int, float*, int*)
	* CDecisionMakerTypes()
	* CopyDecisionMaker(int, int, unsigned char)
	* FlushDecisionMakerEventResponse(int, int)
	* HasResponse(CPed const&, int const*, int) const
	* Load()
	* LoadEventIndices()
	* LoadEventIndices(int*, char const*)
	* MakeDecision(CPed const&, int, int, bool, int, int, int, int, bool, short&, short&) const
	* MakeDecision(CPedGroup const&, int, int, bool, int, int, int, int) const
	* RemoveDecisionMaker(int)
	* Save()

CScriptsForBrains (0 variables, 15 functions)
Variables list:

Functions list:
	* AddNewScriptBrain(short, short, unsigned short, signed char, signed char, float)
	* AddNewStreamedScriptBrainForCodeUse(short, char*, signed char)
	* CScriptsForBrains()
	* CheckIfNewEntityNeedsScript(CEntity*, signed char, CPedGenerator*)
	* GetIndexOfScriptBrainWithThisName(char const*, signed char)
	* HasAttractorScriptBrainWithThisNameLoaded(char const*)
	* Init()
	* IsObjectWithinBrainActivationRange(CObject*, CVector const&)
	* MarkAttractorScriptBrainWithThisNameAsNoLongerNeeded(char const*)
	* RequestAttractorScriptBrainWithThisName(char const*)
	* StartAttractorScriptBrainWithThisName(char const*, CEntity*, unsigned char)
	* StartNewStreamedScriptBrain(unsigned char, CEntity*, unsigned char)
	* StartOrRequestNewStreamedScriptBrain(unsigned char, CEntity*, signed char, unsigned char)
	* StartOrRequestNewStreamedScriptBrainWithThisName(char const*, CEntity*, signed char)
	* SwitchAllObjectBrainsWithThisID(signed char, bool)

CTaskComplex (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskComplex()
	* GetSubTask() const
	* IsSimpleTask() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SetSubTask(CTask*)
	* ~CTaskComplex()

CTaskSimpleCarDriveTimed (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCarDriveTimed(CVehicle*, int)
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleCarDriveTimed()

CEntitySeekPosCalculator (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorStandard (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CTaskComplexClimb (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexClimb()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorStandard> (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexSeekEntity(CEntity*, int, int, float, float, float, unsigned char, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CScriptResourceManager (0 variables, 6 functions)
Variables list:

Functions list:
	* AddToResourceManager(int, unsigned int, CRunningScript*)
	* HasResourceBeenRequested(int, unsigned int)
	* Initialise()
	* Load()
	* RemoveFromResourceManager(int, unsigned int, CRunningScript*)
	* Save()

CStreamedScripts (0 variables, 12 functions)
Variables list:

Functions list:
	* FindStreamedScript(char const*)
	* FindStreamedScriptQuiet(char const*)
	* GetProperIndexFromIndexUsedByScript(short)
	* GetStreamedScriptFilename(unsigned short)
	* GetStreamedScriptWithThisStartAddress(unsigned char*)
	* Initialise()
	* LoadStreamedScript(RwStream*, int)
	* ReInitialise()
	* ReadStreamedScriptData()
	* RegisterScript(char const*)
	* RemoveStreamedScriptFromMemory(int)
	* StartNewStreamedScript(int)

CTaskSimpleRunAnim (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleRunAnim(AssocGroupId, AnimationId, float, bool)
	* CTaskSimpleRunAnim(AssocGroupId, AnimationId, float, int, char const*, bool)
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleRunAnim()

CTaskSimpleRunTimedAnim (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleRunTimedAnim(AssocGroupId, AnimationId, float, float, int, bool)
	* CTaskSimpleRunTimedAnim(AssocGroupId, AnimationId, float, float, int, int, char const*, bool)
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleRunTimedAnim()

CTaskSimpleCower (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleCower()

CTaskSimpleScratchHead (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleScratchHead()

CTaskSimpleUseAtm (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleUseAtm()

CTaskSimpleHandsUp (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHandsUp()

CTaskSimpleLookAbout (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleLookAbout()

CTaskSimpleSay (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleSay(int, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleSay()

CTaskSimplePause (0 variables, 6 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimplePause()

CPedIntelligence (8 variables, 68 functions)
Variables list:
	* ms_fFollowNodeThresholdDistance
	* ms_fSenseRange
	* ms_fSenseRangeOfGangPeds
	* ms_fSenseRangeOfMissionPeds
	* ms_iDesiredMoveState
	* ms_iNumCollisionFramesTolerance
	* ms_iStaticCountColPosToleranceSqr
	* ms_iStaticCounterStuckCount

Functions list:
	* AddEvent(CEvent&, bool)
	* AddInterestingEntity(CEntity*)
	* AddTaskDefault(CTask*, bool)
	* AddTaskEventResponseNonTemp(CTask*, bool)
	* AddTaskEventResponseTemp(CTask*, bool)
	* AddTaskPhysResponse(CTask*, bool)
	* AddTaskPrimary(CTask*, bool)
	* AddTaskPrimaryMaybeInGroup(CTask*, bool)
	* AddTaskSecondaryPartialAnim(CTask*)
	* AreFriends(CPed const&, CPed const&)
	* CPedIntelligence(CPed*)
	* CanSeeEntityWithLights(CEntity const*, bool) const
	* ClearTaskDuckSecondary()
	* ClearTasks(bool, bool)
	* FindRespectedFriendInInformRange()
	* FindTaskByType(int) const
	* FlushImmediately(bool)
	* FlushIntelligence()
	* GetEffectInUse() const
	* GetMoveStateFromGoToTask() const
	* GetTaskClimb() const
	* GetTaskDuck(bool) const
	* GetTaskFighting() const
	* GetTaskHold(bool) const
	* GetTaskInAir() const
	* GetTaskJetPack() const
	* GetTaskSwim() const
	* GetTaskThrow() const
	* GetTaskUseGun() const
	* GetUsingParachute() const
	* HasInterestingEntites()
	* IsFriendlyWith(CPed const&) const
	* IsInACarOrEnteringOne()
	* IsInHearingRange(CVector const&) const
	* IsInSeeingRange(CEntity*) const
	* IsInSeeingRange(CVector const&) const
	* IsInterestingEntity(CEntity*)
	* IsPedGoingForCarDoor()
	* IsPedGoingSomewhereOnFoot() const
	* IsRespondingToEvent(int) const
	* IsThreatenedBy(CPed const&) const
	* Load()
	* LookAtInterestingEntities()
	* Process()
	* ProcessAfterPreRender()
	* ProcessAfterProcCol()
	* ProcessEventHandler()
	* ProcessFirst()
	* ProcessStaticCounter()
	* RecordEventForScript(int, int)
	* RemoveAllInterestingEntities()
	* RemoveInterestingEntity(CEntity*)
	* Respects(CPed const&) const
	* RestorePedDecisionMakerType()
	* Save()
	* SetEffectInUse(C2dEffect*)
	* SetHearingRange(float)
	* SetPedDecisionMakerType(int)
	* SetPedDecisionMakerTypeInGroup(int)
	* SetSeeingRange(float)
	* SetTaskDuckSecondary(unsigned short)
	* SortAndStaggerAllPedsEventScannerTimers()
	* TestForStealthKill(CPed*, bool)
	* operator delete(void*)
	* operator delete(void*, int)
	* operator new(unsigned int)
	* operator new(unsigned int, int)
	* ~CPedIntelligence()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorRadiusAngleOffset> (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexSeekEntity(CEntity*, int, int, float, float, float, unsigned char, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CSetPieces (3 variables, 5 functions)
Variables list:
	* NumSetPieces
	* aSetPieces
	* bDebug

Functions list:
	* AddOne(unsigned char, CVector2D, CVector2D, CVector2D, CVector2D, CVector2D, CVector2D)
	* Init()
	* Load()
	* Save()
	* Update()

CSetPiece (0 variables, 3 functions)
Variables list:

Functions list:
	* TryToGenerateCopCar(CVector2D, CVector2D)
	* TryToGenerateCopPed(CVector2D)
	* Update()

CTaskComplexWanderCop (6 variables, 12 functions)
Variables list:
	* ms_fCrimeDetectionRange
	* ms_fCriminalRange
	* ms_fHasslePedRange
	* ms_iCriminalScanFreeTime
	* ms_iHasslePedFreeTime
	* ms_iScanPeriod

Functions list:
	* CTaskComplexWanderCop(int, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetWanderType() const
	* LookForCarAlarms(CPed*)
	* LookForCriminals(CPed*)
	* LookForStolenCopCars(CPed*)
	* ScanForStuff(CPed*)
	* ShouldPursuePlayer(CPed*) const
	* ~CTaskComplexWanderCop()

CTaskComplexBeCop (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* ~CTaskComplexBeCop()

CShopping (14 variables, 34 functions)
Variables list:
	* ms_bHasBought
	* ms_keys
	* ms_numBuyableItems
	* ms_numItemsInShop
	* ms_numPriceModifiers
	* ms_numPrices
	* ms_priceModifiers
	* ms_priceSectionLoaded
	* ms_prices
	* ms_sectionNames
	* ms_shopContents
	* ms_shopLoaded
	* ms_shopType
	* ms_statModifiers

Functions list:
	* AddPriceModifier(char const*, char const*, int)
	* AddPriceModifier(unsigned int, int)
	* Buy(unsigned int, int)
	* FindItem(unsigned int)
	* FindSection(int, char const*)
	* FindSectionInSection(int, char const*, char const*)
	* GetExtraInfo(unsigned int, int)
	* GetItemIndex(unsigned int)
	* GetKey(char const*, int)
	* GetNameTag(unsigned int)
	* GetNextSection(int)
	* GetPrice(unsigned int)
	* GetPriceSectionFromName(char const*)
	* HasPlayerBought(unsigned int)
	* IncrementStat(int, int)
	* IncrementStat2(int, int)
	* Init()
	* Load()
	* LoadPrices(char const*)
	* LoadShop(char const*)
	* LoadStats()
	* RemoveLoadedPrices()
	* RemoveLoadedShop()
	* RemovePriceModifier(char const*, char const*)
	* RemovePriceModifier(unsigned int)
	* RestoreClothesState()
	* RestoreVehicleMods()
	* Save()
	* SetCurrentProperty(CMultiBuilding*)
	* SetPlayerHasBought(unsigned int)
	* ShutdownForRestart()
	* StoreClothesState()
	* StoreVehicleMods()
	* UpdateStats(int, bool)

CBoundBox (0 variables, 1 functions)
Variables list:

Functions list:
	* IsPointWithin(CVector const&)

CStuntJumpManager (8 variables, 9 functions)
Variables list:
	* m_bActive
	* m_bHitReward
	* m_iNumCompleted
	* m_iNumJumps
	* m_iTimer
	* m_jumpState
	* mp_Active
	* mp_poolStuntJumps

Functions list:
	* AddOne(CBoundBox const&, CBoundBox const&, CVector const&, int)
	* Init()
	* Load()
	* Render()
	* Save()
	* SetActive(bool)
	* Shutdown()
	* ShutdownForRestart()
	* Update()

CTagManager (3 variables, 20 functions)
Variables list:
	* ms_numTagged
	* ms_numTags
	* ms_tagDesc

Functions list:
	* AddTag(CEntity*)
	* FindTagDesc(CEntity*)
	* GetAlpha(CEntity*)
	* GetAlpha(RpAtomic*)
	* GetNearestTag(CVector const&)
	* GetPercentageTagged()
	* GetPercentageTaggedInArea(CRect&)
	* GetTagPos(int)
	* Init()
	* IsTag(CEntity const*)
	* Load()
	* RenderTagForPC(RpAtomic*)
	* ResetAlpha(CEntity*)
	* Save()
	* SetAlpha(CEntity*, unsigned char)
	* SetAlpha(RpAtomic*, unsigned char)
	* SetAlphaInArea(CRect&, unsigned char)
	* SetupAtomic(RpAtomic*)
	* ShutdownForRestart()
	* UpdateNumTagged()

CTrafficLights (0 variables, 12 functions)
Variables list:

Functions list:
	* DisplayActualLight(CEntity*)
	* FindOrientationForTrafficLightType(CEntity*)
	* FindTrafficLightType(CEntity*)
	* FindTrafficLightTypeFromOrientation(float)
	* IsMITrafficLight(int)
	* LightForCars1()
	* LightForCars1_Visual()
	* LightForCars2()
	* LightForCars2_Visual()
	* LightForPeds()
	* ShouldCarStopForBridge(CVehicle*)
	* ShouldCarStopForLight(CVehicle*, bool)

Fx_c (0 variables, 36 functions)
Variables list:

Functions list:
	* AddBlood(CVector&, CVector&, int, float)
	* AddBulletImpact(CVector&, CVector&, int, int, float)
	* AddDebris(CVector&, RwRGBA&, float, int)
	* AddGlass(CVector&, RwRGBA&, float, int)
	* AddPunchImpact(CVector&, CVector&, int)
	* AddSparks(CVector&, CVector&, float, int, CVector, unsigned char, float, float)
	* AddTyreBurst(CVector&, CVector&)
	* AddWheelDust(CVehicle*, CVector, unsigned char, float)
	* AddWheelGrass(CVehicle*, CVector, unsigned char, float)
	* AddWheelGravel(CVehicle*, CVector, unsigned char, float)
	* AddWheelMud(CVehicle*, CVector, unsigned char, float)
	* AddWheelSand(CVehicle*, CVector, unsigned char, float)
	* AddWheelSpray(CVehicle*, CVector, unsigned char, unsigned char, float)
	* AddWood(CVector&, CVector&, int, float)
	* CreateEntityFx(CEntity*, char*, RwV3d*, RwMatrixTag*)
	* CreateMatFromVec(RwMatrixTag*, CVector*, CVector*)
	* DestroyEntityFx(CEntity*)
	* Exit()
	* ExitEntitySystems()
	* ExitStaticSystems()
	* Fx_c()
	* GetFxQuality()
	* Init()
	* InitEntitySystems()
	* InitStaticSystems()
	* Render(RwCamera*, unsigned char)
	* Reset()
	* SetFxQuality(FxQuality_e)
	* TriggerBulletSplash(CVector&)
	* TriggerFootSplash(CVector&)
	* TriggerGunshot(CEntity*, CVector&, CVector&, bool)
	* TriggerTankFire(CVector&, CVector&)
	* TriggerWaterHydrant(CVector&)
	* TriggerWaterSplash(CVector&)
	* Update(RwCamera*, float)
	* ~Fx_c()

FxEmitter_c (0 variables, 8 functions)
Variables list:

Functions list:
	* AddParticle(RwMatrixTag*, RwV3d*, float, FxPrtMult_c*, float, float, unsigned char)
	* AddParticle(RwV3d*, RwV3d*, float, FxPrtMult_c*, float, float, unsigned char)
	* CreateParticle(EmissionInfo_t*, RwMatrixTag*, RwV3d*, float, FxPrtMult_c*, float, unsigned char)
	* CreateParticles(float, float)
	* Init(FxPrimBP_c*, FxSystem_c*)
	* Reset()
	* Update(float, float)
	* ~FxEmitter_c()

FxEmitterBP_c (0 variables, 12 functions)
Variables list:

Functions list:
	* CreateInstance()
	* FreePrtFromPrim(FxSystem_c*)
	* FxEmitterBP_c()
	* IsFxInfoPresent(int)
	* Load(int, int, FxName32_t*)
	* LoadTextures(FxName32_t*, int)
	* Render(RwCamera*, unsigned int, float, unsigned char)
	* RenderHeatHaze(RwCamera*, unsigned int, float)
	* Update(float)
	* UpdateParticle(float, FxEmitterPrt_c*)
	* operator new(unsigned int)
	* ~FxEmitterBP_c()

FxEmitterPrt_c (0 variables, 1 functions)
Variables list:

Functions list:
	* operator new[](unsigned int)

FxInfoFloat_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoFloat_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoFloat_c()

FxInfoUnderwater_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoUnderwater_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoUnderwater_c()

FxInfoHeatHaze_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoHeatHaze_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoHeatHaze_c()

FxInfoSelfLit_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoSelfLit_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoSelfLit_c()

FxInfoSmoke_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoSmoke_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoSmoke_c()

FxInfoColourBright_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoColourBright_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoColourBright_c()

FxInfoColourRange_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoColourRange_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoColourRange_c()

FxInfoTrail_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoTrail_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoTrail_c()

FxInfoColour_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoColour_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoColour_c()

FxInfoEmLife_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmLife_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmLife_c()

FxInfoAnimTexture_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoAnimTexture_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoAnimTexture_c()

FxInfoSize_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoSize_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoSize_c()

FxInfoWind_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoWind_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoWind_c()

FxInfoForce_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoForce_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoForce_c()

FxInfoEmDir_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmDir_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmDir_c()

FxInfoEmSpeed_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmSpeed_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmSpeed_c()

FxInfoEmSize_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmSize_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmSize_c()

FxInfoJitter_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoJitter_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoJitter_c()

FxInfoGroundCollide_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoGroundCollide_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoGroundCollide_c()

FxInfoAttractLine_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoAttractLine_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoAttractLine_c()

FxInfoAttractPt_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoAttractPt_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoAttractPt_c()

FxInfoFriction_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoFriction_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoFriction_c()

FxInfoNoise_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoNoise_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoNoise_c()

FxInfoRotSpeed_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoRotSpeed_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoRotSpeed_c()

FxInfoEmRotation_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmRotation_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmRotation_c()

FxInfoEmWeather_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmWeather_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmWeather_c()

FxInfoEmPos_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmPos_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmPos_c()

FxInfoEmAngle_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmAngle_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmAngle_c()

FxInfoDir_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoDir_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoDir_c()

FxInfoFlat_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoFlat_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoFlat_c()

FxInfoEmRate_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoEmRate_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoEmRate_c()

FxInfoSpriteRect_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInfoSpriteRect_c()
	* GetValue(float, float, float, float, unsigned char, void*)
	* Load(int, int)
	* ~FxInfoSpriteRect_c()

FxInfo_c (0 variables, 1 functions)
Variables list:

Functions list:
	* ~FxInfo_c()

FxInfoManager_c (0 variables, 6 functions)
Variables list:

Functions list:
	* AddFxInfo(int)
	* Load(int, int)
	* ProcessEmissionInfo(float, float, float, unsigned char, EmissionInfo_t*)
	* ProcessMovementInfo(float, float, float, float, unsigned char, MovementInfo_t*)
	* ProcessRenderInfo(float, float, float, float, unsigned char, RenderInfo_t*)
	* ~FxInfoManager_c()

FxInterpInfo_c (0 variables, 2 functions)
Variables list:

Functions list:
	* FxInterpInfo_c()
	* ~FxInterpInfo_c()

FxInterpInfoFloat_c (0 variables, 5 functions)
Variables list:

Functions list:
	* FxInterpInfoFloat_c()
	* GetVal(float*, float)
	* GetVal(int, float, float)
	* Load(int)
	* ~FxInterpInfoFloat_c()

FxInterpInfoU255_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInterpInfoU255_c()
	* GetVal(float*, float)
	* Load(int)
	* ~FxInterpInfoU255_c()

FxInterpInfo32_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInterpInfo32_c()
	* GetVal(float*, float)
	* Load(int)
	* ~FxInterpInfo32_c()

FxInterpInfo255_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxInterpInfo255_c()
	* GetVal(float*, float)
	* Load(int)
	* ~FxInterpInfo255_c()

ListItem_c (0 variables, 2 functions)
Variables list:

Functions list:
	* ListItem_c()
	* ~ListItem_c()

List_c (0 variables, 14 functions)
Variables list:

Functions list:
	* AddItem(ListItem_c*)
	* AppendItem(ListItem_c*)
	* GetItemOffset(unsigned char, int)
	* GetNumItems()
	* GetPrev(ListItem_c*)
	* GetTail()
	* InsertAfterItem(ListItem_c*, ListItem_c*)
	* InsertBeforeItem(ListItem_c*, ListItem_c*)
	* List_c()
	* RemoveAll()
	* RemoveHead()
	* RemoveItem(ListItem_c*)
	* RemoveTail()
	* ~List_c()

FxManager_c (0 variables, 25 functions)
Variables list:

Functions list:
	* CalcFrustumInfo(RwCamera*)
	* CreateFxSystem(FxSystemBP_c*, RwMatrixTag*, RwMatrixTag*, unsigned char)
	* CreateFxSystem(FxSystemBP_c*, RwV3d*, RwMatrixTag*, unsigned char)
	* CreateFxSystem(char*, RwMatrixTag*, RwMatrixTag*, unsigned char)
	* CreateFxSystem(char*, RwV3d*, RwMatrixTag*, unsigned char)
	* DestroyAllFxSystems()
	* DestroyFxSystem(FxSystem_c*)
	* Exit()
	* FindFxSystemBP(char*)
	* FreeUpParticle()
	* FxManager_c()
	* FxRwMatrixCreate()
	* FxRwMatrixDestroy(RwMatrixTag*)
	* GetFrustumInfo()
	* GetParticle(signed char)
	* Init()
	* LoadFxProject(char*)
	* LoadFxSystemBP(char*, int)
	* Render(RwCamera*, unsigned char)
	* ReturnParticle(FxEmitterPrt_c*)
	* SetWindData(RwV3d*, float*)
	* ShouldCreate(FxSystemBP_c*, RwMatrixTag*, RwMatrixTag*, unsigned char)
	* UnloadFxProject()
	* Update(RwCamera*, float)
	* ~FxManager_c()

FxMemoryPool_c (0 variables, 7 functions)
Variables list:

Functions list:
	* Exit()
	* FxMemoryPool_c()
	* GetMem(int, int)
	* Init()
	* Optimise()
	* Reset()
	* ~FxMemoryPool_c()

FxPrimBP_c (0 variables, 4 functions)
Variables list:

Functions list:
	* FxPrimBP_c()
	* GetRWMatrix(RwMatrixTag*)
	* Load(int, int, FxName32_t*)
	* ~FxPrimBP_c()

FxPrim_c (0 variables, 3 functions)
Variables list:

Functions list:
	* Enable(unsigned char)
	* FxPrim_c()
	* ~FxPrim_c()

FxSystem_c (0 variables, 36 functions)
Variables list:

Functions list:
	* AddOffsetPos(RwV3d*)
	* AddParticle(RwMatrixTag*, RwV3d*, float, FxPrtMult_c*, float, float, float, unsigned char)
	* AddParticle(RwV3d*, RwV3d*, float, FxPrtMult_c*, float, float, float, unsigned char)
	* AttachToBone(CEntity*, int)
	* CopyParentMatrix()
	* DoFxAudio(CVector)
	* EnablePrim(int, unsigned char)
	* Exit()
	* ForAllParticles(void (*)(Particle_c*, int, void**), void*)
	* FxSystem_c()
	* GetBoundingBox(FxBox_c*)
	* GetBoundingSphereLcl(FxSphere_c*)
	* GetBoundingSphereWld(FxSphere_c*)
	* GetCompositeMatrix(RwMatrixTag*)
	* GetPlayStatus()
	* Init(FxSystemBP_c*, RwMatrixTag*, RwMatrixTag*)
	* IsVisible()
	* Kill()
	* Pause()
	* Play()
	* PlayAndKill()
	* ResetBoundingSphere()
	* SetBoundingSphere(FxSphere_c*)
	* SetConstTime(unsigned char, float)
	* SetLocalParticles(unsigned char)
	* SetMatrix(RwMatrixTag*)
	* SetMustCreatePrts(unsigned char)
	* SetOffsetPos(RwV3d*)
	* SetRateMult(float)
	* SetTimeMult(float)
	* SetVelAdd(RwV3d*)
	* SetZTestEnable(unsigned char)
	* Stop()
	* Update(RwCamera*, float)
	* UpdateBoundingBoxCB(Particle_c*, int, void**)
	* ~FxSystem_c()

FxSphere_c (0 variables, 5 functions)
Variables list:

Functions list:
	* FxSphere_c()
	* GetDistToPlane(FxPlane_c*)
	* IsCollision(FxSphere_c*)
	* operator delete(void*)
	* operator new(unsigned int, int)

FxFrustumInfo_c (0 variables, 1 functions)
Variables list:

Functions list:
	* IsCollision(FxSphere_c*)                      #

FxSystemBP_c (0 variables, 10 functions)
Variables list:

Functions list:
	* FreePrtFromSystem(FxSystem_c*)
	* FxSystemBP_c()                                #
	* GetBoundingSphere()
	* Load(char*, int, int)
	* Render(RwCamera*, float, unsigned char)       #
	* SetBoundingSphere(RwV3d*, float)
	* Unload()
	* Update(float)                                 #
	* operator new(unsigned int)                    #
	* ~FxSystemBP_c()                               #

FxPrtMult_c (0 variables, 3 functions)
Variables list:

Functions list:
	* FxPrtMult_c()                                                 #
	* FxPrtMult_c(float, float, float, float, float, float, float)  #
	* SetUp(float, float, float, float, float, float, float)        #

CEventGroup (0 variables, 13 functions)
Variables list:

Functions list:
	* Add(CEvent&, bool)                        #
	* CEventGroup(CPed*)                        #
	* Flush(bool)                               #
	* GetEventOfType(int) const                 #
	* GetHighestPriorityEvent() const           #
	* HasEvent(CEvent const*) const             #       
	* HasEventOfType(CEvent const*) const       #
	* HasScriptCommandOfTaskType(int) const     #
	* Remove(CEvent*)                           #
	* RemoveInvalidEvents(bool)                 #
	* Reorganise()                              #
	* TickEvents()                              #
	* ~CEventGroup()                            #

CEventGlobalGroup (0 variables, 5 functions)
Variables list:

Functions list:
	* AddEventsToGroup(CPedGroup*)              #
	* AddEventsToPed(CPed*)                     #
	* CEventGlobalGroup()                       #
	* GetSoundLevel(CEntity*, CVector&)         #
	* ~CEventGlobalGroup()                      #

CEventGunShot (1 variables, 13 functions)
Variables list:
	* ms_fGunShotSenseRangeForRiot2

Functions list:
	* AffectsPed(CPed*) const
	* CEventGunShot(CEntity*, CVector, CVector, bool)
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* IsCriminalEvent() const
	* ReportCriminalEvent(CPed*) const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventGunShot()

CEventVehicleCollision (4 variables, 8 functions)
Variables list:
	* ms_fDamageThresholdSpeed
	* ms_fHighDamageImpulseThreshold
	* ms_fLowDamageImpulseThreshold
	* ms_fMaxPlayerImpulse

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleCollision(unsigned short, float, CVehicle const*, CVector const&, CVector const&, int, unsigned short)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventVehicleCollision()

CEventObjectCollision (1 variables, 9 functions)
Variables list:
	* ms_fStraightAheadDotProduct

Functions list:
	* AffectsPed(CPed*) const
	* CEventObjectCollision(unsigned short, float, CObject const*, CVector const&, CVector const&, int)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsHeadOnCollision(CPed const&) const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventObjectCollision()

CEventBuildingCollision (3 variables, 11 functions)
Variables list:
	* ms_fMaxTreatBuildingAsObjectHeight
	* ms_fMaxTreatBuildingAsObjectSize
	* ms_fStraightAheadDotProduct

Functions list:
	* AffectsPed(CPed*) const
	* CEventBuildingCollision(unsigned short, float, CBuilding const*, CVector const&, CVector const&, int)
	* CanBeInterruptedBySameEvent() const
	* CanTreatBuildingAsObject(CBuilding const&)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsHeadOnCollision(CPed const&) const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventBuildingCollision()

CEventDamage (0 variables, 24 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEventDamage(CEntity*, unsigned int, eWeaponType, ePedPieceTypes, unsigned char, bool, bool)
	* CEventDamage(CEventDamage const&)
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* ComputeBodyPartToRemove(int&) const
	* ComputeDamageAnim(CPed*, bool)
	* ComputeDeathAnim(CPed*, bool)
	* ComputeHeadShot(bool&) const
	* DoInformVehicleOccupants(CPed*) const
	* From(CEventDamage const&)
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* IsCriminalEvent() const
	* IsSameEventForAI(CEventDamage*)
	* ProcessDamage(CPed*) const
	* ReportCriminalEvent(CPed*) const
	* TakesPriorityOver(CEvent const&) const
	* operator=(CEventDamage const&)
	* ~CEventDamage()

CEventDeath (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventDeath(bool)
	* CEventDeath(bool, int)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventDeath()

CEventGroupEvent (0 variables, 10 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* BaseEventTakesPriorityOverBaseEvent(CEventGroupEvent const&) const
	* CEventGroupEvent(CPed*, CEvent*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* ~CEventGroupEvent()

CEventPotentialWalkIntoVehicle (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPotentialWalkIntoVehicle(CVehicle*, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventPotentialWalkIntoVehicle()

CEventPotentialWalkIntoObject (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPotentialWalkIntoObject(CObject*, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventPotentialWalkIntoObject()

CEventRevived (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventRevived()
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventRevived()

CEventKnockOffBike (0 variables, 17 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventKnockOffBike()
	* CEventKnockOffBike(CEventKnockOffBike const&)
	* CEventKnockOffBike(CVehicle*, CVector const&, CVector const&, float, float, eWeaponType, signed char, int, CPed*, bool, bool)
	* CalcForcesAndAnims(CPed*)
	* Clone() const
	* From(CEventKnockOffBike const&)
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* IsCriminalEvent() const
	* ReportCriminalEvent(CPed*) const
	* SetPedOutCar(CPed*)
	* SetPedSafePosition(CPed*)
	* operator=(CEventKnockOffBike const&)
	* ~CEventKnockOffBike()

CEventScriptCommand (0 variables, 10 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventScriptCommand(int, CTask*, bool)
	* Clone() const
	* CloneScriptTask() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsValid(CPed*) const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventScriptCommand()

CEventInAir (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventInAir()
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventInAir()

CEventLeaderEnteredCarAsDriver (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventLeaderEnteredCarAsDriver()

CEventLeaderExitedCarAsDriver (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventLeaderExitedCarAsDriver()

CEventLeaderQuitEnteringCarAsDriver (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventLeaderQuitEnteringCarAsDriver()

CEventHitByWaterCannon (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventHitByWaterCannon(CVector const&, CVector const&)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* ~CEventHitByWaterCannon()

CEventInWater (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventInWater(float)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventInWater()

CEventVehicleDamage (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleDamage(CVehicle*, CEntity*, eWeaponType)
	* GetEventPriority() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* IsCriminalEvent() const
	* ReportCriminalEvent(CPed*) const
	* ~CEventVehicleDamage()

CEventSpecial (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventSpecial()
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventSpecial()

CEventGotKnockedOverByCar (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventGotKnockedOverByCar(CVehicle*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventGotKnockedOverByCar()

CEventPotentialWalkIntoFire (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPotentialWalkIntoFire(CVector const&, float, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventPotentialWalkIntoFire()

CEventFireNearby (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventFireNearby(CVector const&)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventFireNearby()

CEventLeaderEntryExit (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPedGroup(CPedGroup*) const
	* CanBeInterruptedBySameEvent() const
	* Clone() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventLeaderEntryExit()

CEventPlayerCommandToGroup (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEventPlayerCommandToGroup(int, CPed*)
	* GetLifeTime() const
	* GetSourceEntity() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventPlayerCommandToGroup()

CEventEscalator (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventEscalator()

CEventDanger (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEventDanger(CEntity*, float)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* ~CEventDanger()

CEventHighAngerAtPlayer (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventHighAngerAtPlayer()

CEventLowAngerAtPlayer (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventLowAngerAtPlayer()

CEventHealthReallyLow (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventHealthReallyLow()

CEventHealthLow (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventHealthLow()

CEventVehicleThreat (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleThreat(CVehicle*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventVehicleThreat()

CEventPedToFlee (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPedToFlee(CPed*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventPedToFlee()

CEventPedToChase (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPedToChase(CPed*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventPedToChase()

CEventSexyVehicle (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventSexyVehicle(CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventSexyVehicle()

CEventChatPartner (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventChatPartner(bool, CPed*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventChatPartner()

CEventDraggedOutCar (0 variables, 10 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* AffectsPedGroup(CPedGroup*) const
	* CEventDraggedOutCar(CVehicle const*, CPed const*, bool)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventDraggedOutCar()

CEventAreaCodes (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventAreaCodes(CPed*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventAreaCodes()

CEventCopCarBeingStolen (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventCopCarBeingStolen(CPed*, CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventCopCarBeingStolen()

CEventStuckInAir (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventStuckInAir(CPed*)
	* CanBeInterruptedBySameEvent() const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventStuckInAir()

CEventVehicleDied (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleDied(CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventVehicleDied()

CEventVehicleToSteal (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleToSteal(CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventVehicleToSteal()

CEventVehicleHitAndRun (0 variables, 10 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleHitAndRun(CPed*, CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* IsCriminalEvent() const
	* ReportCriminalEvent(CPed*) const
	* ~CEventVehicleHitAndRun()

CEventPedCollisionWithPed (1 variables, 8 functions)
Variables list:
	* ms_fPedBrushKnockdown

Functions list:
	* AffectsPed(CPed*) const
	* CEventPedCollisionWithPed(unsigned short, float, CPed const*, CVector const&, CVector const&, int, int)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventPedCollisionWithPed()

CEventSeenPanickedPed (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventSeenPanickedPed(CPed*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* ~CEventSeenPanickedPed()

CEventVehicleOnFire (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventVehicleOnFire(CVehicle*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* ~CEventVehicleOnFire()

CEventGunAimedAt (0 variables, 12 functions)
Variables list:

Functions list:
	* AddGunAimedAtEventToVehicleOccupants(CVehicle const&, CPed*)
	* AffectsPed(CPed*) const
	* CEventGunAimedAt(CPed*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* IsCriminalEvent() const
	* ReportCriminalEvent(CPed*) const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventGunAimedAt()

CEventAttractor (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventAttractor(C2dEffect*, CEntity*, unsigned char)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsEffectActive(CEntity const*, C2dEffect const*)
	* ~CEventAttractor()

CEventSexyPed (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventSexyPed(CPed*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* ~CEventSexyPed()

CEventPedEnteredMyVehicle (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPedEnteredMyVehicle(CPed const*, CVehicle const*, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventPedEnteredMyVehicle()

CEventPotentialWalkIntoPed (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPotentialWalkIntoPed(CPed*, CVector const&, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetSourceEntity() const
	* TakesPriorityOver(CEvent const&) const
	* ~CEventPotentialWalkIntoPed()

CEventPotentialGetRunOver (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPotentialGetRunOver(CVehicle*)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventPotentialGetRunOver()

CEventDeadPed (2 variables, 9 functions)
Variables list:
	* ms_fNoticeDeadPedRange
	* ms_fNoticeStealthDeadPedRange

Functions list:
	* AffectsPed(CPed*) const
	* CEventDeadPed(CPed*, bool, int)
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventDeadPed()

CEventGunShotWhizzedBy (1 variables, 8 functions)
Variables list:
	* ms_fThresholdDist

Functions list:
	* AffectsPed(CPed*) const
	* CEventGunShotWhizzedBy(CEntity*, CVector const&, CVector const&, bool)
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventGunShotWhizzedBy()

CEventCarUpsideDown (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventCarUpsideDown(CVehicle*)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventCarUpsideDown()

CEventPassObject (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CEventPassObject(CPed*, unsigned char)
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsValid(CPed*) const
	* ~CEventPassObject()

CEventLeanOnVehicle (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsValid(CPed*) const
	* ~CEventLeanOnVehicle()

CEventSignalAtPed (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsValid(CPed*) const
	* ~CEventSignalAtPed()

CEventInteriorUseInfo (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* IsValid(CPed*) const
	* ~CEventInteriorUseInfo()

CEventSeenCop (0 variables, 5 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventSeenCop()

CEventPlayerCommandToGroupAttack (0 variables, 5 functions)
Variables list:

Functions list:
	* AffectsPedGroup(CPedGroup*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventPlayerCommandToGroupAttack()

CEventOnFire (0 variables, 7 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* ~CEventOnFire()

CEventAcquaintancePedHateBadlyLit (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventAcquaintancePedHateBadlyLit()

CEventPotentialWalkIntoBuilding (0 variables, 5 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventPotentialWalkIntoBuilding()

CEventSoundLoud (0 variables, 8 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventSoundLoud()

CEventSoundQuiet (0 variables, 9 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* CanBeInterruptedBySameEvent() const
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* GetLocalSoundLevel() const
	* GetSourceEntity() const
	* ~CEventSoundQuiet()

CInformFriendsEvent (0 variables, 5 functions)
Variables list:

Functions list:
	* CInformFriendsEvent()
	* Flush()
	* Process()
	* Set(CPed*, CEvent*, int)
	* ~CInformFriendsEvent()

CInformFriendsEventQueue (1 variables, 6 functions)
Variables list:
	* ms_informFriendsEvents

Functions list:
	* Add(CPed*, CEvent*)
	* CInformFriendsEventQueue()
	* Flush()
	* Init()
	* Process()
	* ~CInformFriendsEventQueue()

CInformGroupEvent (0 variables, 5 functions)
Variables list:

Functions list:
	* CInformGroupEvent()
	* Flush()
	* Process()
	* Set(CPed*, CPedGroup*, CEvent*, int)
	* ~CInformGroupEvent()

CInformGroupEventQueue (1 variables, 6 functions)
Variables list:
	* ms_informGroupEvents

Functions list:
	* Add(CPed*, CPedGroup*, CEvent*)
	* CInformGroupEventQueue()
	* Flush()
	* Init()
	* Process()
	* ~CInformGroupEventQueue()

CPedDamageResponseCalculator (1 variables, 9 functions)
Variables list:
	* ms_fStealthKillDamage

Functions list:
	* AccountForPedArmour(CPed*, CPedDamageResponse&)
	* AccountForPedDamageStats(CPed*, CPedDamageResponse&)
	* AdjustPedDamage(CPed*)
	* CPedDamageResponseCalculator(CEntity const*, float, eWeaponType, ePedPieceTypes, bool)
	* ComputeDamageResponse(CPed*, CPedDamageResponse&, bool)
	* ComputeWillForceDeath(CPed*, CPedDamageResponse&)
	* ComputeWillKillPed(CPed*, CPedDamageResponse&, bool)
	* IsBleedingWeapon(CPed*)
	* ~CPedDamageResponseCalculator()

CEventSource (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEventSourceType(CEvent const&, CPed const&)

CEventHandlerHistory (0 variables, 13 functions)
Variables list:

Functions list:
	* ClearAllEvents()
	* ClearNonTempEvent()
	* ClearTempEvent()
	* Flush()
	* GetCurrentEvent() const
	* GetCurrentEventPriority() const
	* GetStoredActiveEvent() const
	* IsRespondingToEvent(int) const
	* RecordCurrentEvent(CPed*, CEvent const&)
	* StoreActiveEvent()
	* TakesPriorityOverCurrentEvent(CEvent const&)
	* TickStoredEvent(CPed*)
	* ~CEventHandlerHistory()

CEventHandler (0 variables, 76 functions)
Variables list:

Functions list:
	* CEventHandler(CPed*)
	* ComputeAreaCodesResponse(CEvent*, CTask*, CTask*)
	* ComputeAttractorResponse(CEvent*, CTask*, CTask*)
	* ComputeBuildingCollisionPassiveResponse(CEvent*, CTask*, CTask*)
	* ComputeBuildingCollisionResponse(CEvent*, CTask*, CTask*)
	* ComputeCarUpsideDownResponse(CEvent*, CTask*, CTask*)
	* ComputeChatPartnerResponse(CEvent*, CTask*, CTask*)
	* ComputeCopCarBeingStolenResponse(CEvent*, CTask*, CTask*)
	* ComputeCreatePartnerTaskResponse(CEvent*, CTask*, CTask*)
	* ComputeDamageResponse(CEvent*, CTask*, CTask*, CTask*)
	* ComputeDangerResponse(CEvent*, CTask*, CTask*)
	* ComputeDeadPedResponse(CEvent*, CTask*, CTask*)
	* ComputeDeathResponse(CEvent*, CTask*, CTask*)
	* ComputeDontJoinGroupResponse(CEvent*, CTask*, CTask*)
	* ComputeDraggedOutCarResponse(CEvent*, CTask*, CTask*)
	* ComputeEventResponseTask(CEvent*, CTask*)
	* ComputeEventResponseTask(CPed const&, CEvent const&)
	* ComputeFireNearbyResponse(CEvent*, CTask*, CTask*)
	* ComputeGotKnockedOverByCarResponse(CEvent*, CTask*, CTask*)
	* ComputeGunAimedAtResponse(CEvent*, CTask*, CTask*)
	* ComputeHighAngerAtPlayerResponse(CEvent*, CTask*, CTask*)
	* ComputeInWaterResponse(CEvent*, CTask*, CTask*)
	* ComputeInteriorUseInfoResponse(CEvent*, CTask*, CTask*)
	* ComputeKnockOffBikeResponse(CEvent*, CTask*, CTask*)
	* ComputeLowAngerAtPlayerResponse(CEvent*, CTask*, CTask*)
	* ComputeLowHealthResponse(CEvent*, CTask*, CTask*)
	* ComputeObjectCollisionPassiveResponse(CEvent*, CTask*, CTask*)
	* ComputeObjectCollisionResponse(CEvent*, CTask*, CTask*)
	* ComputeOnEscalatorResponse(CEvent*, CTask*, CTask*)
	* ComputeOnFireResponse(CEvent*, CTask*, CTask*)
	* ComputePassObjectResponse(CEvent*, CTask*, CTask*)
	* ComputePedCollisionWithPedResponse(CEvent*, CTask*, CTask*)
	* ComputePedCollisionWithPlayerResponse(CEvent*, CTask*, CTask*)
	* ComputePedEnteredVehicleResponse(CEvent*, CTask*, CTask*)
	* ComputePedFriendResponse(CEvent*, CTask*, CTask*)
	* ComputePedSoundQuietResponse(CEvent*, CTask*, CTask*)
	* ComputePedThreatBadlyLitResponse(CEvent*, CTask*, CTask*)
	* ComputePedThreatResponse(CEvent*, CTask*, CTask*)
	* ComputePedToChaseResponse(CEvent*, CTask*, CTask*)
	* ComputePedToFleeResponse(CEvent*, CTask*, CTask*)
	* ComputePersonalityResponseToDamage(CEventDamage*, CEntity*)
	* ComputePlayerCollisionWithPedResponse(CEvent*, CTask*, CTask*)
	* ComputePlayerWantedLevelResponse(CEvent*, CTask*, CTask*)
	* ComputePotentialPedCollideResponse(CEvent*, CTask*, CTask*)
	* ComputePotentialWalkIntoFireResponse(CEvent*, CTask*, CTask*)
	* ComputeReallyLowHealthResponse(CEvent*, CTask*, CTask*)
	* ComputeReviveResponse(CEvent*, CTask*, CTask*)
	* ComputeScriptCommandResponse(CEvent*, CTask*, CTask*)
	* ComputeSeenCopResponse(CEvent*, CTask*, CTask*)
	* ComputeSeenPanickedPedResponse(CEvent*, CTask*, CTask*)
	* ComputeSexyPedResponse(CEvent*, CTask*, CTask*)
	* ComputeSexyVehicleResponse(CEvent*, CTask*, CTask*)
	* ComputeShotFiredResponse(CEvent*, CTask*, CTask*)
	* ComputeShotFiredWhizzedByResponse(CEvent*, CTask*, CTask*)
	* ComputeSignalAtPedResponse(CEvent*, CTask*, CTask*)
	* ComputeSpecialResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleCollisionResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleDamageResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleDiedResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleHitAndRunResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleOnFireResponse(CEvent*, CTask*, CTask*)
	* ComputeVehiclePotentialCollisionResponse(CEvent*, CTask*, CTask*)
	* ComputeVehiclePotentialPassiveCollisionResponse(CEvent*, CTask*, CTask*)
	* ComputeVehicleToStealResponse(CEvent*, CTask*, CTask*)
	* ComputeWaterCannonResponse(CEvent*, CTask*, CTask*)
	* Flush()
	* FlushImmediately()
	* GetCurrentEventType() const
	* HandleEvents()
	* IsKillTaskAppropriate(CPed*, CPed*, CEvent const&)
	* IsTemporaryEvent(CEvent const&)
	* RecordActiveEvent(CEvent const&)
	* RecordPassiveEvent(CEvent const&)
	* RegisterKill(CPed const*, CEntity const*, eWeaponType, bool)
	* SetEventResponseTask(CEvent const&) const
	* ~CEventHandler()

CTaskComplexUseClosestFreeScriptedAttractorRun (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexUseClosestFreeScriptedAttractorRun()

CTaskComplexUseClosestFreeScriptedAttractorSprint (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexUseClosestFreeScriptedAttractorSprint()

CTaskComplexCarDriveMissionFleeScene (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexCarDriveMissionFleeScene()

CTaskComplexCarDriveMissionKillPed (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexCarDriveMissionKillPed()

CAtomicModelInfo (0 variables, 11 functions)
Variables list:

Functions list:
	* AsAtomicModelInfoPtr()
	* CreateInstance()
	* CreateInstance(RwMatrixTag*)
	* DeleteRwObject()
	* GetAtomicFromDistance(float)
	* GetModelType()
	* GetRwModelType()
	* Init()
	* SetAtomic(RpAtomic*)
	* SetupVehicleUpgradeFlags(char const*)
	* ~CAtomicModelInfo()

CDamageAtomicModelInfo (1 variables, 7 functions)
Variables list:
	* m_bCreateDamagedVersion

Functions list:
	* AsDamageAtomicModelInfoPtr()
	* CreateInstance()
	* CreateInstance(RwMatrixTag*)
	* DeleteRwObject()
	* Init()
	* SetDamagedAtomic(RpAtomic*)
	* ~CDamageAtomicModelInfo()

CTimeInfo (0 variables, 1 functions)
Variables list:

Functions list:
	* FindOtherTimeModel(char const*)

CBaseModelInfo (0 variables, 22 functions)
Variables list:

Functions list:
	* Add2dEffect(C2dEffect*)
	* AddRef()
	* AddTexDictionaryRef()
	* AsAtomicModelInfoPtr()
	* AsDamageAtomicModelInfoPtr()
	* AsLodAtomicModelInfoPtr()
	* CBaseModelInfo()
	* ClearTexDictionary()
	* ConvertAnimFileIndex()
	* DeleteCollisionModel()
	* Get2dEffect(int)
	* GetAnimFileIndex()
	* GetTimeInfo()
	* Init()
	* Init2dEffects()
	* RemoveRef()
	* RemoveTexDictionaryRef()
	* SetAnimFile(char const*)
	* SetColModel(CColModel*, bool)
	* SetTexDictionary(char const*, char const*)
	* Shutdown()
	* ~CBaseModelInfo()

CClumpModelInfo (0 variables, 22 functions)
Variables list:

Functions list:
	* ConvertAnimFileIndex()
	* CreateInstance()
	* CreateInstance(RwMatrixTag*)
	* DeleteRwObject()
	* FillFrameArray(RpClump*, RwFrame**)
	* FillFrameArrayCB(RwFrame*, void*)
	* FindFrameFromIdCB(RwFrame*, void*)
	* FindFrameFromNameCB(RwFrame*, void*)
	* FindFrameFromNameWithoutIdCB(RwFrame*, void*)
	* GetAnimFileIndex()
	* GetBoundingBox()
	* GetFrameFromId(RpClump*, int)
	* GetFrameFromName(RpClump*, char const*)
	* GetModelType()
	* GetRwModelType()
	* Init()
	* SetAnimFile(char const*)
	* SetAtomicRendererCB(RpAtomic*, void*)
	* SetClump(RpClump*)
	* SetFrameIds(RwObjectNameIdAssocation*)
	* Shutdown()
	* ~CClumpModelInfo()

CLodAtomicModelInfo (0 variables, 4 functions)
Variables list:

Functions list:
	* AsLodAtomicModelInfoPtr()
	* GetModelType()
	* Init()
	* ~CLodAtomicModelInfo()

CModelInfo (2 variables, 30 functions)
Variables list:
	* ms_lastPositionSearched
	* ms_modelInfoPtrs

Functions list:
	* AddAtomicModel(int)
	* AddClumpModel(int)
	* AddDamageAtomicModel(int)
	* AddLodAtomicModel(int)
	* AddLodTimeModel(int)
	* AddPedModel(int)
	* AddTimeModel(int)
	* AddVehicleModel(int)
	* AddWeaponModel(int)
	* Get2dEffectStore()
	* GetModelInfo(char const*, int*)
	* GetModelInfo(char const*, int, int)
	* GetModelInfoFromHashKey(unsigned int, int*)
	* GetModelInfoUInt16(char const*, unsigned short*)
	* Initialise()
	* IsBikeModel(int)
	* IsBmxModel(int)
	* IsBoatModel(int)
	* IsCarModel(int)
	* IsFakePlaneModel(int)
	* IsHeliModel(int)
	* IsMonsterTruckModel(int)
	* IsPlaneModel(int)
	* IsQuadBikeModel(int)
	* IsTrailerModel(int)
	* IsTrainModel(int)
	* IsVehicleModelType(int)
	* PrintModelInfoStoreUsage()
	* ReInit2dEffects()
	* ShutDown()

CTimeModelInfo (0 variables, 3 functions)
Variables list:

Functions list:
	* GetModelType()
	* GetTimeInfo()
	* ~CTimeModelInfo()

CLodTimeModelInfo (0 variables, 3 functions)
Variables list:

Functions list:
	* GetModelType()
	* GetTimeInfo()
	* ~CLodTimeModelInfo()

CStore<CAtomicModelInfo, 14000> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CDamageAtomicModelInfo, 70> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CLodAtomicModelInfo, 1> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CTimeModelInfo, 169> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CLodTimeModelInfo, 1> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CWeaponModelInfo, 51> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CClumpModelInfo, 92> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CVehicleModelInfo, 212> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

CStore<CPedModelInfo, 278> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CStore()

C2dEffect (0 variables, 5 functions)
Variables list:

Functions list:
	* PluginAttach()
	* Roadsign_GetNumLettersFromFlags(CRoadsignAttrFlags)
	* Roadsign_GetNumLinesFromFlags(CRoadsignAttrFlags)
	* Roadsign_GetPaletteIDFromFlags(CRoadsignAttrFlags)
	* Shutdown()

CModelInfoAccelerator (0 variables, 12 functions)
Variables list:

Functions list:
	* AddModelInfoId(unsigned short)
	* AllocModelInfoIds()
	* Begin(char*)
	* CModelInfoAccelerator()
	* End(char*)
	* EndOfLoadPhase()
	* FreeModelInfoIds()
	* GetEntry(CBaseModelInfo**, int*, char*)
	* GetModelInfoIdFile()
	* GetNextModelInfoId()
	* Init()
	* ~CModelInfoAccelerator()

CPedModelInfo (2 variables, 10 functions)
Variables list:
	* m_pColNodeInfos
	* m_pPedIds

Functions list:
	* AddXtraAtomics(RpClump*)
	* AnimatePedColModelSkinned(RpClump*)
	* AnimatePedColModelSkinnedWorld(RpClump*)
	* CreateHitColModelSkinned(RpClump*)
	* DeleteRwObject()
	* GetModelType()
	* IncrementVoice()
	* SetClump(RpClump*)
	* SetFaceTexture(RwTexture*)
	* ~CPedModelInfo()

CVehicleModelInfo (12 variables, 70 functions)
Variables list:
	* ms_compsToUse
	* ms_compsUsed
	* ms_currentCol
	* ms_lightsOn
	* ms_linkedUpgrades
	* ms_numWheelUpgrades
	* ms_pLightsOnTexture
	* ms_pLightsTexture
	* ms_pRemapTexture
	* ms_upgradeWheels
	* ms_vehicleColourTable
	* ms_vehicleDescs

Functions list:
	* AddRemap(char const*)
	* AddWheelUpgrade(int, int)
	* CVehicleModelInfo()
	* ChooseComponent()
	* ChooseSecondComponent()
	* ChooseVehicleColour(unsigned char&, unsigned char&, unsigned char&, unsigned char&, int)
	* ClearAtomicFlagCB(RwObject*, void*)
	* CollapseFramesCB(RwFrame*, void*)
	* ConvertAnimFileIndex()
	* CreateInstance()
	* DeleteRwObject()
	* DeleteVehicleColourTextures()
	* DisableEnvMap()
	* FindEditableMaterialList()
	* FindTextureCB(char const*)
	* GetAnimFileIndex()
	* GetCustomCarPlateText()
	* GetEditableMaterialListCB(RpAtomic*, void*)
	* GetEditableMaterialListCB(RpMaterial*, void*)
	* GetMatFXEffectMaterialCB(RpMaterial*, void*)
	* GetMaximumNumberOfPassengersFromNumberOfDoors(int)
	* GetModelType()
	* GetNumRemaps()
	* GetNumWheelUpgrades(int)
	* GetOriginalCompPosition(CVector&, int)
	* GetWheelPosn(int, CVector&, bool)
	* GetWheelUpgrade(int, int)
	* HasAlphaMaterialCB(RpMaterial*, void*)
	* HideAllComponentsAtomicCB(RpAtomic*, void*)
	* HideDamagedAtomicCB(RpAtomic*, void*)
	* Init()
	* IsUpgradeAvailable(VehicleUpgradePosn)
	* LoadEnvironmentMaps()
	* LoadVehicleColours()
	* LoadVehicleUpgrades()
	* MoveObjectsCB(RwObject*, void*)
	* PreprocessHierarchy()
	* ReduceMaterialsInVehicle()
	* ResetEditableMaterials(RpClump*)
	* SetAnimFile(char const*)
	* SetAtomicFlagCB(RwObject*, void*)
	* SetAtomicRenderCallbacks()
	* SetAtomicRendererCB(RpAtomic*, void*)
	* SetAtomicRendererCB_BigVehicle(RpAtomic*, void*)
	* SetAtomicRendererCB_Boat(RpAtomic*, void*)
	* SetAtomicRendererCB_Heli(RpAtomic*, void*)
	* SetAtomicRendererCB_RealHeli(RpAtomic*, void*)
	* SetAtomicRendererCB_Train(RpAtomic*, void*)
	* SetCarCustomPlate()
	* SetClump(RpClump*)
	* SetCustomCarPlateText(char*)
	* SetEditableMaterials(RpClump*)
	* SetEditableMaterialsCB(RpAtomic*, void*)
	* SetEditableMaterialsCB(RpMaterial*, void*)
	* SetEnvMapCoeff(float)
	* SetEnvMapCoeffAtomicCB(RpAtomic*, void*)
	* SetEnvMapCoeffCB(RpMaterial*, void*)
	* SetEnvironmentMapAtomicCB(RpAtomic*, void*)
	* SetEnvironmentMapCB(RpMaterial*, void*)
	* SetRenderPipelines()
	* SetRenderPipelinesCB(RpAtomic*, void*)
	* SetVehicleColour(unsigned char, unsigned char, unsigned char, unsigned char)
	* SetVehicleComponentFlags(RwFrame*, unsigned int)
	* SetupCommonData()
	* SetupLightFlags(CVehicle*)
	* ShutdownEnvironmentMaps()
	* ShutdownLightTexture()
	* StopUsingCommonVehicleTexDicationary()
	* UseCommonVehicleTexDicationary()
	* ~CVehicleModelInfo()

CVehicleModelInfo::CVehicleStructure (1 variables, 2 functions)
Variables list:
	* m_pInfoPool

Functions list:
	* CVehicleStructure()
	* ~CVehicleStructure()

CVehicleModelInfo::CLinkedUpgradeList (0 variables, 2 functions)
Variables list:

Functions list:
	* AddUpgradeLink(short, short)
	* FindOtherUpgrade(short) const

CWeaponModelInfo (0 variables, 4 functions)
Variables list:

Functions list:
	* GetModelType()
	* Init()                #
	* SetClump(RpClump*)
	* ~CWeaponModelInfo()

CAnimBlendAssocGroup (0 variables, 13 functions)
Variables list:

Functions list:
	* CAnimBlendAssocGroup()
	* CopyAnimation(char const*)
	* CopyAnimation(unsigned int)
	* CreateAssociations(char const*)
	* CreateAssociations(char const*, RpClump*)
	* CreateAssociations(char const*, RpClump*, char**, int)
	* CreateAssociations(char const*, char const*, char const*, int)
	* DestroyAssociations()
	* GetAnimation(char const*)
	* GetAnimation(unsigned int)
	* GetAnimationId(char const*)
	* InitEmptyAssociations(RpClump*)
	* ~CAnimBlendAssocGroup()

CAnimBlendStaticAssociation (0 variables, 6 functions)
Variables list:

Functions list:
	* AllocateSequenceArray(int)
	* CAnimBlendStaticAssociation()
	* CAnimBlendStaticAssociation(RpClump*, CAnimBlendHierarchy*)
	* FreeSequenceArray()
	* Init(RpClump*, CAnimBlendHierarchy*)
	* ~CAnimBlendStaticAssociation()

CAnimBlendAssociation (0 variables, 22 functions)
Variables list:

Functions list:
	* AllocateAnimBlendNodeArray(int)
	* CAnimBlendAssociation()
	* CAnimBlendAssociation(CAnimBlendAssociation&)
	* CAnimBlendAssociation(CAnimBlendStaticAssociation&)
	* CAnimBlendAssociation(RpClump*, CAnimBlendHierarchy*)
	* FreeAnimBlendNodeArray()
	* GetNode(int)
	* Init(CAnimBlendAssociation&)
	* Init(CAnimBlendStaticAssociation&)
	* Init(RpClump*, CAnimBlendHierarchy*)
	* ReferenceAnimBlock()
	* SetBlend(float, float)
	* SetBlendTo(float, float)
	* SetCurrentTime(float)
	* SetDeleteCallback(void (*)(CAnimBlendAssociation*, void*), void*)
	* SetFinishCallback(void (*)(CAnimBlendAssociation*, void*), void*)
	* Start(float)
	* SyncAnimation(CAnimBlendAssociation*)
	* UpdateBlend(float)
	* UpdateTime(float, float)
	* UpdateTimeStep(float, float)
	* ~CAnimBlendAssociation()

CAnimBlendClumpData (0 variables, 6 functions)
Variables list:

Functions list:
	* CAnimBlendClumpData()
	* ForAllFrames(void (*)(AnimBlendFrameData*, void*), void*)
	* ForAllFramesInSPR(void (*)(AnimBlendFrameData*, void*), void*, unsigned int)
	* LoadFramesIntoSPR()
	* SetNumberOfBones(int)
	* ~CAnimBlendClumpData()

CAnimBlendHierarchy (0 variables, 16 functions)
Variables list:

Functions list:
	* AllocSequenceBlock(bool)
	* CAnimBlendHierarchy()             #
	* CalcTotalTime()
	* CalcTotalTimeCompressed()
	* CompressKeyframes()
	* FindSequence(char*)               #
	* GetSequenceBlock()
	* MoveMemory()
	* Print()
	* RemoveAnimSequences()
	* RemoveQuaternionFlips()
	* RemoveUncompressedData()
	* SetName(char const*)              #
	* Shutdown()
	* Uncompress()
	* ~CAnimBlendHierarchy()

CAnimBlendNode (0 variables, 15 functions)
Variables list:

Functions list:
	* CalcDeltas()                                          #
	* CalcDeltasCompressed()                                #
	* FindKeyFrame(float)                                   #
	* GetCurrentTranslation(CVector&, float)                #
	* GetCurrentTranslationCompressed(CVector&, float)      #
	* GetEndTranslation(CVector&, float)                    #
	* GetEndTranslationCompressed(CVector&, float)          #
	* Init()                                                #
	* NextKeyFrame()        
	* NextKeyFrameCompressed()                              #
	* NextKeyFrameNoCalc()
	* SetupKeyFrameCompressed()                             #
	* Update(CVector&, CQuaternion&, float)                 #
	* UpdateCompressed(CVector&, CQuaternion&, float)       #
	* UpdateTime()

CAnimBlendSequence (0 variables, 12 functions)
Variables list:

Functions list:
	* CAnimBlendSequence()
	* CompressKeyframes(unsigned char*)
	* GetDataSize(bool)
	* MoveMemory()
	* Print()
	* RemoveQuaternionFlips()
	* RemoveUncompressedData(unsigned char*)
	* SetBoneTag(int)
	* SetName(char const*)
	* SetNumFrames(int, bool, bool, unsigned char*)
	* Uncompress(unsigned char*)
	* ~CAnimBlendSequence()

CDefaultAnimCallback (0 variables, 1 functions)
Variables list:

Functions list:
	* DefaultAnimCB(CAnimBlendAssociation*, void*)

CAnimManager (8 variables, 33 functions)
Variables list:
	* ms_aAnimAssocDefinitions
	* ms_aAnimAssocGroups
	* ms_aAnimBlocks
	* ms_aAnimations
	* ms_animCache
	* ms_numAnimAssocDefinitions
	* ms_numAnimBlocks
	* ms_numAnimations

Functions list:
	* AddAnimAssocDefinition(char const*, char const*, unsigned int, unsigned int, CAnimManager::AnimDescriptor*)
	* AddAnimBlockRef(int)
	* AddAnimToAssocDefinition(CAnimManager::AnimAssocDefinition*, char const*)
	* AddAnimation(RpClump*, AssocGroupId, AnimationId)
	* AddAnimation(RpClump*, CAnimBlendHierarchy*, int)
	* AddAnimationAndSync(RpClump*, CAnimBlendAssociation*, AssocGroupId, AnimationId)
	* BlendAnimation(RpClump*, AssocGroupId, AnimationId, float)
	* BlendAnimation(RpClump*, CAnimBlendHierarchy*, int, float)
	* CreateAnimAssocGroups()
	* CreateAnimAssociation(AssocGroupId, AnimationId)
	* GetAnimAssociation(AssocGroupId, AnimationId)
	* GetAnimAssociation(AssocGroupId, char const*)
	* GetAnimBlockName(AssocGroupId)
	 GetAnimGroupName(AssocGroupId)
	* GetAnimation(char const*, CAnimBlock const*)
	* GetAnimation(unsigned int, CAnimBlock const*)
	* GetAnimationBlock(char const*)
	* GetAnimationBlockIndex(char const*)
	* GetFirstAssocGroup(char const*)
	* GetNumRefsToAnimBlock(int)
	* Initialise()
	* LoadAnimFile(RwStream*, bool, char const (*) [32])
	* LoadAnimFile(char const*)
	* LoadAnimFiles()
	* ReadAnimAssociationDefinitions()
	* RegisterAnimBlock(char const*)
	* RemoveAnimBlock(int)
	* RemoveAnimBlockRef(int)
	* RemoveAnimBlockRefWithoutDelete(int)
	* RemoveFromUncompressedCache(CAnimBlendHierarchy*)
	* RemoveLastAnimFile()
	* Shutdown()
	* UncompressAnimation(CAnimBlendHierarchy*)

CLinkList<CAnimBlendHierarchy*> (0 variables, 1 functions)
Variables list:

Functions list:
	* Insert(CAnimBlendHierarchy* const&)

CCutsceneMgr (42 variables, 33 functions)
Variables list:
	* m_PrevExtraColour
	* m_PrevExtraColourOn
	* m_fPrevCarDensity
	* m_fPrevPedDensity
	* ms_aUncompressedCutsceneAnims
	* ms_animLoaded
	* ms_bRepeatObject
	* ms_cAppendAnimName
	* ms_cAppendObjectName
	* ms_cLoadAnimName
	* ms_cLoadObjectName
	* ms_cTextOutput
	* ms_crToHideItems
	* ms_currTextOutput
	* ms_cutsceneAssociations
	* ms_cutsceneLoadStatus
	* ms_cutsceneName
	* ms_cutsceneOffset
	* ms_cutscenePlayStatus
	* ms_cutsceneProcessing
	* ms_cutsceneTimer
	* ms_hasFileInfo
	* ms_iAttachObjectToBone
	* ms_iModelIndex
	* ms_iNumHiddenEntities
	* ms_iNumParticleEffects
	* ms_iTextDuration
	* ms_iTextStartTime
	* ms_numAppendObjectNames
	* ms_numAttachObjectToBones
	* ms_numCutsceneObjs
	* ms_numLoadObjectNames
	* ms_numTextOutput
	* ms_numUncompressedCutsceneAnims
	* ms_pCutsceneDir
	* ms_pCutsceneObjects
	* ms_pHiddenEntities
	* ms_pParticleEffects
	* ms_running
	* ms_useCutsceneShadows
	* ms_useLodMultiplier
	* ms_wasCutsceneSkipped

Functions list:
	* AddCutsceneHead(CObject*, int)
	* AppendToNextCutscene(char const*, char const*)
	* AttachObjectToBone(CObject*, CObject*, int)
	* AttachObjectToFrame(CObject*, CEntity*, char const*)
	* AttachObjectToParent(CObject*, CEntity*)
	* BuildCutscenePlayer()
	* CreateCutsceneObject(int)
	* DeleteCutsceneData()
	* DeleteCutsceneData_overlay()
	* FinishCutscene()
	* GetCutsceneTimeInMilleseconds()
	* HasCutsceneFinished()
	* HideRequestedObjects()
	* Initialise()
	* IsCutsceneSkipButtonBeingPressed()
	* LoadAnimationUncompressed(char const*)
	* LoadCutsceneData(char const*)
	* LoadCutsceneData_loading()
	* LoadCutsceneData_overlay(char const*)
	* LoadCutsceneData_postload()
	* LoadCutsceneData_preload()
	* LoadEverythingBecauseCutsceneDeletedAllOfIt()
	* RemoveCutscenePlayer()
	* RemoveEverythingBecauseCutsceneDoesntFitInMemory()
	* SetCutsceneAnim(char const*, CObject*)
	* SetCutsceneAnimToLoop(char const*)
	* SetHeadAnim(char const*, CObject*)
	* SetupCutsceneToStart()
	* Shutdown()
	* SkipCutscene()
	* StartCutscene()
	* Update()
	* Update_overlay()

CAEAmbienceTrackManager (0 variables, 13 functions)
Variables list:

Functions list:
	* CheckForPause()
	* GetAmbienceTrackStatus()
	* Initialise(int)
	* IsAmbienceRadioActive()
	* IsAmbienceTrackActive()
	* PlaySpecialMissionAmbienceTrack(int)
	* Reset()
	* Service(int)
	* StartTrackPlayback()
	* StopAmbienceTrack()
	* StopSpecialMissionAmbienceTrack()
	* UpdateAmbienceTrackAndVolume()
	* ~CAEAmbienceTrackManager()

CAEAudioChannel (0 variables, 13 functions)
Variables list:

Functions list:
	* CAEAudioChannel(unsigned short, unsigned int, unsigned short)
	* ConvertFromBytesToMS(unsigned int)
	* ConvertFromMsToBytes(unsigned int)
	* GetCurrentPlaybackPosition()
	* GetVolume()
	* IsBufferPlaying()
	* SetFrequency(unsigned int)
	* SetFrequencyScalingFactor(float)
	* SetOriginalFrequency(unsigned int)
	* SetPosition(CVector*)
	* SetVolume(float)
	* UpdateStatus()
	* ~CAEAudioChannel()

CAEAudioEntity (1 variables, 1 functions)
Variables list:
	* m_pAudioEventVolumes

Functions list:
	* UpdateParameters(CAESound*, short)

CAEAudioEnvironment (0 variables, 6 functions)
Variables list:

Functions list:
	* GetDirectionalMikeAttenuation(CVector const&)
	* GetDistanceAttenuation(float)
	* GetDopplerRelativeFrequency(float, float, unsigned int, unsigned int, float)
	* GetPositionRelativeToCamera(CVector*, CPlaceable*)
	* GetPositionRelativeToCamera(CVector*, CVector*)
	* GetReverbEnvironmentAndDepth(signed char*, int*)

CAEAudioHardware (0 variables, 55 functions)
Variables list:

Functions list:
	* AllocateChannels(unsigned short)
	* CAEAudioHardware()
	* CheckDVD()
	* DisableBassEq()
	* DisableEffectsLoading()
	* EnableBassEq()
	* EnableEffectsLoading()
	* GetActiveTrackID()
	* GetActualNumberOfHardwareChannels()
	* GetBeatInfo(tBeatInfo*)
	* GetChannelPlayTimes(short, short*)
	* GetDVDDriveLetter()
	* GetEffectsFaderScalingFactor()
	* GetEffectsMasterScalingFactor()
	* GetMusicMasterScalingFactor()
	* GetNumAvailableChannels()
	* GetPlayingTrackID()
	* GetSoundBankLoadingStatus(unsigned short, short)
	* GetSoundHeadroom(unsigned short, short)
	* GetSoundLoadingStatus(unsigned short, unsigned short, short)
	* GetTrackLengthMs()
	* GetTrackPlayTime()
	* GetVirtualChannelSoundLengths(short*)
	* GetVirtualChannelSoundLoopStartTimes(short*)
	* InitOpenALListener()
	* Initialise()
	* IsSoundBankLoaded(unsigned short, short)
	* IsSoundLoaded(unsigned short, unsigned short, short)
	* IsStreamingFromDVD()
	* LoadSound(unsigned short, unsigned short, short)
	* LoadSoundBank(unsigned short, short)
	* PauseAllSounds()
	* PlaySound(short, unsigned short, unsigned short, unsigned short, short, short, float)
	* PlayTrack(unsigned int, int, unsigned int, char, bool, bool)
	* RequestVirtualChannelSoundInfo(unsigned short, unsigned short, unsigned short)
	* RescaleChannelVolumes()
	* ResumeAllSounds()
	* Service()
	* SetBassSetting(signed char, float)
	* SetChannelFlags(short, unsigned short, short)
	* SetChannelFrequencyScalingFactor(short, unsigned short, float)
	* SetChannelPosition(short, unsigned short, CVector*, unsigned char)
	* SetChannelVolume(short, unsigned short, float, unsigned char)
	* SetEffectsFaderScalingFactor(float)
	* SetEffectsMasterScalingFactor(float)
	* SetMusicFaderScalingFactor(float)
	* SetMusicMasterScalingFactor(float)
	* SetNonStreamFaderScalingFactor(float)
	* SetStreamFaderScalingFactor(float)
	* StartTrackPlayback()
	* StopSound(short, unsigned short)
	* StopTrack()
	* Terminate()
	* UpdateReverbEnvironment()
	* ~CAEAudioHardware()

CAEAudioUtility (1 variables, 11 functions)
Variables list:
	* m_sfLogLookup

Functions list:
	* AudioLog10(float)
	* ConvertFromBytesToMS(unsigned int, unsigned int, unsigned short)
	* ConvertFromMSToBytes(unsigned int, unsigned int, unsigned short)
	* FindVehicleOfPlayer()
	* GetBankAndSoundFromScriptSlotAudioEvent(int*, int*, int*, int)
	* GetCurrentTimeInMilliseconds()
	* GetPiecewiseLinear(float, short, float (*) [2])
	* GetRandomNumberInRange(float, float)
	* GetRandomNumberInRange(int, int)
	* ResolveProbability(float)
	* StaticInitialise()

CAECollisionAudioEntity (0 variables, 20 functions)
Variables list:

Functions list:
	* AddCollisionSoundIDToHistory(unsigned char, short)
	* AddCollisionSoundToList(CEntity*, CEntity*, unsigned char, unsigned char, CAESound*, int)
	* ChooseCollisionSoundID(unsigned char)
	* GetCollisionSoundStatus(CEntity*, CEntity*, unsigned char, unsigned char, int*)
	* GetSurfaceHardnessVolumeOffset(unsigned char)
	* Initialise()
	* InitialisePostLoading()
	* PlayBulletHitCollisionSound(unsigned char, CVector&, float)
	* PlayLoopingCollisionSound(CEntity*, CEntity*, unsigned char, unsigned char, float, CVector&, unsigned char)
	* PlayOneShotCollisionSound(CEntity*, CEntity*, unsigned char, unsigned char, float, CVector&)
	* ReportBulletHit(CEntity*, unsigned char, CVector&, float)
	* ReportCollision(CEntity*, CEntity*, unsigned char, unsigned char, CVector&, CVector*, float, float, unsigned char, unsigned char)
	* ReportGlassCollisionEvent(int, CVector&, unsigned int)
	* ReportObjectDestruction(CEntity*)
	* ReportWaterSplash(CPhysical*, float, unsigned char)
	* ReportWaterSplash(CVector, float)
	* Reset()
	* Service()
	* UpdateLoopingCollisionSound(CAESound*, CEntity*, CEntity*, unsigned char, unsigned char, float, CVector&, unsigned char)
	* UpdateParameters(CAESound*, short)

CAECutsceneTrackManager (0 variables, 12 functions)
Variables list:

Functions list:
	* CheckForPause()
	* GetCutsceneTrackStatus()
	* Initialise(int)
	* IsCutsceneTrackActive()
	* PauseTrack(unsigned char)
	* PlayPreloadedCutsceneTrack()
	* PreloadBeatTrack(short, unsigned char)
	* PreloadCutsceneTrack(short, unsigned char)
	* Service(int)
	* StartTrackPlayback()
	* StopCutsceneTrack()
	* ~CAECutsceneTrackManager()

CAEDataStream (0 variables, 7 functions)
Variables list:

Functions list:
	* CAEDataStream(int, char*, int, int, bool)
	* Close()
	* FillBuffer(void*, unsigned int)
	* GetCurrentPosition()
	* Initialise()
	* Seek(long, int)
	* ~CAEDataStream()

CAEStreamTransformer (0 variables, 3 functions)
Variables list:

Functions list:
	* Initialise()
	* TransformBuffer(void*, unsigned long, unsigned long)
	* ~CAEStreamTransformer()

CAEDoorAudioEntity (0 variables, 6 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, CPhysical*)
	* AddAudioEvent(int, CVector&, float, float)
	* PlayDoorSound(short, int, CVector&, float, float)
	* Reset()
	* StaticInitialise()
	* UpdateParameters(CAESound*, short)

CAEExplosionAudioEntity (0 variables, 4 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, CVector&, float)
	* StaticInitialise()
	* UpdateParameters(CAESound*, short)
	* ~CAEExplosionAudioEntity()

CAEFireAudioEntity (1 variables, 7 functions)
Variables list:
	* m_snLastFireFrequencyIndex

Functions list:
	* AddAudioEvent(int, CVector&)
	* Initialise(FxSystem_c*)
	* PlayFireSounds(int, CVector&)
	* PlayWaterSounds(int, CVector&)
	* StaticInitialise()
	* Terminate()
	* UpdateParameters(CAESound*, short)

CAEFrontendAudioEntity (0 variables, 7 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, float, float)
	* Initialise()
	* IsLoadingTuneActive()
	* IsRadioTuneSoundActive()
	* Reset()
	* Terminate()
	* UpdateParameters(CAESound*, short)

CAEGlobalWeaponAudioEntity (0 variables, 5 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, eWeaponType, CPhysical*)
	* PickAmbientGunFire(int&, eWeaponType&, int&)
	* ProjectileFire(eWeaponType, CPhysical*, int)
	* ServiceAmbientGunFire()
	* UpdateParameters(CAESound*, short)

CAEPedAudioEntity (0 variables, 20 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, float, float, CPhysical*, unsigned char, int, unsigned int)
	* HandleFootstepEvent(int, float, float, unsigned char)
	* HandleLandingEvent(int)
	* HandlePedHit(int, CPhysical*, unsigned char, float, unsigned int)
	* HandlePedJacked(int)
	* HandlePedSwing(int, int, unsigned int)
	* HandleSkateEvent(int, float, float)
	* HandleSwimSplash(int)
	* HandleSwimWake(int)
	* Initialise(CEntity*)
	* PlayShirtFlap(float, float)
	* PlayWindRush(float, float)
	* Service()
	* StaticInitialise()
	* StopJetPackSound()
	* Terminate()
	* TurnOffJetPack()
	* TurnOnJetPack()
	* UpdateJetPack(float, float)
	* UpdateParameters(CAESound*, short)

CAEPedSpeechAudioEntity (20 variables, 58 functions)
Variables list:
	* s_Conversation
	* s_ConversationLength
	* s_NextSpeechSlot
	* s_PedSpeechSlots
	* s_PhraseMemory
	* s_bAPlayerSpeaking
	* s_bAllSpeechDisabled
	* s_bForceAudible
	* s_bPedConversationHappening
	* s_bPlayerConversationHappening
	* s_nCJBasicMood
	* s_nCJFat
	* s_nCJGangBanging
	* s_nCJMoodOverrideTime
	* s_nCJWellDressed
	* s_pConversationPed1
	* s_pConversationPed2
	* s_pConversationPedSlot1
	* s_pConversationPedSlot2
	* s_pPlayerConversationPed

Functions list:
	* AddSayEvent(int, short, unsigned int, float, unsigned char, unsigned char, unsigned char)
	* AddScriptSayEvent(int, int, unsigned char, unsigned char, unsigned char)
	* CAEPedSpeechAudioEntity()
	* CanPedHoldConversation()
	* CanPedSayGlobalContext(short)
	* CanWePlayGlobalSpeechContext(short)
	* CanWePlayScriptedSpeech()
	* DisableAllPedSpeech()
	* DisablePedSpeech(short)
	* DisablePedSpeechForScriptSpeech(short)
	* EnableAllPedSpeech()
	* EnablePedSpeech()
	* EnablePedSpeechForScriptSpeech()
	* GetAllocatedVoice()
	* GetAudioPedType(char*)
	* GetCurrentCJMood()
	* GetNextMoodToUse(short)
	* GetNextPlayTime(short)
	* GetNumSlotsPlayingContext(short)
	* GetPedTalking()
	* GetPedType()
	* GetRepeatTime(short)
	* GetSexForSpecialPed(unsigned int)
	* GetSexFromModel(int)
	* GetSoundAndBankIDs(short, short*)
	* GetSoundAndBankIDsForScriptedSpeech(int)
	* GetSpecificSpeechContext(short, short)
	* GetSpeechContextVolumeOffset(short)
	* GetVoice(char*, short)
	* GetVoiceAndTypeForSpecialPed(unsigned int)
	* GetVoiceAndTypeFromModel(int)
	* GetVoiceForMood(short)
	* Initialise(CEntity*)
	* IsCJDressedInForGangSpeech()
	* IsGlobalContextImportantForInterupting(short)
	* IsGlobalContextImportantForStreaming(short)
	* IsGlobalContextImportantForWidescreen(short)
	* IsGlobalContextPain(short)
	* IsGlobalContextUberImportant(short)
	* IsPedFemaleForAudio()
	* LoadAndPlaySpeech(unsigned int)
	* PlayLoadedSound()
	* ReleasePedConversation()
	* ReleasePlayerConversation()
	* RequestPedConversation(CPed*, CPed*)
	* RequestPlayerConversation(CPed*)
	* ReservePedConversationSpeechSlots()
	* ReservePlayerConversationSpeechSlot()
	* Reset()
	* Service()
	* SetCJMood(short, unsigned int, short, short, short)
	* SetNextPlayTime(short)
	* SetUpConversation()
	* StaticInitialise()
	* StopCurrentSpeech()
	* Terminate()
	* UpdateParameters(CAESound*, short)
	* WillPedChatAboutTopic(short)

CAEPedlessSpeechAudioEntity (0 variables, 12 functions)
Variables list:

Functions list:
	* AddSayEvent(int, short, CEntity*, unsigned int, float, unsigned char, unsigned char, unsigned char)
	* AddScriptSayEvent(int, int, unsigned char, unsigned char, unsigned char)
	* CAEPedlessSpeechAudioEntity()
	* GetAllocatedVoice()
	* GetPedType()
	* Initialise()
	* IsPedFemaleForAudio()
	* PlayLoadedSound()
	* StopCurrentSpeech()
	* Terminate()
	* UpdateParameters(CAESound*, short)
	* WillPedChatAboutTopic(short)

CAEPedWeaponAudioEntity (0 variables, 4 functions)
Variables list:

Functions list:
	* AddAudioEvent(int)
	* Initialise(CEntity*)
	* Service()
	* Terminate()

CAEPoliceScannerAudioEntity (14 variables, 16 functions)
Variables list:
	* s_NextNewScannerDialogueTime
	* s_ScannerSlotFirst
	* s_ScannerSlotSecond
	* s_SlotState
	* s_bScannerDisabled
	* s_bStoppingScanner
	* s_fVolumeOffset
	* s_nAbortPlaybackTime
	* s_nPlaybackStartTime
	* s_nScannerPlaybackState
	* s_nSectionPlaying
	* s_pCurrentSlots
	* s_pPSControlling
	* s_pSound

Functions list:
	* AddAudioEvent(int, eCrimeType, CVector const&)
	* CanWePlayNewScannerDialogue()
	* DisableScanner(unsigned char, unsigned char)
	* EnableScanner()
	* FinishedPlayingScannerDialogue()
	* LoadSlots()
	* PlayLoadedDialogue()
	* PlayPoliceScannerDialogue(tScannerSlot*, tScannerSlot*)
	* PopulateScannerDialogueLists(tScannerSlot*, tScannerSlot*)
	* PrepSlots()
	* Reset()
	* Service()
	* StaticInitialise()
	* StopScanner(unsigned char)
	* UpdateParameters(CAESound*, short)
	* ~CAEPoliceScannerAudioEntity()

CAERadioTrackManager (32 variables, 44 functions)
Variables list:
	* m_nAdvertIndexHistory
	* m_nDJBanterIndexHistory
	* m_nIdentIndexHistory
	* m_nMusicTrackIndexHistory
	* m_nSpecialDJBanterIndex
	* m_nSpecialDJBanterPending
	* m_nStatsCitiesPassed
	* m_nStatsLastHitGameClockDays
	* m_nStatsLastHitGameClockHours
	* m_nStatsLastHitTimeOutHours
	* m_nStatsPassedCasino10
	* m_nStatsPassedCasino3
	* m_nStatsPassedCasino6
	* m_nStatsPassedCat1
	* m_nStatsPassedDesert1
	* m_nStatsPassedDesert10
	* m_nStatsPassedDesert3
	* m_nStatsPassedDesert5
	* m_nStatsPassedDesert8
	* m_nStatsPassedFarlie3
	* m_nStatsPassedLAFin2
	* m_nStatsPassedMansion2
	* m_nStatsPassedRiot1
	* m_nStatsPassedRyder2
	* m_nStatsPassedSCrash1
	* m_nStatsPassedStrap4
	* m_nStatsPassedSweet2
	* m_nStatsPassedTruth2
	* m_nStatsPassedVCrash2
	* m_nStatsStartedBadlands
	* m_nStatsStartedCat2
	* m_nStatsStartedCrash1

Functions list:
	* AddAdvertIndexToHistory(signed char, int)
	* AddDJBanterIndexToHistory(signed char, int)
	* AddIdentIndexToHistory(signed char, int)
	* AddMusicTrackIndexToHistory(signed char, signed char)
	* CheckForMissionStatsChanges()
	* CheckForPause()
	* CheckForStationRetune()
	* CheckForStationRetuneDuringPause()
	* CheckForTrackConcatenation()
	* ChooseAdvertIndex(signed char)
	* ChooseDJBanterIndex(signed char)
	* ChooseDJBanterIndexFromList(signed char, int (*) [2])
	* ChooseIdentIndex(signed char)
	* ChooseMusicTrackIndex(signed char)
	* ChooseTalkRadioShow()
	* ChooseTracksForStation(signed char)
	* DisplayRadioStationName()
	* GetCurrentRadioStationID()
	* GetRadioStationListenTimes()
	* GetRadioStationName(signed char)
	* GetRadioStationNameKey(signed char, char*)
	* HasRadioRetuneJustStarted()
	* Initialise(int)
	* InitialiseRadioStationID(signed char)
	* IsRadioOn()
	* IsVehicleRadioActive()
	* Load()
	* PlayRadioAnnouncement(unsigned int)
	* QueueUpTracksForStation(signed char, signed char*, signed char, tRadioSettings*)
	* Reset()
	* ResetStatistics()
	* RetuneRadio(signed char)
	* Save()
	* Service(int)
	* SetBassEnhanceOnOff(unsigned char)
	* SetBassSetting(signed char, float)
	* SetRadioAutoRetuneOnOff(unsigned char)
	* StartRadio(signed char, signed char, float, unsigned char)
	* StartRadio(tVehicleAudioSettings*)
	* StartTrackPlayback()
	* StopRadio(tVehicleAudioSettings*, unsigned char)
	* TrackRadioStation(signed char, unsigned char)
	* UpdateRadioVolumes()
	* ~CAERadioTrackManager()

CAEScriptAudioEntity (0 variables, 19 functions)
Variables list:

Functions list:
	* AddAudioEvent(int)
	* AttachMissionAudioToPhysical(unsigned char, CPhysical*)
	* ClearMissionAudio(unsigned char)
	* GetMissionAudioEvent(unsigned char)
	* GetMissionAudioLoadingStatus(unsigned char)
	* GetMissionAudioPosition(unsigned char)
	* Initialise()
	* IsMissionAudioSampleFinished(unsigned char)
	* PlayLoadedMissionAudio(unsigned char)
	* PlayMissionBankSound(unsigned short, CVector&, CPhysical*, short, unsigned char, unsigned char, float, float, float)
	* PlayResidentSoundEvent(short, short, short, unsigned short, CVector&, CPhysical*, float, float, short, float)
	* PreloadMissionAudio(unsigned char, int)
	* ProcessMissionAudioEvent(unsigned short, CVector&, CPhysical*, float, float)
	* ReportMissionAudioEvent(unsigned short, CPhysical*, float, float)
	* ReportMissionAudioEvent(unsigned short, CVector&)
	* Reset()
	* Service()
	* SetMissionAudioPosition(unsigned char, CVector&)
	* UpdateParameters(CAESound*, short)

CAESmoothFadeThread (0 variables, 12 functions)
Variables list:

Functions list:
	* CAESmoothFadeThread()
	* CancelFade(OALSource*)
	* Initialise()
	* InitialiseRequestSlots()
	* RequestFade(OALSource*, float, short, bool)
	* Service()
	* SetBufferVolume(OALSource*, float)
	* SmoothFadeProc(void*)
	* Start()
	* Stop()
	* WaitForExit()
	* ~CAESmoothFadeThread()

CAESound (0 variables, 34 functions)
Variables list:

Functions list:
	* CAESound(CAESound&)
	* CAESound(short, short, CAEAudioEntity*, CVector, float, float, float, float, unsigned char, unsigned short, float)
	* CalculateFrequency()
	* CalculateVolume()
	* GetForcedFront()
	* GetFrontEnd()
	* GetLifespanTiedToPhysicalEntity()
	* GetMusicMastered()
	* GetPlayPhysically()
	* GetRelativePlaybackFrequencyWithDoppler()
	* GetRelativePosition(CVector*)
	* GetRequestUpdates()
	* GetRolledOff()
	* GetSlowMoFrequencyScalingFactor()
	* GetSmoothDucking()
	* GetStartPercentage()
	* GetUncancellable()
	* GetUncompressable()
	* GetUnduckable()
	* GetUnpausable()
	* Initialise(short, short, CAEAudioEntity*, CVector, float, float, float, float, unsigned char, unsigned short, float, short)
	* NewVPSLentry()
	* RegisterWithPhysicalEntity(CEntity*)
	* SetIndividualEnvironment(unsigned short, unsigned short)
	* SetPosition(CVector)
	* SoundHasFinished()
	* StopSound()
	* StopSoundAndForget()
	* UnregisterWithPhysicalEntity()
	* UpdateFrequency()
	* UpdateParameters(short)
	* UpdatePlayTime(short, short, short)
	* operator=(CAESound&)
	* ~CAESound()

CAESoundManager (0 variables, 15 functions)
Variables list:

Functions list:
	* AreSoundsOfThisEventPlayingForThisEntity(short, CAEAudioEntity*)
	* AreSoundsOfThisEventPlayingForThisEntityAndPhysical(short, CAEAudioEntity*, CPhysical*)
	* AreSoundsPlayingInBankSlot(short)
	* CancelSoundsInBankSlot(short, unsigned char)
	* CancelSoundsOfThisEventPlayingForThisEntity(short, CAEAudioEntity*)
	* CancelSoundsOfThisEventPlayingForThisEntityAndPhysical(short, CAEAudioEntity*, CPhysical*)
	* CancelSoundsOwnedByAudioEntity(CAEAudioEntity*, unsigned char)
	* GetVirtualChannelForPhysicalChannel(short)
	* Initialise()
	* PauseManually(unsigned char)
	* RequestNewSound(CAESound*)
	* Reset()
	* Service()
	* Terminate()
	* ~CAESoundManager()

CAEStaticChannel (0 variables, 11 functions)
Variables list:

Functions list:
	* CAEStaticChannel(unsigned short, unsigned int, unsigned short)
	* GetLength()
	* GetPlayTime()
	* IsSoundPlaying()
	* Play(short, signed char, float)
	* Service()
	* SetAudioBuffer(OALBuffer*, unsigned short, short, short, unsigned short)
	* SetAudioData(void*, unsigned int, unsigned short, short, short, unsigned short)
	* Stop()
	* SynchPlayback()
	* ~CAEStaticChannel()

CAEStreamingChannel (0 variables, 22 functions)
Variables list:

Functions list:
	* CAEStreamingChannel(unsigned short)
	* FillBuffer(void*, unsigned long)
	* GetActiveTrackID()
	* GetLength()
	* GetPlayTime()
	* GetPlayingTrackID()
	* Initialise()
	* InitialiseSilence()
	* IsSoundPlaying()
	* Pause()
	* Play(short, signed char, float)
	* PrepareStream(CAEStreamingDecoder*, signed char, bool)
	* Service()
	* SetBassEQ(signed char, float)
	* SetFrequencyScalingFactor(float)
	* SetNextStream(CAEStreamingDecoder*)
	* SetReady()
	* Stop()
	* Stop(bool)
	* SynchPlayback()
	* UpdatePlayTime()
	* ~CAEStreamingChannel()

CAEStreamThread (0 variables, 18 functions)
Variables list:

Functions list:
	* CAEStreamThread()
	* Check()
	* GetActiveTrackID()
	* GetPlayingTrackID()
	* GetTrackLengthMs()
	* GetTrackPlayTime()
	* Initialise(CAEStreamingChannel*)
	* IsUserTrack()
	* MainLoop(void*)
	* Pause()
	* PlayTrack(unsigned int, int, unsigned int, char, bool, bool)
	* Resume()
	* Service()
	* Start()
	* Stop()
	* StopTrack()
	* WaitForExit()
	* ~CAEStreamThread()

CAETwinLoopSoundEntity (0 variables, 13 functions)
Variables list:

Functions list:
	* CAETwinLoopSoundEntity(short, short, short, CAEAudioEntity*, unsigned short, unsigned short, short, short)
	* DoSoundsSwitchThisFrame()
	* GetEmittedVolume()
	* Initialise(short, short, short, CAEAudioEntity*, unsigned short, unsigned short, short, short)
	* IsTwinLoopPlaying()
	* PlayTwinLoopSound(CVector, float, float, float, float, unsigned short)
	* SetEmittedVolume(float)
	* StopSound()
	* StopSoundAndForget()
	* SwapSounds()
	* UpdateParameters(CAESound*, short)
	* UpdateTwinLoopSound(CVector, float, float)
	* ~CAETwinLoopSoundEntity()

CAEVehicleAudioEntity (6 variables, 112 functions)
Variables list:
	* s_DummyEngineSlots
	* s_HelicoptorsDisabled
	* s_NextDummyEngineSlot
	* s_pPlayerAttachedForRadio
	* s_pPlayerDriver
	* s_pVehicleAudioSettingsForRadio

Functions list:
	* AddAudioEvent(int, CEntity*)
	* AddAudioEvent(int, float)
	* CAEVehicleAudioEntity()
	* CancelVehicleEngineSound(short)
	* CopHeli()
	* DemandBankSlot(short)
	* DisableHelicoptor()
	* DisableHelicoptors()
	* DoesBankSlotContainThisBank(short, short)
	* EnableHelicoptor()
	* EnableHelicoptors()
	* GetAccelAndBrake(cVehicleParams&)
	* GetAircraftNearPosition()
	* GetBaseVolumeForBicycleTyre(float)
	* GetFlyingMetalVolume(CPhysical*)
	* GetFreqForIdle(float)
	* GetFreqForPlayerEngineSound(cVehicleParams&, short)
	* GetFrequencyForDummyIdle(float, float)
	* GetFrequencyForDummyRev(float, float)
	* GetHornState(unsigned char*, cVehicleParams&)
	* GetSirenState(unsigned char*, unsigned char*, cVehicleParams&)
	* GetVehicleAudioSettings(short)
	* GetVehicleDriveWheelSkidValue(CVehicle*, int, float, cTransmission*, float)
	* GetVehicleNonDriveWheelSkidValue(CVehicle*, int, cTransmission*, float)
	* GetVehicleTypeForAudio()
	* GetVolForPlayerEngineSound(cVehicleParams&, short)
	* GetVolumeForDummyIdle(float, float)
	* GetVolumeForDummyRev(float, float)
	* InhibitAccForTime(unsigned int)
	* InhibitCrzForTime(unsigned int)
	* Initialise(CEntity*)
	* IsAccInhibited(cVehicleParams&)
	* IsAccInhibitedBackwards(cVehicleParams&)
	* IsAccInhibitedForLowSpeed(cVehicleParams&)
	* IsAccInhibitedForTime()
	* IsCrzInhibitedForTime()
	* JustFinishedAccelerationLoop()
	* JustGotInVehicleAsDriver()
	* JustGotOutOfVehicleAsDriver()
	* JustWreckedVehicle()
	* PlayAircraftSound(short, short, short, float, float)
	* PlayBicycleSound(short, short, short, float, float)
	* PlayFlatTyreSound(short, float, float)
	* PlayHornOrSiren(unsigned char, unsigned char, unsigned char, cVehicleParams&)
	* PlayReverseSound(short, float, float)
	* PlayRoadNoiseSound(short, float, float)
	* PlaySkidSound(short, float, float)
	* PlayTrainBrakeSound(short, float, float)
	* PlayerAboutToExitVehicleAsDriver()
	* ProcessAIHeli(cVehicleParams&)
	* ProcessAIProp(cVehicleParams&)
	* ProcessAircraft(cVehicleParams&)
	* ProcessBoatEngine(cVehicleParams&)
	* ProcessBoatMovingOverWater(cVehicleParams&)
	* ProcessDummyBicycle(cVehicleParams&)
	* ProcessDummyGolfCart(cVehicleParams&)
	* ProcessDummyHeli(cVehicleParams&)
	* ProcessDummyHovercraft(cVehicleParams&)
	* ProcessDummyJet(cVehicleParams&)
	* ProcessDummyProp(cVehicleParams&)
	* ProcessDummyRCCar(cVehicleParams&)
	* ProcessDummyRCHeli(cVehicleParams&)
	* ProcessDummyRCPlane(cVehicleParams&)
	* ProcessDummySeaPlane(cVehicleParams&)
	* ProcessDummyStateTransition(short, float, cVehicleParams&)
	* ProcessDummyTrainEngine(cVehicleParams&)
	* ProcessDummyVehicleEngine(cVehicleParams&)
	* ProcessEngineDamage(cVehicleParams&)
	* ProcessGenericJet(unsigned char, cVehicleParams&, float, float, float, float, float)
	* ProcessMovingParts(cVehicleParams&)
	* ProcessNitro(cVehicleParams&)
	* ProcessPlayerBicycle(cVehicleParams&)
	* ProcessPlayerCombine(cVehicleParams&)
	* ProcessPlayerGolfCart(cVehicleParams&)
	* ProcessPlayerHeli(cVehicleParams&)
	* ProcessPlayerHovercraft(cVehicleParams&)
	* ProcessPlayerJet(cVehicleParams&)
	* ProcessPlayerProp(cVehicleParams&)
	* ProcessPlayerRCCar(cVehicleParams&)
	* ProcessPlayerRCHeli(cVehicleParams&)
	* ProcessPlayerRCPlane(cVehicleParams&)
	* ProcessPlayerSeaPlane(cVehicleParams&)
	* ProcessPlayerTrainBrakes(cVehicleParams&)
	* ProcessPlayerTrainEngine(cVehicleParams&)
	* ProcessPlayerVehicleEngine(cVehicleParams&)
	* ProcessRainOnVehicle(cVehicleParams&)
	* ProcessReverseGear(cVehicleParams&)
	* ProcessSpecialVehicle(cVehicleParams&)
	* ProcessTrainTrackSound(cVehicleParams&)
	* ProcessVehicle(CPhysical*)
	* ProcessVehicleFlatTyre(cVehicleParams&)
	* ProcessVehicleRoadNoise(cVehicleParams&)
	* ProcessVehicleSirenAlarmHorn(cVehicleParams&)
	* ProcessVehicleSkidding(cVehicleParams&)
	* RequestBankSlot(short)
	* RequestNewPlayerCarEngineSound(short, float, float)
	* Service()
	* StartVehicleEngineSound(short, float, float)
	* StaticGetPlayerVehicleAudioSettingsForRadio()
	* StaticInitialise()
	* StaticService()
	* StopGenericEngineSound(short)
	* StoppedUsingBankSlot(short)
	* Terminate()
	* TurnOffRadioForVehicle()
	* TurnOnRadioForVehicle()
	* UpdateBoatSound(short, short, short, float, float)
	* UpdateGasPedalAudio(CVehicle*, int)
	* UpdateGenericVehicleSound(short, short, short, short, float, float, float)
	* UpdateParameters(CAESound*, short)
	* UpdateTrainSound(short, short, short, float, float)
	* UpdateVehicleEngineSound(short, float, float)

CAEWaterCannonAudioEntity (0 variables, 9 functions)
Variables list:

Functions list:
	* AddAudioEvent(int, CVector&)
	* ClearSplashInfo()
	* Initialise(CWaterCannon*)
	* Service()
	* SetSplashInfo(CVector, float)
	* StaticInitialise()
	* Terminate()
	* UpdateGenericWaterCannonSound(unsigned char, short, short, short, float, float, CVector, float)
	* UpdateParameters(CAESound*, short)

CAEWaveDecoder (0 variables, 9 functions)
Variables list:

Functions list:
	* CAEWaveDecoder(CAEDataStream*)
	* FillBuffer(void*, unsigned long, int*)
	* GetSampleRate()
	* GetStreamID()
	* GetStreamLengthMs()
	* GetStreamPlayTimeMs()
	* Initialise()
	* SetCursor(unsigned long)
	* ~CAEWaveDecoder()

CAEWeaponAudioEntity (0 variables, 18 functions)
Variables list:

Functions list:
	* Initialise()
	* PlayCameraSound(CPhysical*, int, float)
	* PlayChainsawStopSound(CPhysical*)
	* PlayFlameThrowerIdleGasLoop(CPhysical*)
	* PlayFlameThrowerSounds(CPhysical*, short, short, int, float, float)
	* PlayGoggleSound(short, int)
	* PlayGunSounds(CPhysical*, short, short, short, short, short, int, float, float, float)
	* PlayMiniGunFireSounds(CPhysical*, int)
	* PlayMiniGunStopSound(CPhysical*)
	* PlayWeaponLoopSound(CPhysical*, short, int, float, float, int)
	* ReportChainsawEvent(CPhysical*, int)
	* ReportStealthKill(eWeaponType, CPhysical*, int)
	* Reset()
	* StopFlameThrowerIdleGasLoop()
	* Terminate()
	* UpdateParameters(CAESound*, short)
	* WeaponFire(eWeaponType, CPhysical*, int)
	* WeaponReload(eWeaponType, CPhysical*, int)

CAEWeatherAudioEntity (4 variables, 6 functions)
Variables list:
	* m_sRainSoundL
	* m_sRainSoundR
	* m_sfRainVolume
	* m_snLastRainDropSoundID

Functions list:
	* AddAudioEvent(int)
	* Service()
	* StaticInitialise()
	* StaticReset()
	* UpdateParameters(CAESound*, short)
	* ~CAEWeatherAudioEntity()

CAudioEngine (0 variables, 87 functions)
Variables list:

Functions list:
	* AttachMissionAudioToObject(unsigned char, CObject*)
	* AttachMissionAudioToPed(unsigned char, CPed*)
	* AttachMissionAudioToPhysical(unsigned char, CPhysical*)
	* ClearMissionAudio(unsigned char)
	* DisableEffectsLoading()
	* DisablePoliceScanner(unsigned char, unsigned char)
	* DisplayRadioStationName()
	* DoesAmbienceTrackOverrideRadio()
	* EnableEffectsLoading()
	* EnablePoliceScanner()
	* GetBeatInfo()
	* GetBeatTrackStatus()
	* GetCurrentRadioStationID()
	* GetCutsceneTrackStatus()
	* GetMissionAudioEvent(unsigned char)
	* GetMissionAudioLoadingStatus(unsigned char)
	* GetMissionAudioPosition(unsigned char)
	* GetRadioStationListenTimes()
	* GetRadioStationName(signed char)
	* GetRadioStationNameKey(signed char, char*)
	* HasRadioRetuneJustStarted()
	* Initialise()
	* InitialisePostLoading()
	* InitialiseRadioStationID(signed char)
	* IsAmbienceRadioActive()
	* IsAmbienceTrackActive()
	* IsBeatInfoPresent()
	* IsCutsceneTrackActive()
	* IsLoadingTuneActive()
	* IsMissionAudioSampleFinished(unsigned char)
	* IsRadioOn()
	* IsRadioRetuneInProgress()
	* IsVehicleRadioActive()
	* Load()
	* PauseAllSounds()
	* PauseBeatTrack(unsigned char)
	* PlayLoadedMissionAudio(unsigned char)
	* PlayPreloadedBeatTrack(unsigned char)
	* PlayPreloadedCutsceneTrack()
	* PlayRadioAnnouncement(unsigned int)
	* PreloadBeatTrack(short)
	* PreloadCutsceneTrack(short, unsigned char)
	* PreloadMissionAudio(unsigned char, int)
	* ReportBulletHit(CEntity*, unsigned char, CVector&, float)
	* ReportCollision(CEntity*, CEntity*, unsigned char, unsigned char, CVector&, CVector*, float, float, unsigned char, unsigned char)
	* ReportDoorMovement(CPhysical*)
	* ReportFrontendAudioEvent(int, float, float)
	* ReportGlassCollisionEvent(int, CVector&)
	* ReportMissionAudioEvent(unsigned short, CObject*)
	* ReportMissionAudioEvent(unsigned short, CPed*)
	* ReportMissionAudioEvent(unsigned short, CPhysical*, float, float)
	* ReportMissionAudioEvent(unsigned short, CVector&)
	* ReportMissionAudioEvent(unsigned short, CVehicle*)
	* ReportObjectDestruction(CEntity*)
	* ReportWaterSplash(CPhysical*, float, unsigned char)
	* ReportWaterSplash(CVector, float)
	* ReportWeaponEvent(int, eWeaponType, CPhysical*)
	* Reset()
	* ResetSoundEffects()
	* ResetStatistics()
	* Restart()
	* ResumeAllSounds()
	* RetuneRadio(signed char)
	* Save()
	* SayPedless(int, short, CEntity*, unsigned int, float, unsigned char, unsigned char, unsigned char)
	* Service()
	* ServiceLoadingTune(float)
	* SetBassEnhanceOnOff(unsigned char)
	* SetEffectsFaderScalingFactor(float)
	* SetEffectsMasterVolume(signed char)
	* SetMissionAudioPosition(unsigned char, CVector&)
	* SetMusicFaderScalingFactor(float)
	* SetMusicMasterVolume(signed char)
	* SetNonStreamFaderScalingFactor(float)
	* SetRadioAutoRetuneOnOff(unsigned char)
	* SetRadioBassSetting(signed char)
	* SetStreamFaderScalingFactor(float)
	* Shutdown()
	* StartLoadingTune()
	* StartRadio(signed char, signed char)
	* StartRadio(tVehicleAudioSettings*)
	* StopAmbienceTrack(unsigned char)
	* StopBeatTrack()
	* StopCutsceneTrack(unsigned char)
	* StopPoliceScanner(unsigned char)
	* StopRadio(tVehicleAudioSettings*, unsigned char)
	* ~CAudioEngine()

CAudioZones (9 variables, 5 functions)
Variables list:
	* m_NumActiveBoxes
	* m_NumActiveSpheres
	* m_NumBoxes
	* m_NumSpheres
	* m_aActiveBoxes
	* m_aActiveSpheres
	* m_aBoxes
	* m_aSpheres
	* m_bRenderAudioZones

Functions list:
	* Init()
	* RegisterAudioBox(char*, int, bool, float, float, float, float, float, float)
	* RegisterAudioSphere(char*, int, bool, float, float, float, float)
	* SwitchAudioZone(char*, bool)
	* Update(bool, CVector)

CBugstarInterface (0 variables, 9 functions)
Variables list:

Functions list:
	* CBugstarInterface(CBugstarNetwork*)
	* CreateBug(float, float, float, char*, char*, void*, unsigned int)
	* Init()
	* ParseParameterLine(char*)
	* RecvData(void**, unsigned int*)
	* SendData(void*, unsigned int)
	* SendMsg(unsigned int, void*, unsigned int)
	* Term()
	* ~CBugstarInterface()

CBug (0 variables, 17 functions)
Variables list:

Functions list:
	* AddCustomFieldData(void*, unsigned int)
	* AppendData(void*, unsigned int)
	* BeginCustomFieldData()
	* BeginField(char const*, char const*)
	* ClearBugBuffer()
	* EndCustomFieldData()
	* EndField()
	* GetMessage()
	* GetMessageSize()
	* SetComponent(unsigned int)
	* SetField(int, void*, unsigned int)
	* SetOwner(char const*)
	* SetPlatform(unsigned int)
	* SetProduct(char const*)
	* SetSeverity(char const*)
	* SetSummary(char const*, ...)
	* SetVersion(unsigned int)

CBugstarPC (0 variables, 3 functions)
Variables list:

Functions list:
	* Init()
	* ReadConfigData()
	* ~CBugstarPC()

CAccident (0 variables, 1 functions)
Variables list:

Functions list:
	* IsFree() const

CAccidentManager (0 variables, 6 functions)
Variables list:

Functions list:
	* CAccidentManager()
	* ComputeNoOfFreeAccidents() const
	* GetNearestFreeAccident(CVector const&, bool)
	* GetNearestFreeAccidentExceptThisOne(CVector const&, CAccident*, bool)
	* ReportAccident(CPed*)
	* ~CAccidentManager()

CCam (4 variables, 57 functions)
Variables list:
	* CAM_BUMPED_DAMP_RATE
	* CAM_BUMPED_END_TIME
	* CAM_BUMPED_MOVE_MULT
	* CAM_BUMPED_SWING_PERIOD

Functions list:
	* CacheLastSettingsDWCineyCam()
	* DoAverageOnVector(CVector const&)
	* DoCamBump(float, float)                                   #
	* Finalise_DW_CineyCams(CVector*, CVector*, float, float, float, float) #
	* GetBoatLook_L_R_HeightOffset(float&)                                  #
	* GetCoreDataForDWCineyCamMode(CEntity**, CVehicle**, CVector*, CVector*, CVector*, CVector*, CVector*, CVector*, float*, CVector*, float*, CColSphere*)
	* GetLookAlongGroundPos(CEntity*, CPed*, CVector&, CVector&)        #
	* GetLookFromLampPostPos(CEntity*, CPed*, CVector&, CVector&)       #
	* GetLookOverShoulderPos(CEntity*, CPed*, CVector&, CVector&)       #
	* GetVectorsReadyForRW()                                #
	* GetWeaponFirstPersonOn()                              #
	* Get_TwoPlayer_AimVector(CVector&)                     #
	* Init()                                                #
	* IsTargetInWater(CVector const&)
	* IsTimeToExitThisDWCineyCamMode(int, CVector*, CVector*, float, bool)  #
	* KeepTrackOfTheSpeed(CVector const&, CVector const&, CVector const&, float const&, float const&, float const&)                                         #
	* LookBehind()                                              #
	* LookLeft()                                                #
	* LookRight(bool)                                           #
	* Process()                                                 #
	* ProcessArrestCamOne()                                     #
	* ProcessArrestCamTwo()                                     #
	* ProcessDWBustedCam1(CPed*, bool)                          #
	* ProcessPedsDeadBaby()                                     #
	* Process_1rstPersonPedOnPC(CVector const&, float, float, float)    #
	* Process_1stPerson(CVector const&, float, float, float)    #
	* Process_AimWeapon(CVector const&, float, float, float)    #
	* Process_AttachedCam()                                     #
	* Process_BehindCar(CVector const&, float, float, float)
	* Process_Cam_TwoPlayer()                                   #
	* Process_Cam_TwoPlayer_CalcSource(float, CVector*, CVector*, CVector*) #
	* Process_Cam_TwoPlayer_InCarAndShooting()                  #
	* Process_Cam_TwoPlayer_Separate_Cars()                     #
	* Process_Cam_TwoPlayer_Separate_Cars_TopDown()             #
	* Process_Cam_TwoPlayer_TestLOSs(CVector)                   #
	* Process_DW_BirdyCam(bool)                                 #
	* Process_DW_CamManCam(bool)                                #
	* Process_DW_DogFightCam(bool)
	* Process_DW_FishCam(bool)
	* Process_DW_HeliChaseCam(bool)                             #
	* Process_DW_PlaneCam1(bool)                                #
	* Process_DW_PlaneCam2(bool)                                #
	* Process_DW_PlaneCam3(bool)                                #
	* Process_DW_PlaneSpotterCam(bool)                          #
	* Process_Editor(CVector const&, float, float, float)       #
	* Process_Fixed(CVector const&, float, float, float)        #
	* Process_FlyBy(CVector const&, float, float, float)        #    
	* Process_FollowCar_SA(CVector const&, float, float, float, bool)           #
	* Process_FollowPed(CVector const&, float, float, float)                    #
	* Process_FollowPedWithMouse(CVector const&, float, float, float)           #
	* Process_FollowPed_SA(CVector const&, float, float, float, bool)
	* Process_M16_1stPerson(CVector const&, float, float, float)                #
	* Process_Rocket(CVector const&, float, float, float, bool)                 #
	* Process_SpecialFixedForSyphon(CVector const&, float, float, float)        #
	* Process_WheelCam(CVector const&, float, float, float)                     #
	* RotCamIfInFrontCar(CVector const&, float)
	* Using3rdPersonMouseCam()

CIdleCam (0 variables, 17 functions)
Variables list:

Functions list:
	* FinaliseIdleCamera(float, float, float)
	* GetLookAtPositionOnTarget(CEntity*, CVector*)
	* IdleCamGeneralProcess()
	* Init()
	* IsItTimeForIdleCam()
	* IsTargetValid(CEntity*)
	* Process()
	* ProcessFOVZoom(float)
	* ProcessIdleCamTicker()
	* ProcessSlerp(float*, float*)
	* ProcessTargetSelection()
	* Reset(bool)
	* Run()
	* SetTarget(CEntity*)
	* SetTargetPlayer()
	* VectorToAnglesRotXRotZ(CVector*, float*, float*)
	* ~CIdleCam()

CHandShaker (0 variables, 3 functions)
Variables list:

Functions list:
	* Process(float)
	* Reset()
	* SetDefaults()

CHeliCamSettings (0 variables, 3 functions)
Variables list:

Functions list:
	* RandomiseABit()
	* Reset()
	* SetDefault()

CClock (15 variables, 9 functions)
Variables list:
	* CurrentDay
	* bClockHasBeenStored
	* daysInMonth
	* ms_Stored_nGameClockDays
	* ms_Stored_nGameClockHours
	* ms_Stored_nGameClockMinutes
	* ms_Stored_nGameClockMonths
	* ms_Stored_nGameClockSeconds
	* ms_nGameClockDays
	* ms_nGameClockHours
	* ms_nGameClockMinutes
	* ms_nGameClockMonths
	* ms_nGameClockSeconds
	* ms_nLastClockTick
	* ms_nMillisecondsPerGameMinute

Functions list:
	* GetGameClockMinutesUntil(unsigned char, unsigned char)
	* GetIsTimeInRange(unsigned char, unsigned char)
	* Initialise(unsigned int)
	* NormaliseGameClock()
	* OffsetClockByADay(unsigned int)
	* RestoreClock()
	* SetGameClock(unsigned char, unsigned char, unsigned char)
	* StoreClock()
	* Update()

CControllerConfigManager (0 variables, 57 functions)
Variables list:

Functions list:
	* AffectControllerStateOn_ButtonDown(int, eControllerType)
	* AffectControllerStateOn_ButtonDown_AllStates(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonDown_DebugStuff(int, eControllerType)
	* AffectControllerStateOn_ButtonDown_Driving(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonDown_FirstAndThirdPersonOnly(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonDown_FirstPersonOnly(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonDown_ThirdPersonOnly(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonDown_VehicleAndThirdPersonOnly(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonUp(int, eControllerType)
	* AffectControllerStateOn_ButtonUp_All_Player_States(int, eControllerType, CControllerState&)
	* AffectControllerStateOn_ButtonUp_DebugStuff(int, eControllerType)
	* AffectPadFromKeyBoard()
	* AffectPadFromMouse()
	* ClearSettingsAssociatedWithAction(e_ControllerAction, eControllerType)
	* ClearSimButtonPressCheckers()
	* DeleteMatching1rst3rdPersonControls(e_ControllerAction, int, eControllerType)
	* DeleteMatching1rstPersonControls(e_ControllerAction, int, eControllerType)
	* DeleteMatching3rdPersonControls(e_ControllerAction, int, eControllerType)
	* DeleteMatchingActionInitiators(e_ControllerAction, int, eControllerType)
	* DeleteMatchingCommonControls(e_ControllerAction, int, eControllerType)
	* DeleteMatchingVehicleControls(e_ControllerAction, int, eControllerType)
	* DeleteMatchingVehicle_3rdPersonControls(e_ControllerAction, int, eControllerType)
	* GetActionType(e_ControllerAction)
	* GetButtonComboText(e_ControllerAction)
	* GetControllerKeyAssociatedWithAction(e_ControllerAction, eControllerType)
	* GetControllerSettingTextJoystick(e_ControllerAction)
	* GetControllerSettingTextKeyBoard(e_ControllerAction, eControllerType)
	* GetControllerSettingTextMouse(e_ControllerAction)
	* GetControllerSettingTextWithOrderNumber(e_ControllerAction, eContSetOrder)
	* GetFirstKeyboardControllerText(e_ControllerAction)
	* GetGxtStringOfCommandKeys(unsigned short, unsigned short*, unsigned short)
	* GetIsActionAButtonCombo(e_ControllerAction)
	* GetIsKeyBlank(int, eControllerType)
	* GetIsKeyboardKeyDown(RsKeyCodes)
	* GetIsKeyboardKeyJustDown(RsKeyCodes)
	* GetIsMouseButtonDown(RsKeyCodes)
	* GetIsMouseButtonJustUp(RsKeyCodes)
	* GetIsMouseButtonUp(RsKeyCodes)
	* GetJoyButtonJustDown()
	* GetJoyButtonJustUp()
	* GetMouseButtonAssociatedWithAction(e_ControllerAction)
	* GetNumOfSettingsForAction(e_ControllerAction)
	* InitDefaultControlConfigJoyPad(unsigned int)
	* InitDefaultControlConfigMouse(CMouseControllerState const&, bool)
	* InitDefaultControlConfiguration()
	* InitialiseControllerActionNameArray()
	* LoadSettings(int)
	* MakeControllerActionsBlank()
	* ReinitControls()
	* ResetSettingOrder(e_ControllerAction)
	* SaveSettings(int)
	* SetControllerKeyAssociatedWithAction(e_ControllerAction, int, eControllerType)
	* SetMouseButtonAssociatedWithAction(e_ControllerAction, int)
	* StoreMouseButtonState(eMouseButtons, bool)
	* UpdateJoyButtonState(int)
	* UpdateJoyInConfigMenus_ButtonDown(int, int)
	* UpdateJoyInConfigMenus_ButtonUp(int, int)

CCrime (0 variables, 2 functions)
Variables list:

Functions list:
	* FindImmediateDetectionRange(eCrimeType)
	* ReportCrime(eCrimeType, CEntity*, CPed*)

CDebug (2 variables, 3 functions)
Variables list:
	* m_bUseZTestOnDebugStuff
	* ms_nCurrentTextLine

Functions list:
	* DebugAddText(char const*)
	* DebugDisplayTextBuffer()
	* DebugInitTextBuffer()

CDirectory (0 variables, 10 functions)
Variables list:

Functions list:
	* AddItem(CDirectory::DirectoryInfo const&)
	* CDirectory()
	* CDirectory(int)
	* FindItem(char const*)
	* FindItem(char const*, unsigned int&, unsigned int&)
	* FindItem(unsigned int, unsigned int&, unsigned int&)
	* Init(int, void*)
	* ReadDirFile(char const*)
	* WriteDirFile(char const*)
	* ~CDirectory()

CDummy (0 variables, 4 functions)
Variables list:

Functions list:
	* CDummy()
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CDummy()

CEntryInfoNode (0 variables, 2 functions)
Variables list:

Functions list:
	* operator delete(void*)
	* operator new(unsigned int)

CEntryInfoList (0 variables, 1 functions)
Variables list:

Functions list:
	* Flush()

CFileLoader (1 variables, 52 functions)
Variables list:
	* ms_line

Functions list:
	* AddTexDictionaries(RwTexDictionary*, RwTexDictionary*)
	* FindRelatedModelInfoCB(RpAtomic*, void*)
	* FinishLoadClumpFile(RwStream*, unsigned int)
	* Load2dEffect(char const*)
	* LoadAnimatedClumpObject(char const*)                                                  #
	* LoadAtomicFile(RwStream*, unsigned int)
	* LoadAtomicFile(char const*)
	* LoadAtomicFile2Return(char const*)
	* LoadAudioZone(char const*)                                                             #
	* LoadBoundingBox(unsigned char*, CBoundingBox&)
	* LoadCarGenerator(CFileCarGenerator*, int)
	* LoadCarGenerator(char const*, int)                                                    #
	* LoadCarPathNode(char const*, int, int, bool)                                          #
	* LoadClumpFile(RwStream*, unsigned int)
	* LoadClumpFile(char const*)
	* LoadClumpObject(char const*)
	* LoadCollisionFile(char const*, unsigned char)
	* LoadCollisionFile(unsigned char*, unsigned int, unsigned char)
	* LoadCollisionFileFirstTime(unsigned char*, unsigned int, unsigned char)
	* LoadCollisionModel(unsigned char*, CColModel&, char const*)
	* LoadCollisionModelVer2(unsigned char*, unsigned int, CColModel&, char const*)
	* LoadCollisionModelVer3(unsigned char*, unsigned int, CColModel&, char const*)
	* LoadCollisionModelVer4(unsigned char*, unsigned int, CColModel&, char const*)
	* LoadCullZone(char const*)                                                                 #        
	* LoadEntryExit(char const*)
	* LoadGarage(char const*)
	* LoadLevel(char const*)
	* LoadLine(int)
	* LoadLine(unsigned char**, int&)
	* LoadObject(char const*)
	* LoadObjectInstance(CFileObjectInstance*, char const*)
	* LoadObjectInstance(char const*)
	* LoadObjectTypes(char const*)
	* LoadOcclusionVolume(char const*, char const*)                                         #
	* LoadPathHeader(char const*, int&)                                                     #
	* LoadPedObject(char const*)
	* LoadPedPathNode(char const*, int, int)                                                #
	* LoadPickup(char const*)                                                               #
	* LoadScene(char const*)
	* LoadStuntJump(char const*)                                                            #
	* LoadTXDParent(char const*)
	* LoadTexDictionary(char const*)
	* LoadTimeCyclesModifier(char const*)
	* LoadTimeObject(char const*)                                                           #
	* LoadVehicleObject(char const*)
	* LoadWeaponObject(char const*)                                                         #
	* LoadZone(char const*)                                                                 #                            
	* ReloadObjectTypes(char const*)
	* ReloadPaths(char const*)
	* SaveTexDictionary(RwTexDictionary*, char const*)
	* SetRelatedModelInfoCB(RpAtomic*, void*)
	* StartLoadClumpFile(RwStream*, unsigned int)

CFileMgr (5 variables, 23 functions)
Variables list:
	* fileDataArea
	* ms_dirName
	* ms_dualLayer
	* ms_layerStart
	* ms_rootDirName

Functions list:
	* ChangeDir(char const*)
	* CloseFile(int)
	* GetCdError()
	* GetCdErrorString(int)
	* GetCdFile(char const*, unsigned int&, unsigned int&)
	* GetErrorReadWrite(int)
	* GetTotalSize(int)
	* InitCd()
	* InitCdSystem()
	* Initialise()
	* LoadFile(char const*, unsigned char*, int, char const*)
	* OpenFile(char const*, char const*)
	* OpenFileForAppending(char const*)
	* OpenFileForWriting(char const*)
	* Read(int, char*, int)
	* ReadCd(unsigned int, char*, unsigned int)
	* ReadLine(int, char*, int)
	* Seek(int, int, int)
	* SetDir(char const*)
	* SetDirMyDocuments()
	* SyncCd()
	* Tell(int)
	* Write(int, char*, int)

CFire (0 variables, 6 functions)
Variables list:

Functions list:
	* CFire()
	* CreateFxSysForStrength(RwV3d*, RwMatrixTag*)
	* Extinguish()
	* Initialise()
	* ProcessFire()
	* ~CFire()

CFireManager (0 variables, 24 functions)
Variables list:

Functions list:
	* CFireManager()
	* ClearAllScriptFireFlags()
	* CreateAllFxSystems()
	* DestroyAllFxSystems()
	* ExtinguishPoint(CVector, float)
	* ExtinguishPointWithWater(CVector, float, float)
	* FindNearestFire(CVector const&, bool, bool)
	* GetNextFreeFire(unsigned char)
	* GetNumFiresInArea(float, float, float, float, float, float)
	* GetNumFiresInRange(CVector*, float)
	* GetNumOfNonScriptFires()
	* GetScriptFireCoords(short)
	* Init()
	* IsScriptFireExtinguished(short)
	* PlentyFiresAvailable()
	* RemoveAllScriptFires()
	* RemoveScriptFire(short)
	* SetScriptFireAudio(short, bool)
	* Shutdown()
	* StartFire(CEntity*, CEntity*, float, unsigned char, unsigned int, signed char)
	* StartFire(CVector, float, unsigned char, CEntity*, unsigned int, signed char, unsigned char)
	* StartScriptFire(CVector const&, CEntity*, float, unsigned char, signed char, int)
	* Update()
	* ~CFireManager()

CCreepingFire (1 variables, 3 functions)
Variables list:
	* m_aFireStatus

Functions list:
	* SetReadyToBurn()
	* TryToStartFireAtCoors(CVector, signed char, bool, bool, float)
	* Update()

CGame (6 variables, 22 functions)
Variables list:
	* aDatFile
	* bMissionPackGame
	* currArea
	* currLevel
	* m_pWorkingMatrix1
	* m_pWorkingMatrix2

Functions list:
	* CanSeeOutSideFromCurrArea()
	* CanSeeWaterFromCurrArea()
	* DrasticTidyUpMemory(bool)
	* FinalShutdown()
	* GenerateTempPedAtStartOfNetworkGame()
	* Init1(char const*)
	* Init2(char const*)
	* Init3(char const*)
	* Initialise(char const*)
	* InitialiseCoreDataAfterRW()
	* InitialiseEssentialsAfterRW()
	* InitialiseOnceBeforeRW()
	* InitialiseRenderWare()
	* InitialiseWhenRestarting()
	* Process()
	* ProcessTidyUpMemory()
	* ReInitGameObjectVariables()
	* ReloadIPLs()
	* ShutDownForRestart()
	* Shutdown()
	* ShutdownRenderWare()
	* TidyUpMemory(bool, bool)

CIniFile (2 variables, 1 functions)
Variables list:
	* CarNumberMultiplier
	* PedNumberMultiplier

Functions list:
	* LoadIniFile()

CKeyGen (1 variables, 4 functions)
Variables list:
	* keyTable

Functions list:
	* AppendStringToKey(unsigned int, char const*)
	* GetKey(char const*)
	* GetKey(char const*, int)
	* GetUppercaseKey(char const*)

CLoadMonitor (0 variables, 7 functions)
Variables list:

Functions list:
	* BeginFrame()
	* CLoadMonitor()
	* EndFrame()
	* EndTimer(ELoadType)
	* Render()
	* StartTimer(ELoadType)
	* ~CLoadMonitor()

CLocalisation (3 variables, 18 functions)
Variables list:
	* frenchGame
	* germanGame
	* nastyGame

Functions list:
	* Blood()
	* FrenchGame()
	* GermanGame()
	* Initialise()
	* KickingWhenDown()
	* KillFrenzy()
	* KillPeds()
	* KnockDownPeds()
	* Metric()
	* PedsOnFire()
	* Porn()
	* Prostitutes()
	* ScreamsFromKills()
	* SetFrenchGame()
	* SetGermanGame()
	* SetNormalGame()
	* ShootLimbs()
	* StealFromDeadPed()

CControllerState (0 variables, 2 functions)
Variables list:

Functions list:
	* CheckForInput()
	* Clear()

CKeyboardState (0 variables, 1 functions)
Variables list:

Functions list:
	* Clear()

CPad (11 variables, 99 functions)
Variables list:
	* NewMouseControllerState
	* OldMouseControllerState
	* PCTempMouseControllerState
	* bInvertLook4Pad
	* bSniperAimWithRightStick
	* bSniperAllowMovement
	* m_bDebugCamPCOn
	* m_bMapPadOneToPadTwo
	* m_fLastCarCheatScroll
	* m_fLastCheatScroll
	* m_fLastMissionSkipScroll

Functions list:
	* AimWeaponLeftRight(CPed*, bool*)
	* AimWeaponUpDown(CPed*, bool*)
	* CarGunJustDown(bool)
	* CheckPointSave()
	* CinemaCamera()
	* Clear(bool, bool)
	* ClearKeyBoardHistory()
	* ClearMouseHistory()
	* CollectPickupJustDown()
	* ConversationNoJustDown()
	* ConversationYesJustDown()
	* CraneReleaseJustDown()
	* CycleCameraModeDownJustDown(bool)
	* CycleWeaponLeftJustDown()
	* CycleWeaponRightJustDown()
	* DiveJustDown()
	* DropItemJustDown()
	* DuckJustDown(CPed*)
	* EditCodesForControls(int*, int)
	* EditString(char*, int)
	* ExitVehicleJustDown(bool, CVehicle*, bool, CVector const&)
	* FixPadsAfterSave()
	* GetAbortClimb()
	* GetAccelerate()
	* GetAccelerateJustDown()
	* GetAutoClimb()
	* GetBrake()
	* GetCarGunFired(bool, bool)
	* GetCarGunLeftRight(bool, bool)
	* GetCarGunUpDown(bool, CAutomobile*, float, bool)
	* GetDisplayVitalStats(CPed*)
	* GetDuck()
	* GetEnterTargeting()
	* GetEscapeJustDown()
	* GetExitTargeting()
	* GetExitVehicle()
	* GetForceCameraBehindPlayer()
	* GetGroupControlBack(bool, bool)
	* GetGroupControlForward(bool, bool)
	* GetHandBrake()
	* GetHorn(bool)
	* GetHydraulicJump()
	* GetJump(bool)
	* GetLeftAnalogue(CVector2D*)
	* GetLookBehindForCar()
	* GetLookBehindForPed()
	* GetLookLeft(bool)
	* GetLookRight(bool)
	* GetMeleeAttack(bool)
	* GetNitroFired()
	* GetPad(int)
	* GetPedWalkLeftRight()
	* GetPedWalkUpDown()
	* GetRightAnalogue(CVector2D*)
	* GetSprint(int)
	* GetSteeringLeftRight()
	* GetSteeringMode()
	* GetSteeringUpDown()
	* GetTarget(bool)
	* GetTurretLeft()
	* GetTurretRight()
	* GetWeapon(CPed*, bool)
	* GroupControlBackJustDown(bool)
	* GroupControlForwardJustDown(bool)
	* HornJustDown()
	* Initialise()
	* IsFlyingRCVehicle()
	* JumpJustDown()
	* LastStationJustUp()
	* LookAroundLeftRight()
	* LookAroundUpDown()
	* MeleeAttackJustDown(bool)
	* NextStationJustUp()
	* ProcessPCSpecificStuff()
	* ProcessStoppie()
	* ProcessWheelie(float)
	* ReconcileTwoControllersInput(CControllerState const&, CControllerState const&)
	* SetDrunkInputDelay(int)
	* ShiftTargetLeftJustDown()
	* ShiftTargetRightJustDown()
	* SniperZoomIn()
	* SniperZoomOut()
	* SprintJustDown()
	* StartShake(short, unsigned char, unsigned int)
	* StartShake_Distance(short, unsigned char, float, float, float)
	* StartShake_Train(float, float)
	* StopPadsShaking()
	* StopShaking(short)
	* SwimJumpJustDown()
	* Update(short)
	* UpdateMouse()
	* UpdatePads()
	* UpdatePadsTillStable()
	* UseBomb()
	* UseRocket()
	* WeaponJustDown(CPed*, bool, bool)
	* WeaponUsesAttackButton(CPed*)
	* WeaponUsesTargetingButton()
	* WillBulletHitSomething(CPed*)

CMouseControllerState (0 variables, 3 functions)
Variables list:

Functions list:
	* CMouseControllerState()
	* CheckForInput()
	* Clear()

CMousePointerStateHelper (0 variables, 1 functions)
Variables list:

Functions list:
	* GetMouseSetUp()

CPhysical (0 variables, 59 functions)
Variables list:

Functions list:
	* Add()
	* AddCollisionRecord(CEntity*)
	* AddToMovingList()
	* ApplyAirResistance()
	* ApplyCollision(CEntity*, CColPoint&, float&)
	* ApplyCollision(CPhysical*, CColPoint&, float&, float&)
	* ApplyCollisionAlt(CEntity*, CColPoint&, float&, CVector&, CVector&)
	* ApplyForce(CVector, CVector, bool)
	* ApplyFriction()
	* ApplyFriction(CPhysical*, float, CColPoint&)
	* ApplyFriction(float, CColPoint&)
	* ApplyFrictionForce(CVector, CVector)
	* ApplyFrictionMoveForce(CVector)
	* ApplyFrictionTurnForce(CVector, CVector)
	* ApplyGravity()
	* ApplyMoveForce(CVector)
	* ApplyMoveSpeed()
	* ApplyScriptCollision(CVector, float, float, CVector*)
	* ApplySoftCollision(CEntity*, CColPoint&, float&)
	* ApplySoftCollision(CPhysical*, CColPoint&, float&, float&)
	* ApplySpeed()
	* ApplySpringCollision(float, CVector&, CVector&, float, float, float&)
	* ApplySpringCollisionAlt(float, CVector&, CVector&, float, float, CVector&, float&)
	* ApplySpringDampening(float, float, CVector&, CVector&, CVector&)
	* ApplySpringDampeningOld(float, float, CVector&, CVector&, CVector&)
	* ApplyTurnForce(CVector, CVector)
	* ApplyTurnSpeed()
	* AttachEntityToEntity(CEntity*, CVector*, RtQuat*)
	* AttachEntityToEntity(CEntity*, CVector, CVector)
	* CPhysical()
	* CanPhysicalBeDamaged(eWeaponType, unsigned char*)
	* CheckCollision()
	* CheckCollision_SimpleCar()
	* DettachAutoAttachedEntity()
	* DettachEntityFromEntity(float, float, float, bool)
	* GetBoundRect() const
	* GetHasCollidedWith(CEntity*)
	* GetHasCollidedWithAnyObject()
	* GetLightingFromCol(bool) const
	* GetLightingTotal() const
	* GetSpeed(CVector)
	* PlacePhysicalRelativeToOtherPhysical(CPhysical*, CPhysical*, CVector)
	* PositionAttachedEntity()
	* ProcessCollision()
	* ProcessCollisionSectorList(int, int)
	* ProcessCollisionSectorList_SimpleCar(CRepeatSector*)
	* ProcessControl()
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* ProcessShift()
	* ProcessShiftSectorList(int, int)
	* Remove()
	* RemoveAndAdd()
	* RemoveFromMovingList()
	* RemoveRefsToEntity(CEntity*)
	* SetDamagedPieceRecord(float, CEntity*, CColPoint&, float)
	* SkipPhysics()
	* TestCollision(bool)
	* UnsetIsInSafePosition()
	* ~CPhysical()

CMatrixLink (0 variables, 2 functions)
Variables list:

Functions list:
	* Insert(CMatrixLink*)
	* Remove()

CMatrixLinkList (0 variables, 11 functions)
Variables list:

Functions list:
	* AddToList1()
	* AddToList2()
	* GetNumFree()
	* GetNumUsed1()
	* GetNumUsed2()
	* Init(int)
	* MoveToFreeList(CMatrixLink*)
	* MoveToList1(CMatrixLink*)
	* MoveToList2(CMatrixLink*)
	* Shutdown()
	* ~CMatrixLinkList()

CSimpleTransform (0 variables, 3 functions)
Variables list:

Functions list:
	* Invert(CSimpleTransform const&)
	* UpdateMatrix(CMatrix*) const
	* UpdateRwMatrix(RwMatrixTag*) const

CPlayerCrossHair (0 variables, 2 functions)
Variables list:

Functions list:
	* Render(int)
	* Update(int, CPad*)

CPools (17 variables, 21 functions)
Variables list:
	* ms_pBuildingPool
	* ms_pColModelPool
	* ms_pDummyPool
	* ms_pEntryInfoNodePool
	* ms_pEventPool
	* ms_pNodeRoutePool
	* ms_pObjectPool
	* ms_pPatrolRoutePool
	* ms_pPedAttractorPool
	* ms_pPedIntelligencePool
	* ms_pPedPool
	* ms_pPointRoutePool
	* ms_pPtrNodeDoubleLinkPool
	* ms_pPtrNodeSingleLinkPool
	* ms_pTaskAllocatorPool
	* ms_pTaskPool
	* ms_pVehiclePool

Functions list:
	* CheckBuildingAtomics()
	* CheckPoolsEmpty()
	* GetObject(int)
	* GetObjectRef(CObject*)
	* GetPed(int)
	* GetPedRef(CPed*)
	* GetVehicle(int)
	* GetVehicleRef(CVehicle*)
	* Initialise()
	* Load()
	* LoadObjectPool()
	* LoadPedPool()
	* LoadPedTasks()
	* LoadVehiclePool()
	* MakeSureSlotInObjectPoolIsEmpty(int)
	* Save()
	* SaveObjectPool()
	* SavePedPool()
	* SavePedTasks()
	* SaveVehiclePool()
	* ShutDown()

CProfile (7 variables, 3 functions)
Variables list:
	* ms_aBarColours
	* ms_afCumulativeTime
	* ms_afEndTime
	* ms_afMaxCumulativeTime
	* ms_afMaxEndTime
	* ms_afStartTime
	* ms_pProfileString

Functions list:
	* Initialise()
	* ShowResults()
	* SuspendProfile(eProfile)

CPCKeyboard (0 variables, 4 functions)
Variables list:

Functions list:
	* GetCurrentKeyPressed(unsigned char)
	* GetKeyDown(unsigned short, unsigned char, char*)
	* GetKeyJustDown(unsigned short, unsigned char, char*)
	* KeyToAscii(unsigned char, int, int)

CPtrNodeSingleLink (0 variables, 2 functions)
Variables list:

Functions list:
	* operator delete(void*)
	* operator new(unsigned int)

CPtrNodeDoubleLink (0 variables, 2 functions)
Variables list:

Functions list:
	* operator delete(void*)
	* operator new(unsigned int)

CPtrListSingleLink (0 variables, 1 functions)
Variables list:

Functions list:
	* Flush()

CPtrListDoubleLink (0 variables, 2 functions)
Variables list:

Functions list:
	* Flush()
	* ~CPtrListDoubleLink()

CPtrList (0 variables, 2 functions)
Variables list:

Functions list:
	* CountElements()
	* IsMemberOfList(void*)

CQuadTreeNode (1 variables, 16 functions)
Variables list:
	* ms_pQuadTreeNodePool

Functions list:
	* AddItem(void*, CRect const&)
	* CQuadTreeNode(CRect const&, int)
	* DeleteItem(void*)
	* DeleteItem(void*, CRect const&)
	* FindSector(CRect const&)
	* FindSector(CVector2D const&)
	* ForAllMatching(CRect const&, void (*)(CRect const&, void*))
	* ForAllMatching(CVector2D const&, void (*)(CVector2D const&, void*))
	* GetAll(CPtrListSingleLink&)
	* GetAllMatching(CRect const&, CPtrListSingleLink&)
	* GetAllMatching(CVector2D const&, CPtrListSingleLink&)
	* InSector(CRect const&, int)
	* InitPool()
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CQuadTreeNode()

CRange2D (0 variables, 5 functions)
Variables list:

Functions list:
	* CRange2D(CVector2D, CVector2D)
	* DebugShowRange(float, int)
	* GetRandomPointInRange()
	* IsInRange(CVector2D)
	* ~CRange2D()

CRange3D (0 variables, 4 functions)
Variables list:

Functions list:
	* CRange3D(CVector, CVector)
	* DebugShowRange(int)
	* GetRandomPointInRange()
	* IsInRange(CVector)

CReferences (2 variables, 4 functions)
Variables list:
	* aRefs
	* pEmptyList

Functions list:
	* Init()
	* ListSize(CReference*)
	* PruneAllReferencesInWorld()
	* RemoveReferencesToPlayer()

CRenderer (20 variables, 34 functions)
Variables list:
	* m_loadingPriority
	* m_pFirstPersonVehicle
	* ms_aInVisibleEntityPtrs
	* ms_aVisibleEntityPtrs
	* ms_aVisibleLodPtrs
	* ms_aVisibleSuperLodPtrs
	* ms_bInTheSky
	* ms_bRenderOutsideTunnels
	* ms_bRenderTunnels
	* ms_fCameraHeading
	* ms_fFarClipPlane
	* ms_lodDistScale
	* ms_lowLodDistScale
	* ms_nNoOfInVisibleEntities
	* ms_nNoOfVisibleEntities
	* ms_nNoOfVisibleLods
	* ms_nNoOfVisibleSuperLods
	* ms_pLodDontRenderList
	* ms_pLodRenderList
	* ms_vecCameraPosition

Functions list:
	* AddEntityToRenderList(CEntity*, float)
	* AddToLodDontRenderList(CEntity*, float)
	* AddToLodRenderList(CEntity*, float)
	* ConstructReflectionList()
	* ConstructRenderList()
	* GetLodDontRenderListBase()
	* GetLodRenderListBase()
	* GetObjectsInFrustum(CEntity**, float, RwMatrixTag*)
	* Init()
	* PreRender()
	* ProcessLodRenderLists()
	* RemoveVehiclePedLights(CPhysical*, bool)
	* RenderEverythingBarRoads()
	* RenderFadingInEntities()
	* RenderFadingInUnderwaterEntities()
	* RenderFirstPersonVehicle()
	* RenderOneNonRoad(CEntity*)
	* RenderOneRoad(CEntity*)
	* RenderRoads()
	* RequestObjectsInDirection(CVector const&, float, int)
	* RequestObjectsInFrustum(RwMatrixTag*, int)
	* ResetLodRenderLists()
	* ScanBigBuildingList(int, int)
	* ScanPtrList_RequestModels(CPtrList&)
	* ScanSectorList(int, int)
	* ScanSectorList_ListModels(int, int)
	* ScanSectorList_ListModelsVisible(int, int)
	* ScanSectorList_RequestModels(int, int)
	* ScanWorld()
	* SetupBigBuildingVisibility(CEntity*, float&)
	* SetupEntityVisibility(CEntity*, float&)
	* SetupMapEntityVisibility(CEntity*, CBaseModelInfo*, float, bool)
	* ShouldModelBeStreamed(CEntity*, CVector const&, float)
	* Shutdown()

CVehicle (18 variables, 204 functions)
Variables list:
	* WHEELSPIN_FALL_RATE
	* WHEELSPIN_INAIR_TARGET_RATE
	* WHEELSPIN_RISE_RATE
	* WHEELSPIN_TARGET_RATE
	* bDisableRemoteDetonation
	* bDisableRemoteDetonationOnContact
	* m_aSpecialColModel
	* m_aSpecialColVehicle
	* m_aSpecialHydraulicData
	* m_bEnableMouseFlying
	* m_bEnableMouseSteering
	* m_fAirResistanceMult
	* m_nLastControlInput
	* m_pTappedGasTankVehicle
	* ms_fRailTrackResistance
	* ms_fRailTrackResistanceDefault
	* ms_forceVehicleLightsOff
	* s_bPlaneGunsEjectShellCasings

Functions list:
	* ActivateBomb()
	* ActivateBombWhenEntered()
	* AddDamagedVehicleParticles()
	* AddExhaustParticles()
	* AddMovingCollisionSpeed(CVector&)
	* AddPassenger(CPed*)
	* AddPassenger(CPed*, unsigned char)
	* AddReplacementUpgrade(int, int)
	* AddSingleWheelParticles(tWheelState, unsigned int, float, float, CColPoint*, CVector*, float, int, unsigned int, bool*, unsigned int)
	* AddUpgrade(int, int)
	* AddVehicleUpgrade(int)
	* AddWaterSplashParticles()
	* AddWheelDirtAndWater(CColPoint&, unsigned int, unsigned char, unsigned char)
	* ApplyBoatWaterResistance(tBoatHandlingData*, float)
	* BladeColSectorList(CPtrList&, CColModel&, CMatrix&, short, float)
	* BlowUpCar(CEntity*, unsigned char)
	* BlowUpCarCutSceneNoExtras(bool, bool, bool, bool)
	* BreakTowLink()
	* BurstTyre(unsigned char, bool)
	* CVehicle(unsigned char)
	* CalculateLightingFromCollision()
	* CanBeDeleted() const
	* CanBeDriven() const
	* CanDoorsBeDamaged() const
	* CanPedEnterCar() const
	* CanPedJumpOutCar(CPed*) const
	* CanPedLeanOut(CPed*) const
	* CanPedOpenLocks(CPed const*) const
	* CanPedStepOutCar(bool) const
	* CanUseCameraHeightSetting()
	* CanVehicleBeDamaged(CEntity*, eWeaponType, unsigned char*)
	* CarHasRoof() const
	* ChangeLawEnforcerState(unsigned char)
	* ClearGettingInFlags(unsigned char)
	* ClearGettingOutFlags(unsigned char)
	* ClearVehicleUpgradeFlags(int, int)
	* ClearWindowOpenFlag(unsigned char)
	* CreateReplacementAtomic(CBaseModelInfo*, RwFrame*, int, bool, bool)
	* CreateUpgradeAtomic(CBaseModelInfo*, UpgradePosnDesc const*, RwFrame*, bool)
	* CustomCarPlate_TextureCreate(CVehicleModelInfo*)
	* CustomCarPlate_TextureDestroy()
	* DeleteRwObject()
	* DoBladeCollision(CVector, CMatrix&, short, float, float)
	* DoBoatSplashes(float)
	* DoBurstAndSoftGroundRatios()
	* DoDriveByShootings()
	* DoFixedMachineGuns()
	* DoHeadLightBeam(int, CMatrix&, unsigned char)
	* DoHeadLightEffect(int, CMatrix&, unsigned char, unsigned char)
	* DoHeadLightReflection(CMatrix&, unsigned int, unsigned char, unsigned char)
	* DoHeadLightReflectionSingle(CMatrix&, unsigned char)
	* DoHeadLightReflectionTwin(CMatrix&)
	* DoPlaneGunFireFX(CWeapon*, CVector&, CVector&, int)
	* DoReverseLightEffect(int, CMatrix&, unsigned char, unsigned char, unsigned int, unsigned char)
	* DoSunGlare()
	* DoTailLightEffect(int, CMatrix&, unsigned char, unsigned char, unsigned int, unsigned char)
	* DoVehicleLights(CMatrix&, unsigned int)
	* ExtinguishCarFire()
	* FillVehicleWithPeds(bool)
	* FindTyreNearestPoint(float, float)
	* FindWheelWidth(bool)
	* FireFixedMachineGuns()
	* FireHeatSeakingMissile(CEntity*, eOrdnanceType, bool)
	* FirePlaneGuns()
	* FireUnguidedMissile(eOrdnanceType, bool)
	* Fix()
	* FlagToDestroyWhenNextProcessed()
	* FlyingControl(eFlightModel, float, float, float, float)
	* GetComponentWorldPosition(int, CVector&)
	* GetDooorAngleOpenRatio(eDoors) const
	* GetDooorAngleOpenRatio(unsigned int) const
	* GetFiringRateMultiplier()
	* GetGasTankPosition()
	* GetHasDualExhausts()
	* GetHeightAboveRoad() const
	* GetNewSteeringAmt()
	* GetNumContactWheels()
	* GetPlaneGunsAutoAimAngle()
	* GetPlaneGunsPosition(int)
	* GetPlaneGunsRateOfFire()
	* GetPlaneNumGuns()
	* GetPlaneOrdnancePosition(eOrdnanceType)
	* GetPlaneOrdnanceRateOfFire(eOrdnanceType)
	* GetPlaneWeaponFiringStatus(bool&, eOrdnanceType&)
	* GetRemapIndex()
	* GetReplacementUpgrade(int)
	* GetRideAnimData()
	* GetRopeHeightForHeli()
	* GetSpareHasslePosId()
	* GetSpecialColModel()
	* GetTowBarPos(CVector&, bool, CVehicle*)
	* GetTowHitchPos(CVector&, bool, CVehicle*)
	* GetUpgrade(int)
	* GetVehicleAppearance() const
	* GetVehicleLightsStatus()
	* HeightAboveCeiling(float, eFlightModel)
	* InflictDamage(CEntity*, eWeaponType, float, CVector)
	* InitWinch(int)
	* IsComponentPresent(int) const
	* IsDoorClosed(eDoors) const
	* IsDoorClosed(unsigned int) const
	* IsDoorFullyOpen(eDoors) const
	* IsDoorFullyOpen(unsigned int) const
	* IsDoorMissing(eDoors) const
	* IsDoorMissing(unsigned int) const
	* IsDoorReady(eDoors) const
	* IsDoorReady(unsigned int) const
	* IsDriver(CPed const*) const
	* IsDriver(int) const
	* IsLawEnforcementVehicle() const
	* IsOnItsSide() const
	* IsOpenTopCar() const
	* IsPassenger(CPed const*) const
	* IsPassenger(int) const
	* IsRoomForPedToLeaveCar(unsigned int, CVector*)
	* IsSphereTouchingVehicle(float, float, float, float)
	* IsUpsideDown() const
	* IsVehicleNormal() const
	* KillPedsGettingInVehicle()
	* KillPedsInVehicle()
	* Load()
	* MakeDirty(CColPoint&)
	* OpenDoor(CPed*, int, eDoors, float, bool)
	* PickRandomPassenger()
	* PickUpEntityWithWinch(CEntity*)
	* PlayCarHorn()
	* PossiblyDropFreeFallBombForPlayer(eOrdnanceType, bool)
	* PreRender()
	* PreRenderDriverAndPassengers()
	* ProcessBikeWheel(CVector&, CVector&, CVector&, CVector&, int, float, float, float, float, char, float*, tWheelState*, eBikeWheelSpecial, unsigned short)
	* ProcessBoatControl(tBoatHandlingData*, float&, bool, bool)
	* ProcessCarAlarm()
	* ProcessControlCollisionCheck(bool)
	* ProcessControlInputs(unsigned char)
	* ProcessDelayedExplosion()
	* ProcessDrivingAnims(CPed*, unsigned char)
	* ProcessOpenDoor(CPed*, unsigned int, unsigned int, unsigned int, float)
	* ProcessSirenAndHorn(bool)
	* ProcessWeapons()
	* ProcessWheel(CVector&, CVector&, CVector&, CVector&, int, float, float, float, char, float*, tWheelState*, unsigned short)
	* ProcessWheelRotation(tWheelState, CVector const&, CVector const&, float)
	* QueryPickedUpEntityWithWinch()
	* ReactToVehicleDamage(CPed*)
	* ReduceVehicleDamage(float&)
	* ReleasePickedUpEntityWithWinch()
	* RemoveAllUpgrades()
	* RemoveDriver(bool)
	* RemoveLighting(bool)
	* RemovePassenger(CPed*)
	* RemoveRefsToVehicle(CEntity*)
	* RemoveReplacementUpgrade(int)
	* RemoveUpgrade(int)
	* RemoveVehicleUpgrade(int)
	* RemoveWinch()
	* Render()
	* RenderDriverAndPassengers()
	* ResetAfterRender()
	* Save()
	* ScanAndMarkTargetForHeatSeekingMissile(CEntity*)
	* SelectPlaneWeapon(bool, eOrdnanceType)
	* SetCollisionLighting(unsigned char)
	* SetComponentAtomicAlpha(RpAtomic*, int)
	* SetComponentRotation(RwFrame*, int, float, bool)
	* SetComponentVisibility(RwFrame*, unsigned int)
	* SetDriver(CPed*)
	* SetFiringRateMultiplier(float)
	* SetGettingInFlags(unsigned char)
	* SetGettingOutFlags(unsigned char)
	* SetHasslePosId(int, bool)
	* SetModelIndex(unsigned int)
	* SetRemap(int)
	* SetRemapTexDictionary(char const*)
	* SetRopeHeightForHeli(float)
	* SetTappedGasTankVehicle(CEntity*)
	* SetTowLink(CVehicle*, bool)
	* SetTransmissionRotation(RwFrame*, float, float, CVector, bool)
	* SetUpDriver(int, bool, bool)
	* SetUpWheelColModel(CColModel*)
	* SetVehicleCreatedBy(int, bool)
	* SetVehicleUpgradeFlags(int, int, int&)
	* SetWindowOpenFlag(unsigned char)
	* SetupDamageAfterLoad()
	* SetupLighting()
	* SetupPassenger(int, int, bool, bool)
	* SetupRender()
	* SetupSuspensionLines()
	* SetupUpgradesAfterLoad()
	* ShufflePassengersToMakeSpace()
	* Shutdown()
	* SpecialEntityCalcCollisionSteps(bool&, bool&)
	* SpecialEntityPreCollisionStuff(CPhysical*, bool, bool&, bool&, bool&, bool&)
	* UpdateClumpAlpha()
	* UpdateLightingFromStoredPolys()
	* UpdatePassengerList()
	* UpdateTractorLink(bool, bool)
	* UpdateTrailerLink(bool, bool)
	* UpdateWinch()
	* UsesSiren() const
	* VehicleDamage(float, unsigned short, CEntity*, CVector*, CVector*, eWeaponType)
	* operator delete(void*)
	* operator delete(void*, int)
	* operator new(unsigned int)
	* operator new(unsigned int, int)
	* ~CVehicle()

CCutsceneObject (0 variables, 7 functions)
Variables list:

Functions list:
	* CCutsceneObject()
	* PreRender()
	* ProcessControl()
	* RemoveLighting(bool)
	* SetModelIndex(unsigned int)
	* SetupLighting()
	* ~CCutsceneObject()

CRopes (2 variables, 11 functions)
Variables list:
	* PlayerControlsCrane
	* aRopes

Functions list:
	* CreateRopeForSwatPed(CVector const&)
	* FindCoorsAlongRope(unsigned int, float, CVector*, CVector*)
	* FindPickUpHeight(CEntity*)
	* FindRope(unsigned int)
	* Init()
	* IsCarriedByRope(CPhysical*)
	* RegisterRope(unsigned int, unsigned int, CVector, bool, unsigned char, bool, CPhysical*, int)
	* Render()
	* SetSpeedOfTopNode(unsigned int, CVector)
	* Shutdown()
	* Update()

CRope (0 variables, 8 functions)
Variables list:

Functions list:
	* CreateHookObjectForRope()
	* DoControlsApply()
	* PickUpObject(CEntity*)
	* ReleasePickedUpObject()
	* Remove()
	* Render()
	* Update()
	* UpdateWeightInRope(CVector, float, CVector*)

CStats (37 variables, 53 functions)
Variables list:
	* BiggestLoss
	* BiggestWin
	* DebugStatValue
	* FavoriteRadioStationList
	* FavouriteVehicle
	* FavouriteWeapon
	* LastMissionPassedName
	* MoneyLost
	* MoneySpent
	* PedsKilledOfThisType
	* ShowChaseStatOnScreen
	* StatMessage
	* StatReactionValue
	* StatTypesFloat
	* StatTypesInt
	* TimesMissionAttempted
	* TotalNumStatMessages
	* bShowRespectStat
	* bShowSexAppealStat
	* bShowUpdateStats
	* m_AddToHealthCounter
	* m_BikeCounter
	* m_BoatCounter
	* m_CycleSkillCounter
	* m_CycleStaminaCounter
	* m_DeathCounter
	* m_DrivingCounter
	* m_FatCounter
	* m_FlyingCounter
	* m_LastWeaponTypeFired
	* m_MaxHealthCounter
	* m_RunningCounter
	* m_SprintStaminaCounter
	* m_SwimStaminaCounter
	* m_SwimUnderWaterCounter
	* m_ThisStatIsABarChart
	* m_WeaponCounter

Functions list:
	* BuildStatLine(char*, void*, int, void*, int)
	* CheckForStatsMessage(bool)
	* CheckForThreshold(float*, float)
	* ConstructStatLine(int, unsigned char)
	* ConvertToMins(int)
	* ConvertToSecs(int)
	* DecrementStat(unsigned short, float)
	* DisplayScriptStatUpdateMessage(unsigned char, unsigned int, float)
	* FindCriminalRatingNumber()
	* FindCriminalRatingString()
	* FindLeastFavoriteRadioStation()
	* FindMaxNumberOfGroupMembers()
	* FindMostFavoriteRadioStation()
	* GetFatAndMuscleModifier(eStatModAbilities)
	* GetFavoriteRadioStationList(int)
	* GetFullFavoriteRadioStationList()
	* GetPercentageProgress()
	* GetStatID(unsigned short)
	* GetStatType(unsigned short)
	* GetStatValue(unsigned short)
	* GetTimesMissionAttempted(unsigned char)
	* IncrementStat(unsigned short, float)
	* Init()
	* IsStatCapped(unsigned short)
	* Load()
	* LoadActionReactionStats()
	* LoadStatUpdateConditions()
	* ModifyStat(unsigned short, float)
	* PopulateFavoriteRadioStationList()
	* ProcessReactionStatsOnDecrement(unsigned char)
	* ProcessReactionStatsOnIncrement(unsigned char)
	* RegisterBestPosition(int, int)
	* RegisterFastestTime(int, int)
	* RegisterMissionAttempted(unsigned char)
	* RegisterMissionPassed(unsigned char)
	* SafeToShowThisStat(unsigned char)
	* Save()
	* SetNewRecordStat(unsigned short, float)
	* SetStatValue(unsigned short, float)
	* UpdateFatAndMuscleStats(unsigned int)
	* UpdateRespectStat(unsigned char)
	* UpdateSexAppealStat()
	* UpdateStatsAddToHealth(unsigned int)
	* UpdateStatsOnRespawn()
	* UpdateStatsWhenCycling(bool, CBmx*)
	* UpdateStatsWhenDriving(CVehicle*)
	* UpdateStatsWhenFighting()
	* UpdateStatsWhenFlying(CVehicle*)
	* UpdateStatsWhenOnMotorBike(CBike*)
	* UpdateStatsWhenRunning()
	* UpdateStatsWhenSprinting()
	* UpdateStatsWhenSwimming(bool, bool)
	* UpdateStatsWhenWeaponHit(int)

SurfaceInfos_c (0 variables, 52 functions)
Variables list:

Functions list:
	* CanClimb(unsigned int)
	* CantSprintOn(unsigned int)
	* CreatesObjects(unsigned int)
	* CreatesPlants(unsigned int)
	* CreatesSparks(unsigned int)
	* CreatesWheelDust(unsigned int)
	* CreatesWheelGrass(unsigned int)
	* CreatesWheelGravel(unsigned int)
	* CreatesWheelMud(unsigned int)
	* CreatesWheelSand(unsigned int)
	* CreatesWheelSpray(unsigned int)
	* GetAdhesionGroup(unsigned int)
	* GetAdhesiveLimit(CColPoint&)
	* GetBulletFx(unsigned int)
	* GetFlammability(unsigned int)
	* GetFrictionEffect(unsigned int)
	* GetRoughness(unsigned int)
	* GetSkidmarkType(unsigned int)
	* GetSurfaceIdFromName(char*)
	* GetTyreGrip(unsigned int)
	* GetWetMultiplier(unsigned int)
	* Init()
	* IsAudioConcrete(unsigned int)
	* IsAudioGrass(unsigned int)
	* IsAudioGravel(unsigned int)
	* IsAudioLongGrass(unsigned int)
	* IsAudioMetal(unsigned int)
	* IsAudioSand(unsigned int)
	* IsAudioTile(unsigned int)
	* IsAudioWater(unsigned int)
	* IsAudioWood(unsigned int)
	* IsBeach(unsigned int)
	* IsGlass(unsigned int)
	* IsPavement(unsigned int)
	* IsSand(unsigned int)
	* IsSeeThrough(unsigned int)
	* IsShallowWater(unsigned int)
	* IsShootThrough(unsigned int)
	* IsSkateable(unsigned int)
	* IsSoftLanding(unsigned int)
	* IsStairs(unsigned int)
	* IsSteepSlope(unsigned int)
	* IsWater(unsigned int)
	* LeavesFootsteps(unsigned int)
	* LoadAdhesiveLimits()
	* LoadSurfaceAudioInfos()
	* LoadSurfaceInfos()
	* MakesCarClean(unsigned int)
	* MakesCarDirty(unsigned int)
	* ProducesFootDust(unsigned int)
	* SurfaceInfos_c()
	* ~SurfaceInfos_c()

CColourSet (0 variables, 2 functions)
Variables list:

Functions list:
	* CColourSet(int, int)
	* Interpolate(CColourSet*, CColourSet*, float, float, bool)

CTimeCycle (73 variables, 20 functions)
Variables list:
	* m_BelowHorizonGrey
	* m_BrightnessAddedToAmbientBlue
	* m_BrightnessAddedToAmbientGreen
	* m_BrightnessAddedToAmbientRed
	* m_CurrentColours
	* m_CurrentStoredValue
	* m_ExtraColour
	* m_ExtraColourInter
	* m_ExtraColourWeatherType
	* m_FogReduction
	* m_NumBoxes
	* m_VectorToSun
	* m_aBoxes
	* m_bExtraColourOn
	* m_fCloudAlpha
	* m_fFarClip
	* m_fFogStart
	* m_fLightsOnGroundBrightness
	* m_fPostFx1Alpha
	* m_fPostFx1Blue
	* m_fPostFx1Green
	* m_fPostFx1Red
	* m_fPostFx2Alpha
	* m_fPostFx2Blue
	* m_fPostFx2Green
	* m_fPostFx2Red
	* m_fShadowDisplacementX
	* m_fShadowDisplacementY
	* m_fShadowFrontX
	* m_fShadowFrontY
	* m_fShadowSideX
	* m_fShadowSideY
	* m_fSpriteBrightness
	* m_fSpriteSize
	* m_fSunSize
	* m_fWaterAlpha
	* m_fWaterBlue
	* m_fWaterGreen
	* m_fWaterRed
	* m_nAmbientBlue
	* m_nAmbientBlue_Obj
	* m_nAmbientGreen
	* m_nAmbientGreen_Obj
	* m_nAmbientRed
	* m_nAmbientRed_Obj
	* m_nDirectionalMult
	* m_nFluffyCloudsBottomBlue
	* m_nFluffyCloudsBottomGreen
	* m_nFluffyCloudsBottomRed
	* m_nHighLightMinIntensity
	* m_nLightShadowStrength
	* m_nLowCloudsBlue
	* m_nLowCloudsGreen
	* m_nLowCloudsRed
	* m_nPoleShadowStrength
	* m_nShadowStrength
	* m_nSkyBottomBlue
	* m_nSkyBottomGreen
	* m_nSkyBottomRed
	* m_nSkyTopBlue
	* m_nSkyTopGreen
	* m_nSkyTopRed
	* m_nSunCoreBlue
	* m_nSunCoreGreen
	* m_nSunCoreRed
	* m_nSunCoronaBlue
	* m_nSunCoronaGreen
	* m_nSunCoronaRed
	* m_nWaterFogAlpha
	* m_vBlueGrade
	* m_vGreenGrade
	* m_vRedGrade
	* m_vecDirnLightToSun

Functions list:
	* AddOne(CBox&, short, int, float, float, float)
	* CalcColoursForPoint(CVector, CColourSet*)
	* FindFarClipForCoors(CVector)
	* FindTimeCycleBox(CVector, CTimeCycleBox**, float*, bool, bool, CTimeCycleBox*)
	* GetAmbientBlue()
	* GetAmbientBlue_BeforeBrightness()
	* GetAmbientBlue_Obj()
	* GetAmbientGreen()
	* GetAmbientGreen_BeforeBrightness()
	* GetAmbientGreen_Obj()
	* GetAmbientRed()
	* GetAmbientRed_BeforeBrightness()
	* GetAmbientRed_Obj()
	* InitForRestart()
	* Initialise(bool)
	* SetConstantParametersForPostFX()
	* Shutdown()
	* StartExtraColour(int, bool)
	* StopExtraColour(bool)
	* Update()

CTimer (19 variables, 13 functions)
Variables list:
	* bSkipProcessThisFrame
	* bSlowMotionActive
	* game_FPS
	* m_CodePause
	* m_FrameCounter
	* m_UserPause
	* m_snPPPPreviousTimeInMilliseconds
	* m_snPPPreviousTimeInMilliseconds
	* m_snPPreviousTimeInMilliseconds
	* m_snPreviousTimeInMilliseconds
	* m_snPreviousTimeInMillisecondsNonClipped
	* m_snTimeInMilliseconds
	* m_snTimeInMillisecondsNonClipped
	* m_snTimeInMillisecondsPauseMode
	* ms_fOldTimeStep
	* ms_fSlowMotionScale
	* ms_fTimeScale
	* ms_fTimeStep
	* ms_fTimeStepNonClipped

Functions list:
	* EndUserPause()
	* GetCurrentTimeInCycles()
	* GetCyclesPerFrame()
	* GetCyclesPerMillisecond()
	* GetIsSlowMotionActive()
	* Initialise()
	* Resume()
	* Shutdown()
	* StartUserPause()
	* Stop()
	* Suspend()
	* Update()
	* UpdateVariables(float)

CPlaceName (0 variables, 6 functions)
Variables list:

Functions list:
	* CPlaceName()
	* Display()
	* GetForMap(float, float)
	* Init()
	* Process()
	* ProcessAfterFrontEndShutDown()

CCurrentVehicle (0 variables, 4 functions)
Variables list:

Functions list:
	* CCurrentVehicle()
	* Display()
	* Init()
	* Process()

CUserDisplay (3 variables, 2 functions)
Variables list:
	* CurrentVehicle
	* OnscnTimer
	* PlaceName

Functions list:
	* Init()
	* Process()

CWanted (3 variables, 33 functions)
Variables list:
	* MaximumWantedLevel
	* bUseNewsHeliInAdditionToPolice
	* nMaximumWantedLevel

Functions list:
	* AddCrimeToQ(eCrimeType, int, CVector const&, bool, bool)
	* AreArmyRequired()
	* AreFbiRequired()
	* AreMiamiViceRequired()
	* AreSwatRequired()
	* CanCopJoinPursuit(CCopPed*) const
	* CanCopJoinPursuit(CCopPed*, unsigned char, CCopPed**, unsigned char&)
	* CheatWantedLevel(int)
	* ClearQdCrimes()
	* ClearWantedLevelAndGoOnParole()
	* ComputePursuitCopToDisplace(CCopPed*, CCopPed**)
	* Initialise()
	* InitialiseStaticVariables()
	* IsClosestCop(CPed*, int) const
	* IsInPursuit(CCopPed*)
	* NumOfHelisRequired()
	* RegisterCrime(eCrimeType, CVector const&, unsigned int, bool)
	* RegisterCrime_Immediately(eCrimeType, CVector const&, unsigned int, bool)
	* RemoveExcessPursuitCops()
	* RemovePursuitCop(CCopPed*)
	* RemovePursuitCop(CCopPed*, CCopPed**, unsigned char&)
	* ReportCrimeNow(eCrimeType, CVector const&, bool)
	* Reset()
	* ResetPolicePursuit()
	* SetMaximumWantedLevel(int)
	* SetPursuitCop(CCopPed*)
	* SetWantedLevel(int)
	* SetWantedLevelNoDrop(int)
	* Update()
	* UpdateCrimesQ()
	* UpdateEachFrame()
	* UpdateWantedLevel()
	* WorkOutPolicePresence(CVector, float)

CWorld (22 variables, 84 functions)
Variables list:
	* PlayerInFocus
	* Players
	* SnookerTableMax
	* SnookerTableMin
	* bDoingCarCollisions
	* bForceProcessControl
	* bIncludeBikers
	* bIncludeCarTyres
	* bIncludeDeadPeds
	* bNoMoreCollisionTorque
	* bProcessCutsceneOnly
	* bSecondShift
	* fWeaponSpreadRate
	* m_aTempColPts
	* ms_aLodPtrLists
	* ms_aRepeatSectors
	* ms_aSectors
	* ms_iProcessLineNumCrossings
	* ms_listMovingEntityPtrs
	* ms_listObjectsWithControlCode
	* ms_nCurrentScanCode
	* pIgnoreEntity

Functions list:
	* Add(CEntity*)
	* CallOffChaseForArea(float, float, float, float)
	* CallOffChaseForAreaSectorListPeds(CPtrList&, float, float, float, float, float, float, float, float)
	* CallOffChaseForAreaSectorListVehicles(CPtrList&, float, float, float, float, float, float, float, float)
	* CameraToIgnoreThisObject(CEntity*)
	* CastShadow(float, float, float, float)
	* CastShadowSectorList(CPtrList&, float, float, float, float)
	* CheckBlockListIntegrity()
	* ClearCarsFromArea(float, float, float, float, float, float)
	* ClearExcitingStuffFromArea(CVector const&, float, unsigned char)
	* ClearForRestart()
	* ClearPedsFromArea(float, float, float, float, float, float)
	* ClearScanCodes()
	* DoZoneTestForChaser(CPhysical*)
	* ExtinguishAllCarFiresInArea(CVector, float)
	* FindGroundZFor3DCoord(float, float, float, bool*, CEntity**)
	* FindGroundZForCoord(float, float)
	* FindLodOfTypeInRange(unsigned int, CVector const&, float, bool, short*, short, CEntity**)
	* FindLowestZForCoord(float, float)
	* FindMissionEntitiesIntersectingCube(CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool)
	* FindMissionEntitiesIntersectingCubeSectorList(CPtrList&, CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool)
	* FindNearestObjectOfType(int, CVector const&, float, bool, bool, bool, bool, bool, bool)
	* FindNearestObjectOfTypeSectorList(int, CPtrList&, CVector const&, float, bool, CEntity**, float*)
	* FindObjectsInRange(CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool)
	* FindObjectsInRangeSectorList(CPtrList&, CVector const&, float, bool, short*, short, CEntity**)
	* FindObjectsIntersectingAngledCollisionBox(CBox const&, CMatrix const&, CVector const&, float, float, float, float, short*, short, CEntity**, bool, bool, bool, bool, bool)
	* FindObjectsIntersectingAngledCollisionBoxSectorList(CPtrList&, CBox const&, CMatrix const&, CVector const&, short*, short, CEntity**)
	* FindObjectsIntersectingCube(CVector const&, CVector const&, short*, short, CEntity**, bool, bool, bool, bool, bool)
	* FindObjectsIntersectingCubeSectorList(CPtrList&, CVector const&, CVector const&, short*, short, CEntity**)
	* FindObjectsKindaColliding(CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool)
	* FindObjectsKindaCollidingSectorList(CPtrList&, CVector const&, float, bool, short*, short, CEntity**)
	* FindObjectsOfTypeInRange(unsigned int, CVector const&, float, bool, short*, short, CEntity**, bool, bool, bool, bool, bool)
	* FindObjectsOfTypeInRangeSectorList(unsigned int, CPtrList&, CVector const&, float, bool, short*, short, CEntity**)
	* FindPlayerSlotWithPedPointer(void*)
	* FindPlayerSlotWithRemoteVehiclePointer(void*)
	* FindPlayerSlotWithVehiclePointer(CEntity*)
	* FindRoofZFor3DCoord(float, float, float, bool*)
	* FindUnsuspectingTargetCar(CVector, CVector)
	* FindUnsuspectingTargetPed(CVector, CVector)
	* GetIsLineOfSightClear(CVector const&, CVector const&, bool, bool, bool, bool, bool, bool, bool)
	* GetIsLineOfSightSectorClear(CSector&, CRepeatSector&, CColLine const&, bool, bool, bool, bool, bool, bool, bool)
	* GetIsLineOfSightSectorListClear(CPtrList&, CColLine const&, bool, bool)
	* HandleCollisionZoneChange(eLevelName, eLevelName)
	* Initialise()
	* PrintCarChanges()
	* Process()
	* ProcessAttachedEntities()
	* ProcessForAnimViewer()
	* ProcessLineOfSight(CVector const&, CVector const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool)
	* ProcessLineOfSightSector(CSector&, CRepeatSector&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool, bool, bool, bool, bool, bool)
	* ProcessLineOfSightSectorList(CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, bool, bool)
	* ProcessPedsAfterPreRender()
	* ProcessVerticalLine(CVector const&, float, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*)
	* ProcessVerticalLineSector(CSector&, CRepeatSector&, CColLine const&, CColPoint&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*)
	* ProcessVerticalLineSectorList(CPtrList&, CColLine const&, CColPoint&, float&, CEntity*&, bool, CStoredCollPoly*)
	* ProcessVerticalLineSectorList_FillGlobeColPoints(CPtrList&, CColLine const&, CEntity*&, bool, CStoredCollPoly*)
	* ProcessVerticalLineSector_FillGlobeColPoints(CSector&, CRepeatSector&, CColLine const&, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*)
	* ProcessVerticalLine_FillGlobeColPoints(CVector const&, float, CEntity*&, bool, bool, bool, bool, bool, bool, CStoredCollPoly*)
	* Remove(CEntity*)
	* RemoveEntityInsteadOfProcessingIt(CEntity*)
	* RemoveFallenCars()
	* RemoveFallenPeds()
	* RemoveReferencesToDeletedObject(CEntity*)
	* RemoveStaticObjects()
	* RepositionCertainDynamicObjects()
	* RepositionOneObject(CEntity*)
	* ResetLineTestOptions()
	* SetAllCarsCanBeDamaged(bool)
	* SetCarsOnFire(float, float, float, float, CEntity*)
	* SetPedsChoking(float, float, float, float, CEntity*)
	* SetPedsOnFire(float, float, float, float, CEntity*)
	* SetWorldOnFire(float, float, float, float, CEntity*)
	* ShutDown()
	* SprayPaintWorld(CVector&, CVector&, float, bool)
	* StopAllLawEnforcersInTheirTracks()
	* TestForBuildingsOnTopOfEachOther()
	* TestForBuildingsOnTopOfEachOther(CPtrList&)
	* TestForUnusedModels()
	* TestForUnusedModels(CPtrList&, int*)
	* TestSphereAgainstSectorList(CPtrList&, CVector, float, CEntity*, bool)
	* TestSphereAgainstWorld(CVector, float, CEntity*, bool, bool, bool, bool, bool, bool)
	* TriggerExplosion(CVector const&, float, float, CEntity*, CEntity*, bool, float)
	* TriggerExplosionSectorList(CPtrList&, CVector const&, float, float, CEntity*, CEntity*, bool, float)
	* UseDetonator(CEntity*)

CZone (0 variables, 1 functions)
Variables list:

Functions list:
	* GetTranslatedName()

CTheZones (9 variables, 24 functions)
Variables list:
	* MapZoneArray
	* NavigationZoneArray
	* TotalNumberOfMapZones
	* TotalNumberOfNavigationZones
	* TotalNumberOfZoneInfos
	* ZoneInfoArray
	* ZonesRevealed
	* ZonesVisited
	* m_CurrLevel

Functions list:
	* AssignZoneInfoForThisZone(unsigned short)
	* Calc2DDistanceBetween2Zones(CZone*, CZone*)
	* CheckZonesForOverlap()
	* CreateZone(char*, eZoneType, float, float, float, float, float, float, eLevelName, char*)
	* DoesPointLieWithinZoneWithGivenName(CVector const*, unsigned long long, eZoneType)
	* FillZonesWithGangColours(bool)
	* FindSmallestZoneForPosition(CVector const*, unsigned char)
	* FindZoneByLabelAndReturnIndex(char*, eZoneType)
	* GetCurrentZoneLockedOrUnlocked(float, float)
	* GetLevelFromPosition(CVector const*)
	* GetMapZone(unsigned short)
	* GetNavigationZone(unsigned short)
	* GetZoneInfo(CVector const*, CZone**)
	* Init()
	* InitZonesPopulationSettings()
	* Load()
	* PointLiesWithinZone(CVector const*, CZone*)
	* PostZoneCreation()
	* ResetZonesRevealed()
	* Save()
	* SetCurrentZoneAsUnlocked()
	* SetZoneRadarColours(int, unsigned char, unsigned char, unsigned char, unsigned char)
	* Update()
	* ZoneIsEntirelyContainedWithinOtherZone(CZone*, CZone*)

CMenuManager (0 variables, 62 functions)
Variables list:

Functions list:
	* AdditionalOptionInput(unsigned char*, unsigned char*)
	* CMenuManager()
	* CentreMousePointer()
	* ChangeLanguage(signed char)
	* CheckCodesForControls(int)
	* CheckFrontEndDownInput()
	* CheckFrontEndLeftInput()
	* CheckFrontEndRightInput()
	* CheckFrontEndUpInput()
	* CheckHover(int, int, int, int)
	* CheckMissionPackValidMenu()
	* CheckRedefineControlInput()
	* CheckSliderMovement(signed char)
	* DisplayHelperText(char*)
	* DisplaySlider(float, float, float, float, float, float, int)
	* DoSettingsBeforeStartingAGame()
	* DrawBackground()
	* DrawContollerScreenExtraText(int)
	* DrawControllerBound(unsigned short, bool)
	* DrawControllerSetupScreen()
	* DrawFrontEnd()
	* DrawQuitGameScreen()
	* DrawStandardMenus(unsigned char)
	* DrawWindow(CRect const&, char*, unsigned char, CRGBA, unsigned char, unsigned char)
	* DrawWindowedText(float, float, float, char*, char*, unsigned char)
	* GetNumberOfMenuOptions()
	* HasLanguageChanged()
	* Initialise()
	* InitialiseChangedLanguageSettings(bool)
	* JumpToGenericMessageScreen(signed char, char const*, char const*)
	* LoadAllTextures()
	* LoadSettings()
	* MessageScreen(char*, bool, bool)
	* PrintBrief()
	* PrintMap()
	* PrintRadioStationList()
	* PrintStats()
	* Process()
	* ProcessFileActions()
	* ProcessMenuOptions(signed char, unsigned char*, unsigned char)
	* ProcessMissionPackNewGame()
	* ProcessPCMenuOptions(signed char, unsigned char)
	* ProcessStreaming(unsigned char)
	* ProcessUserInput(unsigned char, unsigned char, unsigned char, unsigned char, signed char)
	* RedefineScreenUserInput(unsigned char*, unsigned char*)
	* ResetHelperText()
	* SaveLoadFileError_SetUpErrorScreen()
	* SaveSettings()
	* SaveStatsToFile()
	* ScrollRadioStations(signed char)
	* SetDefaultPreferences(signed char)
	* SetFrontEndRenderStates()
	* SetHelperText(int)
	* SmallMessageScreen(char const*)
	* StretchX(float)
	* StretchY(float)
	* SwapTexturesRound(unsigned char)
	* SwitchMenuOnAndOff()
	* SwitchToNewScreen(signed char)
	* UnloadTextures()
	* UserInput()
	* ~CMenuManager()

CHud (40 variables, 28 functions)
Variables list:
	* Sprites
	* bDrawingVitalStats
	* bScriptDontDisplayAreaName
	* bScriptDontDisplayRadar
	* bScriptDontDisplayVehicleName
	* bScriptForceDisplayWithCounters
	* m_BigMessage
	* m_DisplayScoreFadeTimer
	* m_DisplayScoreState
	* m_DisplayScoreTimer
	* m_EnergyLostFadeTimer
	* m_EnergyLostState
	* m_EnergyLostTimer
	* m_ItemToFlash
	* m_LastBreathTime
	* m_LastDisplayScore
	* m_LastTimeEnergyLost
	* m_LastWanted
	* m_LastWeapon
	* m_Message
	* m_VehicleFadeTimer
	* m_VehicleNameTimer
	* m_VehicleState
	* m_WantedFadeTimer
	* m_WantedState
	* m_WantedTimer
	* m_Wants_To_Draw_3dMarkers
	* m_Wants_To_Draw_Hud
	* m_WeaponFadeTimer
	* m_WeaponState
	* m_WeaponTimer
	* m_ZoneFadeTimer
	* m_ZoneNameTimer
	* m_ZoneState
	* m_ZoneToPrint
	* m_pLastVehicleName
	* m_pLastZoneName
	* m_pVehicleName
	* m_pVehicleNameToPrint
	* m_pZoneName

Functions list:
	* Draw()
	* DrawAfterFade()
	* DrawAreaName()
	* DrawBustedWastedMessage()
	* DrawCrossHairs()
	* DrawFadeState(DRAW_FADE_STATE, int)
	* DrawHelpText()
	* DrawMissionTimers()
	* DrawMissionTitle()
	* DrawOddJobMessage(unsigned char)
	* DrawRadar()
	* DrawScriptText(unsigned char)
	* DrawSubtitles()
	* DrawSuccessFailedMessage()
	* DrawVehicleName()
	* DrawVitalStats()
	* GetRidOfAllHudMessages(unsigned char)
	* GetYPosBasedOnHealth(unsigned char, float, signed char)
	* Initialise()
	* ReInitialise()
	* ResetWastedText()
	* SetBigMessage(unsigned short*, unsigned short)
	* SetHelpMessage(char const*, unsigned short*, bool, bool, bool, unsigned int)
	* SetHelpMessageStatUpdate(unsigned char, unsigned short, float, float)
	* SetMessage(unsigned short*)
	* SetVehicleName(unsigned short*)
	* SetZoneName(unsigned short*, unsigned char)
	* Shutdown()

CHudColours (0 variables, 6 functions)
Variables list:

Functions list:
	* CHudColours()
	* GetIntColour(unsigned char)
	* GetRGB(unsigned char, unsigned char)
	* GetRGBA(unsigned char)
	* SetRGBAValue(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
	* ~CHudColours()

CLoadingScreen (25 variables, 18 functions)
Variables list:
	* m_ClockTimeOnPause
	* m_FadeAlpha
	* m_LoadingGxtMsg1
	* m_LoadingGxtMsg2
	* m_PauseTime
	* m_PercentLoaded
	* m_PopUpMessage
	* m_StartFadeTime
	* m_TimeBarAppeared
	* m_TimeStartedLoading
	* m_aSplashes
	* m_bActive
	* m_bFadeInNextSplashFromBlack
	* m_bFadeOutCurrSplashToBlack
	* m_bFading
	* m_bForceShutdown
	* m_bLegalScreen
	* m_bPaused
	* m_bReadyToDelete
	* m_bSignalDelete
	* m_bWantToPause
	* m_chunkBarAppeared
	* m_currDisplayedSplash
	* m_numChunksLoaded
	* m_timeSinceLastScreen

Functions list:
	* Continue()
	* DisplayMessage(char const*)
	* DisplayNextSplash()
	* DisplayPCScreen()
	* DoPCScreenChange(unsigned int, unsigned int)
	* DoPCTitleFadeIn()
	* DoPCTitleFadeOut()
	* GetClockTime(bool)
	* Init(bool, bool)
	* LoadSplashes(unsigned char, unsigned char)
	* NewChunkLoaded()
	* Pause()
	* RenderLoadingBar()
	* RenderSplash()
	* SetLoadingBarMsg(char const*, char const*)
	* Shutdown(bool)
	* StartFading()
	* Update()

CMenuSystem (3 variables, 29 functions)
Variables list:
	* CurrentMenuInUse
	* MenuInUse
	* num_menus_in_use

Functions list:
	* ActivateItems(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
	* ActivateOneItem(unsigned char, unsigned char, unsigned char)
	* CheckForAccept(unsigned char)
	* CheckForSelected(unsigned char)
	* CreateNewMenu(unsigned char, char*, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char)
	* Display(unsigned char, unsigned char)
	* DisplayGridMenu(unsigned char, unsigned char)
	* DisplayStandardMenu(unsigned char, unsigned char)
	* FillGridWithCarColours(unsigned char)
	* FindCarColourFromGrid(unsigned char, unsigned char)
	* GetCarColourFromGrid(unsigned char, unsigned char)
	* GetMenuPosition(unsigned char, float*, float*)
	* HighlightOneItem(unsigned char, unsigned char, unsigned char)
	* Initialise()
	* Input(unsigned char)
	* InputGridMenu(unsigned char)
	* InputStandardMenu(unsigned char)
	* InsertMenu(unsigned char, unsigned char, char*, char*, char*, char*, char*, char*, char*, char*, char*, char*, char*, char*, char*)
	* InsertOneMenuItem(unsigned char, unsigned char, unsigned char, char*)
	* InsertOneMenuItemWithNumber(unsigned char, unsigned char, unsigned char, char*, int, int)
	* IsCarColourInGrid(unsigned char, unsigned char)
	* Process(signed char)
	* SetActiveMenuItem(unsigned char, signed char)
	* SetColumnHeader(unsigned char, unsigned char, char*)
	* SetColumnOrientation(unsigned char, unsigned char, unsigned char)
	* SetColumnWidth(unsigned char, unsigned char, unsigned short)
	* SetDPadInput(unsigned char, unsigned char)
	* SetHeaderOrientation(unsigned char, unsigned char, unsigned char)
	* SwitchOffMenu(unsigned char)

CRadar (10 variables, 65 functions)
Variables list:
	* ArrowBlipColour
	* MapLegendCounter
	* MapLegendList
	* RadarBlipSprites
	* airstrip_blip
	* airstrip_location
	* m_radarRange
	* m_radarRect
	* ms_RadarTrace
	* vec2DRadarOrigin

Functions list:
	* AddBlipToLegendList(unsigned char, int)
	* CalculateBlipAlpha(float)
	* CalculateCachedSinCos()
	* ChangeBlipBrightness(int, int)
	* ChangeBlipColour(int, unsigned int)
	* ChangeBlipDisplay(int, eBlipDisplay)
	* ChangeBlipScale(int, int)
	* ClearActualBlip(int)
	* ClearBlip(int)
	* ClearBlipForEntity(eBlipType, int)
	* ClipRadarPoly(CVector2D*, CVector2D const*)
	* DisplayThisBlip(int, signed char)
	* Draw3dMarkers()
	* DrawAreaOnRadar(CRect const&, CRGBA const&, bool)
	* DrawBlips(float)
	* DrawCoordBlip(int, unsigned char, int, float)
	* DrawEntityBlip(int, unsigned char, int, float)
	* DrawLegend(int, int, int)
	* DrawMap()
	* DrawRadarGangOverlay(bool)
	* DrawRadarMap()
	* DrawRadarMask()
	* DrawRadarSection(int, int, int)
	* DrawRadarSectionMap(int, int, CRect, float)
	* DrawRadarSprite(unsigned short, float, float, unsigned char)
	* DrawRotatingRadarSprite(CSprite2d*, float, float, float, float, CRGBA)
	* DrawYouAreHereSprite(float, float)
	* GetActualBlipArrayIndex(int)
	* GetNewUniqueBlipIndex(int)
	* GetRadarTraceColour(unsigned int, unsigned char, unsigned char)
	* HasThisBlipBeenRevealed(int)
	* InitFrontEndMap()
	* Initialise()
	* LimitRadarPoint(CVector2D&)
	* LimitToMap(float*, float*)
	* Load()
	* LoadTextures()
	* RemoveMapSection(int, int)
	* RemoveRadarSections()
	* RequestMapSection(int, int)
	* Save()
	* SetBlipAlwaysDisplayInZoom(int, unsigned char)
	* SetBlipEntryExit(int, CEntryExit*)
	* SetBlipFade(int, unsigned char)
	* SetBlipFriendly(int, unsigned char)
	* SetBlipSprite(int, int)
	* SetCoordBlip(eBlipType, CVector, unsigned int, eBlipDisplay, char*)
	* SetCoordBlipAppearance(int, unsigned char)
	* SetEntityBlip(eBlipType, int, unsigned int, eBlipDisplay, char*)
	* SetMapCentreToPlayerCoords()
	* SetRadarMarkerState(int, unsigned char)
	* SetShortRangeCoordBlip(eBlipType, CVector, unsigned int, eBlipDisplay, char*)
	* SetupAirstripBlips()
	* SetupRadarRect(int, int)
	* ShowRadarMarker(CVector, unsigned int, float)
	* ShowRadarTrace(float, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)
	* ShowRadarTraceWithHeight(float, float, unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
	* Shutdown()
	* StreamRadarSections(CVector const&)
	* StreamRadarSections(int, int)
	* TransformRadarPointToRealWorldSpace(CVector2D&, CVector2D const&)
	* TransformRadarPointToScreenSpace(CVector2D&, CVector2D const&)
	* TransformRealWorldPointToRadarSpace(CVector2D&, CVector2D const&)
	* TransformRealWorldToTexCoordSpace(CVector2D&, CVector2D const&, int, int)
	* TransformScreenSpaceToRadarPoint(CVector2D&, CVector2D&)

FurnitureSubGroup_c (0 variables, 3 functions)
Variables list:

Functions list:
	* AddFurniture(unsigned short, short, unsigned char, unsigned char, unsigned char)
	* GetFurniture(short, unsigned char)
	* GetRandomId(unsigned char)

FurnitureGroup_c (0 variables, 6 functions)
Variables list:

Functions list:
	* AddFurniture(int, unsigned short, short, unsigned char, unsigned char, unsigned char)
	* AddSubGroup(int, int, int, int, int, unsigned char, unsigned char, unsigned char)
	* Exit()
	* GetFurniture(int, short, unsigned char)
	* GetRandomId(int, unsigned char)
	* Init()

FurnitureManager_c (0 variables, 8 functions)
Variables list:

Functions list:
	* Exit()
	* GetFurniture(int, int, short, unsigned char)
	* GetGroupId(char*)
	* GetRandomId(int, int, unsigned char)
	* GetSubGroupId(char*)
	* Init()
	* LoadFurniture()
	* ~FurnitureManager_c()

Interior_c (0 variables, 56 functions)
Variables list:

Functions list:
	* AddGotoPt(int, int, float, float)
	* AddInteriorInfo(int, float, float, int, CEntity*)
	* AddPickups()
	* Bedroom_AddTableItem(int, int, int, int, int, int)
	* CalcExitPts()
	* CalcMatrix(RwV3d*)
	* CheckTilesEmpty(int, int, int, int, unsigned char)
	* Exit()
	* FindBoundingBox(int, int, int*, int*, int*, int*, int*)
	* FindEmptyTiles(int, int, int*, int*)
	* FindFirstEmptyTile(int, int, int)
	* Furnish()
	* FurnishBedroom()
	* FurnishKitchen()
	* FurnishLounge()
	* FurnishOffice()
	* FurnishShop(int)
	* GetBoundingBox(FurnitureEntity_c*, CVector*)
	* GetFurnitureEntity(CEntity*)
	* GetNumEmptyTiles(int, int, int, int)
	* GetRandomTile(int, int*, int*)
	* GetTileCentre(float, float, RwV3d*)
	* GetTileStatus(int, int)
	* Init(RwV3d*)
	* Interior_c()
	* IsPtInside(RwV3d*, float, float, float)
	* IsVisible()
	* Kitchen_FurnishEdges()
	* Lounge_AddChairInfo(int, int, CEntity*)
	* Lounge_AddHifi(int, int, int, int)
	* Lounge_AddSofaInfo(int, int, CEntity*)
	* Lounge_AddTV(int, int, int, int)
	* Office_FurnishCenter()
	* Office_FurnishEdges()
	* Office_PlaceDesk(int, int, int, int, unsigned char, int)
	* Office_PlaceDeskQuad(int, int, int, int)
	* Office_PlaceEdgeDesks(int, int, int, int, int)
	* Office_PlaceEdgeFillers(int, int, int, int, int)
	* PlaceFurniture(Furniture_c*, int, int, float, int, int, int*, int*, unsigned char)
	* PlaceFurnitureInCorner(int, int, int, float, int, int, int, int*, int*, int*, int*, int*)
	* PlaceFurnitureOnWall(int, int, int, float, int, int, int, int, int*, int*, int*, int*, int*, int*)
	* PlaceObject(unsigned char, Furniture_c*, float, float, float, float)
	* ResetTiles()
	* SetCornerTiles(int, int, int, unsigned char)
	* SetTilesStatus(int, int, int, int, int, unsigned char)
	* Shop_AddShelfInfo(int, int, int)
	* Shop_FurnishAisles()
	* Shop_FurnishCeiling()
	* Shop_FurnishEdges()
	* Shop_GetRandomUnitType()
	* Shop_Place3PieceUnit(int, int, int, int, int)
	* Shop_PlaceCounter(unsigned char)
	* Shop_PlaceEdgeUnits(int, int, int, int)
	* Shop_PlaceFixedUnits()
	* Unfurnish()
	* ~Interior_c()

InteriorGroup_c (0 variables, 29 functions)
Variables list:

Functions list:
	* AddInterior(Interior_c*)
	* ArePathsLoaded()
	* CalcIsVisible()
	* ContainsInteriorType(int)
	* DereferenceAnims()
	* Exit()
	* FindClosestInteriorInfo(int, CVector, float, InteriorInfo_t**, Interior_c**, float*)
	* FindInteriorInfo(int, InteriorInfo_t**, Interior_c**)
	* GetEntity()
	* GetEntryExitPtr()
	* GetNumInteriorInfos(int)
	* GetPed(int)
	* GetRandomInterior()
	* Init(CEntity*, int)
	* MarkPedForRemoval(CPed*)
	* ReferenceAnims()
	* RemoveInterior(Interior_c*)
	* RemovePed(CPed*)
	* Setup()
	* SetupHousePeds()
	* SetupOfficePeds()
	* SetupPaths()
	* SetupPeds()
	* SetupShopPeds()
	* Update()
	* UpdateHousePeds()
	* UpdateOfficePeds()
	* UpdatePeds()
	* UpdateShopPeds()

InteriorManager_c (0 variables, 24 functions)
Variables list:

Functions list:
	* Activate(unsigned char)
	* ActivatePeds(unsigned char)
	* AddSameGroupEffectInfos(InteriorEffectInfo_t*, int)
	* AreAnimsLoaded(int)
	* Exit()
	* FindStealableObjectId(CEntity*)
	* FindStealableObjectId(int, int, CVector)
	* Freeze(unsigned char)
	* GetBoundingBox(CEntity*, CVector*)
	* GetInteriorFromPool()
	* GetPedsInterior(CPed*)
	* GetPedsInteriorGroup(CPed*)
	* GetVectorsInterior(CVector*)
	* GetVisibleEffects(InteriorEffectInfo_t*, int)
	* HasInteriorHadStealDataSetup(Interior_c*)
	* Init()
	* IsGroupActive(int)
	* IsInteriorEffectVisible(C2dEffect*, CEntity*)
	* PruneVisibleEffects(InteriorEffectInfo_t*, int, int, float)
	* ReturnInteriorToPool(Interior_c*)
	* SetEntryExitPtr(CEntryExit*)
	* SetStealableObjectStolen(CEntity*, unsigned char)
	* Update()
	* ~InteriorManager_c()

CMatrix (0 variables, 37 functions)
Variables list:

Functions list:
	* Attach(RwMatrixTag*, bool)
	* AttachRW(RwMatrixTag*, bool)
	* CMatrix(CMatrix const&)
	* CMatrix(RwMatrixTag*, bool)
	* CheckIntegrity()
	* ConvertFromEulerAngles(float, float, float, int)
	* ConvertToEulerAngles(float&, float&, float&, int)
	* CopyOnlyMatrix(CMatrix const&)
	* CopyToRwMatrix(RwMatrixTag*) const
	* Detach()
	* ForceUpVector(CVector)                            #
	* Reorthogonalise()                                 #
	* ResetOrientation()
	* Rotate(float, float, float)                       #
	* RotateX(float)                                    #
	* RotateY(float)                                    #
	* RotateZ(float)                                    #
	* SetRotate(CQuaternion const&)
	* SetRotate(float, float, float)                    #
	* SetRotateX(float)                                 #
	* SetRotateXOnly(float)                             #
	* SetRotateY(float)                                 #        
	* SetRotateYOnly(float)                             #
	* SetRotateZ(float)                                 #
	* SetRotateZOnly(float)                             #
	* SetScale(float)                                   #
	* SetScale(float, float, float)                     #
	* SetTranslate(float, float, float)                 #    
	* SetTranslateOnly(float, float, float)             #
	* SetUnity()                                        #
	* Update()
	* UpdateMatrix(RwMatrixTag*)
	* UpdateRW() const
	* UpdateRwMatrix(RwMatrixTag*) const
	* operator+=(CMatrix const&)
	* operator=(CMatrix const&)
	* ~CMatrix()

CMaths (1 variables, 1 functions)
Variables list:
	* ms_SinTable

Functions list:
	* InitMathsTables()

CCompressedMatrixNotAligned (0 variables, 2 functions)
Variables list:

Functions list:
	* CompressFromFullMatrix(CMatrix&)
	* DecompressIntoFullMatrix(CMatrix&)

CQuaternion (0 variables, 9 functions)
Variables list:

Functions list:
	* Get(RwMatrixTag*) const
	* Get(RwV3d*, float*) const
	* Get(float*, float*, float*) const
	* Multiply(CQuaternion const&, CQuaternion const&)
	* Set(RwMatrixTag const&)
	* Set(RwV3d*, float)
	* Set(float, float, float)
	* Slerp(CQuaternion const&, CQuaternion const&, float)
	* Slerp(CQuaternion const&, CQuaternion const&, float, float, float)

CNetworkPC (1 variables, 11 functions)
Variables list:
	* sm_network_up

Functions list:
	* CNetworkPC()
	* Connect(unsigned int, char*)
	* Disconnect(int)
	* InitNetwork()
	* IsNetworkUp()
	* RecvBytes(int, void*, unsigned long)
	* SendBytes(int, void*, unsigned long)
	* SetNetworkUp(bool)
	* ShutdownNetwork()
	* _CheckError()
	* ~CNetworkPC()

CBugstarNetwork (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CBugstarNetwork()

BreakObject_c (0 variables, 11 functions)
Variables list:

Functions list:
	* BreakObject_c()
	* CalcGroupCenter(BreakGroup_t*)
	* DoCollision(BreakGroup_t*, float)
	* DoCollisionResponse(BreakGroup_t*, float, RwV3d*, float)
	* Exit()
	* Init(CObject*, RwV3d*, float, int)
	* Render(unsigned char)
	* SetBreakInfo(BreakInfo_t*, int)
	* SetGroupData(RwMatrixTag*, RwV3d*, float)
	* Update(float)
	* ~BreakObject_c()

BreakManager_c (0 variables, 9 functions)
Variables list:

Functions list:
	* Add(CObject*, RwV3d*, float, int)
	* BreakManager_c()
	* Exit()
	* GetFirstFreeSlot()
	* Init()
	* Render(unsigned char)
	* ResetAll()
	* Update(float)
	* ~BreakManager_c()

CDummyObject (0 variables, 5 functions)
Variables list:

Functions list:
	* CDummyObject()
	* CDummyObject(CObject*)
	* CreateObject()
	* UpdateFromObject(CObject*)
	* ~CDummyObject()

CHandObject (0 variables, 5 functions)
Variables list:

Functions list:
	* CHandObject(int, CPed*, bool)
	* PreRender()
	* ProcessControl()
	* Render()
	* ~CHandObject()

CObjectData (1 variables, 2 functions)
Variables list:
	* ms_aObjectInfo

Functions list:
	* Initialise(char*, bool)
	* SetObjectData(int, CObject&)

ProcSurfaceInfo_c (0 variables, 7 functions)
Variables list:

Functions list:
	* AddObject(CVector, CVector, unsigned char)
	* AddObjects(CPlantLocTri*)
	* Exit()
	* Init(char*, char*, float, float, int, int, float, float, float, float, float, float, unsigned char, unsigned char)
	* IsPtInTriangle2D(float, float, CVector, CVector, CVector, CVector, float*)
	* ProcSurfaceInfo_c()
	* ~ProcSurfaceInfo_c()

ProcObjectMan_c (0 variables, 10 functions)
Variables list:

Functions list:
	* Exit()
	* GetEntityFromPool()
	* Init()
	* LoadDataFile()
	* ProcObjectMan_c()
	* ProcessTriangleAdded(CPlantLocTri*)
	* ProcessTriangleRemoved(CPlantLocTri*)
	* ReturnEntityToPool(EntityItem_c*)
	* Update()
	* ~ProcObjectMan_c()

CProjectile (0 variables, 2 functions)
Variables list:

Functions list:
	* CProjectile(int)
	* ~CProjectile()

CPedClothesDesc (0 variables, 9 functions)
Variables list:

Functions list:
	* CPedClothesDesc()
	* GetIsWearingBalaclava()
	* HasVisibleNewHairCut(int)
	* HasVisibleTattoo()
	* Initialise()
	* SetModel(char const*, int)
	* SetModel(unsigned int, int)
	* SetTextureAndModel(char const*, char const*, int)
	* SetTextureAndModel(unsigned int, unsigned int, int)

CClothes (3 variables, 11 functions)
Variables list:
	* ms_clothesImageId
	* ms_clothesRules
	* ms_numRuleTags

Functions list:
	* ConstructPedModel(unsigned int, CPedClothesDesc&, CPedClothesDesc const*, bool)
	* GetDefaultPlayerMotionGroup()
	* GetDependentTexture(int)
	* GetPlayerMotionGroupToLoad()
	* GetTextureDependency(int)
	* Init()
	* LoadClothesFile()
	* RebuildCutscenePlayer(CPlayerPed*, int)
	* RebuildPlayer(CPlayerPed*, bool)
	* RebuildPlayerIfNeeded(CPlayerPed*)
	* RequestMotionGroupAnims()

CClothesBuilder (4 variables, 28 functions)
Variables list:
	* ms_geometryHasChanged
	* ms_pOldClothesState
	* ms_ratiosHaveChanged
	* ms_textureHasChanged

Functions list:
	* AddColour(RwRGBA*)
	* BlendGeometry(RpClump*, char const*, char const*, char const*, float, float, float)
	* BlendGeometry(RpClump*, char const*, char const*, float, float)
	* BlendTextures(RwTexture*, RwTexture*, RwTexture*, float, float, float, int)
	* BlendTextures(RwTexture*, RwTexture*, RwTexture*, float, float, float, int, RwTexture*)
	* BlendTextures(RwTexture*, RwTexture*, float, float, int)
	* BuildBoneIndexConversionTable(unsigned char*, RpHAnimHierarchy*, int)
	* ConstructGeometryAndSkinArrays(RpHAnimHierarchy*, RpGeometry**, RwMatrixWeights**, unsigned int**, unsigned int, RpGeometry**, RpMaterial**)
	* ConstructGeometryArray(RpGeometry**, unsigned int*, float, float, float)
	* ConstructTextures(RwTexDictionary*, unsigned int*, float, float, float)
	* CopyGeometry(RpClump*, char const*, char const*)
	* CopyTexture(RwTexture*)
	* CreateSkinnedClump(RpClump*, RwTexDictionary*, CPedClothesDesc&, CPedClothesDesc const*, bool)
	* DestroySkinArrays(RwMatrixWeights*, unsigned int*)
	* FillPalette(RwRGBA*)
	* FindNearestColour(RwRGBA*)
	* GetClothesTexture(unsigned int, char const*)
	* InitPaletteOctTree(int)
	* LoadCdDirectory()
	* PlaceTextureOnTopOfTexture(RwTexture*, RwTexture*)
	* PreprocessClothesDesc(CPedClothesDesc&, bool)
	* PutOnClothes(RwTexture*, RwTexture*)
	* ReducePaletteOctTree(int)
	* ReducePaletteSize(RwTexture*, int)
	* ReleaseGeometry(int)
	* RequestGeometry(int, unsigned int)
	* ShutdownPaletteOctTree()
	* StoreBoneArray(RpClump*, int)

COctTreeBase (0 variables, 7 functions)
Variables list:

Functions list:
	* COctTreeBase()
	* FillPalette(unsigned char*)
	* Init(int)
	* Insert(unsigned char, unsigned char, unsigned char)
	* InsertTree(unsigned char, unsigned char, unsigned char)
	* ReduceBranches(int)
	* ~COctTreeBase()

COctTree (2 variables, 13 functions)
Variables list:
	* ms_bFailed
	* ms_level

Functions list:
	* COctTree()
	* FillPalette(unsigned char*)
	* FindNearestColour(unsigned char, unsigned char, unsigned char)
	* InitPool(void*, int)
	* InsertTree(unsigned char, unsigned char, unsigned char)
	* NoOfChildren()
	* ReduceTree()
	* RemoveChildren()
	* ShutdownPool()
	* empty()
	* operator delete(void*)
	* operator new(unsigned int)
	* ~COctTree()

CPool<COctTree, COctTree> (0 variables, 2 functions)
Variables list:

Functions list:
	* Flush()
	* ~CPool()

CCredits (2 variables, 6 functions)
Variables list:
	* CreditsStartTime
	* bCreditsGoing

Functions list:
	* PrintCreditSpace(float, unsigned int&)
	* PrintCreditText(float, float, unsigned short*, unsigned int&, float, bool)
	* Render()
	* RenderCredits()
	* Start()
	* Stop()

CColAccel (13 variables, 11 functions)
Variables list:
	* m_colBounds
	* m_iCacheState
	* m_iCachingColSize
	* m_iCachingIPLSize
	* m_iNumColBounds
	* m_iNumColItems
	* m_iNumIPLItems
	* m_iNumSections
	* m_iSectionSize
	* m_iplDefs
	* mp_cCacheName
	* mp_caccColItems
	* mp_caccIPLItems

Functions list:
	* addCacheCol(int, CColModel const&)
	* addColDef(ColDef)
	* addIPLEntity(CEntity**, int, int)
	* cacheIPLSection(CEntity**, int)
	* cacheLoadCol()
	* endCache()
	* getColDef(ColDef&)
	* getIplDef(int)
	* isCacheLoading()
	* setIplDef(int, IplDef)
	* startCache()

CPopulation (37 variables, 65 functions)
Variables list:
	* CurrentWorldZone
	* MaxNumberOfPedsInUse
	* NumMiamiViceCops
	* NumberOfPedsInUseInterior
	* PedDensityMultiplier
	* RegenerationFront
	* RegenerationPoint_a
	* RegenerationPoint_b
	* bInPoliceStation
	* bZoneChangeHasHappened
	* m_AllRandomPedsThisType
	* m_AppropriateLoadedCars
	* m_CarGroups
	* m_CountDownToPedsAtStart
	* m_InAppropriateLoadedCars
	* m_LoadedBoats
	* m_LoadedGangCars
	* m_PedGroups
	* m_TranslationArray
	* m_bDontCreateRandomCops
	* m_bDontCreateRandomGangMembers
	* m_bIsHospital
	* m_bMoreCarsAndFewerPeds
	* m_bOnlyCreateRandomGangMembers
	* m_nNumCarsInGroup
	* m_nNumPedsInGroup
	* ms_nNumCivFemale
	* ms_nNumCivMale
	* ms_nNumCop
	* ms_nNumDealers
	* ms_nNumEmergency
	* ms_nNumGang
	* ms_nTotalCarPassengerPeds
	* ms_nTotalCivPeds
	* ms_nTotalGangPeds
	* ms_nTotalMissionPeds
	* ms_nTotalPeds

Functions list:
	* AddDeadPedInFrontOfCar(CVector const&, CVehicle*)
	* AddExistingPedInCar(CPed*, CVehicle*)
	* AddPed(ePedType, unsigned int, CVector const&, bool)
	* AddPedAtAttractor(int, C2dEffect*, CVector, CEntity*, int)
	* AddPedInCar(CVehicle*, bool, int, int, bool, bool)
	* AddToPopulation(float, float, float, float)
	* ArePedStatsCompatible(int, int)
	* CanJeerAtStripper(int)
	* CanSolicitPlayerInCar(int)
	* CanSolicitPlayerOnFoot(int)
	* ChooseCivilianCoupleOccupations(int&, int&)
	* ChooseCivilianOccupation(bool, bool, int, int, int, bool, bool, bool, char*)
	* ChooseCivilianOccupationForVehicle(bool, CVehicle*)
	* ChooseGangOccupation(int)
	* ChoosePolicePedOccupation()
	* ConvertAllObjectsToDummyObjects()
	* ConvertToDummyObject(CObject*)
	* ConvertToRealObject(CDummyObject*)
	* CreateWaitingCoppers(CVector, float)
	* DealWithZoneChange(eLevelName, eLevelName, bool)
	* FindCarMultiplierMotorway()
	* FindDistanceToNearestPedOfType(ePedType, CVector)
	* FindDummyDistForModel(int)
	* FindNumberOfPedsWeCanPlaceOnBenches()
	* FindPedDensityMultiplierCullZone()
	* FindPedMultiplierMotorway()
	* FindPedRaceFromName(char*)
	* FindSpecificDriverModelForCar_ToUse(int)
	* GeneratePedsAtAttractors(CVector, float, float, float, float, int, int)
	* GeneratePedsAtStartOfGame()
	* Initialise()
	* IsCorrectTimeOfDayForEffect(C2dEffect const*)
	* IsFemale(int)
	* IsMale(int)
	* IsSecurityGuard(ePedType)
	* IsSkateable(CVector const&)
	* IsSunbather(int)
	* LoadCarGroups()
	* LoadPedGroups()
	* LoadSpecificDriverModelsForCar(int)
	* ManageAllPopulation()
	* ManageDummy(CDummy*, CVector const&)
	* ManageObject(CObject*, CVector const&)
	* ManagePed(CPed*, CVector const&)
	* ManagePopulation()
	* MoveCarsAndPedsOutOfAbandonedZones()
	* PedCreationDistMultiplier()
	* PedMICanBeCreatedAtAttractor(int)
	* PedMICanBeCreatedAtThisAttractor(int, char*)
	* PedMICanBeCreatedInInterior(int)
	* PickGangCar(int)
	* PickRiotRoadBlockCar()
	* PlaceCouple(ePedType, int, ePedType, int, CVector)
	* PlaceGangMembers(ePedType, int, CVector const&)
	* PlaceMallPedsAsStationaryGroup(CVector const&, int)
	* PopulateInterior(int, CVector)
	* RemoveAllRandomPeds()
	* RemovePed(CPed*)
	* RemovePedsIfThePoolGetsFull()
	* RemoveSpecificDriverModelsForCar(int)
	* Shutdown()
	* TestRoomForDummyObject(CObject*)
	* TestSafeForRealObject(CDummyObject*)
	* Update(bool)
	* UpdatePedCount(CPed*, unsigned char)

CFont (11 variables, 46 functions)
Variables list:
	* Details
	* NewLine
	* PS2Sprite
	* PS2Symbol
	* RenderState
	* Size
	* Sprite
	* UsingEFIGSLanguage
	* UsingJapaneseLanguage
	* UsingKoreanLanguage
	* UsingRussianLanguage

Functions list:
	* AddEFIGSFont()
	* AddJapaneseTexture()
	* AddRussianTexture()
	* AddStandardTexture()
	* ClearSpecialLanguages()
	* ComputeHeight(float)
	* FilterOutTokensFromString(unsigned short*)
	* FindSubFontCharacter(unsigned short, unsigned char)
	* GetCharacterSize(unsigned short)
	* GetHeight(bool)
	* GetNextSpace(unsigned short*)
	* GetNumberLines(float, float, unsigned short*)
	* GetStringWidth(unsigned short*, unsigned char, unsigned char)
	* GetStringWidth(unsigned short*, unsigned char, unsigned char, unsigned char)
	* GetTextRect(CRect*, float, float, unsigned short*)
	* InitPerFrame()
	* Initialise()
	* LoadFontValues()
	* ParseToken(unsigned short*, CRGBA&, unsigned char, char*)
	* PrintChar(float, float, unsigned short)
	* PrintString(float, float, unsigned short*)
	* PrintStringFromBottom(float, float, unsigned short*)
	* ProcessCurrentString(unsigned char, float, float, unsigned short*)
	* ProcessStringToDisplay(float, float, unsigned short*)
	* RemapCharacterWithoutGraphic(unsigned short)
	* RenderFontBuffer()
	* RenderString(float, float, unsigned short*, unsigned short*, float)
	* SetAlphaFade(float)
	* SetBackground(unsigned char, unsigned char)
	* SetBackgroundColor(CRGBA)
	* SetCentreSize(float)
	* SetColor(CRGBA)
	* SetDropColor(CRGBA)
	* SetDropShadowPosition(signed char)
	* SetEdge(signed char)
	* SetFontStyle(unsigned char)
	* SetJustify(unsigned char)
	* SetOrientation(unsigned char)
	* SetProportional(unsigned char)
	* SetRightJustifyWrap(float)
	* SetScale(float)
	* SetSlant(float)
	* SetSlantRefPoint(float, float)
	* SetWrapx(float)
	* Shutdown()
	* character_code(unsigned char)

cHandlingDataMgr (0 variables, 11 functions)
Variables list:

Functions list:
	* ConvertBikeDataToGameUnits(tBikeHandlingData*)
	* ConvertBikeDataToWorldUnits(tBikeHandlingData*)
	* ConvertDataToGameUnits(tHandlingData*)
	* ConvertDataToWorldUnits(tHandlingData*)
	* FindExactWord(char*, char*, int, int)
	* GetBoatPointer(unsigned char)
	* GetFlyingPointer(unsigned char)
	* GetHandlingId(char const*)
	* Initialise()
	* LoadHandlingData()
	* cHandlingDataMgr()

CPedStats (1 variables, 6 functions)
Variables list:
	* ms_apPedStats

Functions list:
	* FindIndexWithPedStat(CPedStats*)
	* GetPedStatInfo(char*)
	* GetPedStatType(char*)
	* Initialise()
	* LoadPedStats()
	* Shutdown()

CDecisionMakerTypesFileLoader (2 variables, 7 functions)
Variables list:
	* ms_grp_DM_Names
	* ms_ped_DM_Names

Functions list:
	* GetGrpDMName(int, char*)
	* GetPedDMName(int, char*)
	* LoadDecisionMaker(char const*, CDecisionMaker&)
	* LoadDecisionMaker(char const*, unsigned char, unsigned char, int)
	* LoadDefaultDecisionMaker()
	* ReStart()
	* UnloadDecisionMaker(int)

CPopCycle (26 variables, 23 functions)
Variables list:
	* m_NumCops_Cars
	* m_NumCops_Peds
	* m_NumDealers_Cars
	* m_NumDealers_Peds
	* m_NumGangs_Cars
	* m_NumGangs_Peds
	* m_NumOther_Cars
	* m_NumOther_Peds
	* m_bCurrentZoneIsGangArea
	* m_fCurrentZoneDodgyness
	* m_fPercCops
	* m_fPercDealers
	* m_fPercGangs
	* m_fPercOther
	* m_nCurrentTimeIndex
	* m_nCurrentTimeOfWeek
	* m_nCurrentZoneType
	* m_nMaxNumCars
	* m_nMaxNumPeds
	* m_nPercCops
	* m_nPercDealers
	* m_nPercGang
	* m_nPercOther
	* m_nPercTypeGroup
	* m_pCurrZone
	* m_pCurrZoneInfo

Functions list:
	* Display()
	* FindNewPedType(ePedType*, int*, bool, bool)
	* GetCurrentMaxNumCars()
	* GetCurrentMaxNumPeds()
	* GetCurrentPercCops()
	* GetCurrentPercDealers()
	* GetCurrentPercGangs()
	* GetCurrentPercOther_Cars()
	* GetCurrentPercOther_Peds()
	* GetCurrentPercTypeGroup(int)
	* Initialise()
	* IsPedAppropriateForCurrentZone(int)
	* IsPedInGroup(int, int)
	* PedIsAcceptableInCurrentZone(int)
	* PickARandomGroupOfOtherPeds()
	* PickGangToCreateMembersOf()
	* PickPedMIToStreamInForCurrentZone()
	* PlayerKilledADealer()
	* Update()
	* UpdateAreaDodgyness()
	* UpdateDealerStrengths()
	* UpdateIsGangArea()
	* UpdatePercentages()

CWeaponInfo (2 variables, 9 functions)
Variables list:
	* ms_aWeaponAimOffsets
	* ms_aWeaponNames

Functions list:
	* FindWeaponFireType(char const*)
	* FindWeaponType(char const*)
	* GetSkillStatIndex(eWeaponType)
	* GetTargetHeadRange()
	* GetWeaponInfo(eWeaponType, signed char)
	* GetWeaponReloadTime()
	* Initialise()
	* LoadWeaponData()
	* Shutdown()

CTaskSimpleFight (5 variables, 26 functions)
Variables list:
	* m_aComboData
	* m_aHitOffset
	* m_sStrikeColData
	* m_sStrikeColModel
	* m_sStrikeSpheres

Functions list:
	* BeHitWhileBlocking(CPed*, CPed*, signed char, signed char)
	* CTaskSimpleFight(CEntity*, int, unsigned int)
	* ChooseAttackAI(CPed*)
	* ChooseAttackPlayer(CPed*)
	* Clone() const
	* ControlFight(CEntity*, signed char)
	* FightHitCar(CPed*, CVehicle*, CVector&, CVector&, short, unsigned char)
	* FightHitObj(CPed*, CObject*, CVector&, CVector&, short, unsigned char)
	* FightHitPed(CPed*, CPed*, CVector&, CVector&, short)
	* FightSetUpCol(float)
	* FightStrike(CPed*, CVector&)
	* FindTargetOnGround(CPed*)
	* FinishMeleeAnimCB(CAnimBlendAssociation*, void*)
	* GetAvailableComboSet(CPed*, signed char)
	* GetComboType(char*)
	* GetHitLevel(char const*)
	* GetHitSound(int)
	* GetRange() const
	* GetStrikeDamage(CPed*)
	* GetTaskType() const
	* LoadMeleeData()
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPlayerMoveAnim(CPlayerPed*)
	* StartAnim(CPed*, int)
	* ~CTaskSimpleFight()

CGenericGameStorage (18 variables, 22 functions)
Variables list:
	* ms_BlockTagName
	* ms_CheckSum
	* ms_FileHandle
	* ms_FilePos
	* ms_FileSize
	* ms_LevelToLoad
	* ms_LoadFileName
	* ms_LoadFileNameWithPath
	* ms_SaveFileNameJustSaved
	* ms_SlotFileName
	* ms_SlotSaveDate
	* ms_Slots
	* ms_ValidSaveName
	* ms_WorkBuffer
	* ms_WorkBufferPos
	* ms_WorkBufferSize
	* ms_bFailed
	* ms_bLoading

Functions list:
	* CheckDataNotCorrupt(int, char*)
	* CheckSlotDataValid(int, bool)
	* CloseFile()
	* DoAnytimeSavingStuffAfterSucessLoad()
	* DoGameSpecificStuffAfterSucessLoad()
	* DoGameSpecificStuffBeforeSave()
	* GenericLoad(bool&)
	* GenericSave(int)
	* GetCurrentVersionNumber()
	* GetNameOfSavedGame(int)
	* GetSavedRadioStationPosition(int)
	* InitNewSettingsAfterLoad()
	* InitRadioStationPositionList()
	* LoadDataFromWorkBuffer(void*, int)
	* LoadWorkBuffer()
	* MakeValidSaveName(int)
	* OpenFileForReading(char*, unsigned int)
	* OpenFileForWriting()
	* ReportError(CGenericGameStorage::eBlocks, CGenericGameStorage::eSaveLoadError)
	* RestoreForStartLoad()
	* SaveDataToWorkBuffer(void*, int)
	* SaveWorkBuffer(bool)

CSimpleVariablesSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct()
	* Extract(unsigned int&)

CObjectSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct(CObject*)
	* Extract(CObject*)

CPedSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct(CPed*)
	* Extract(CPed*)

CVehicleSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct(CVehicle*)
	* Extract(CVehicle*)

CPlayerPedDataSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct(CPlayerPedData*)
	* Extract(CPlayerPedData*)

CPlayerInfoSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct(CPlayerInfo*)
	* Extract(CPlayerInfo*)

CGangWarsSaveStructure (0 variables, 2 functions)
Variables list:

Functions list:
	* Construct()
	* Extract()

CPlayerPed (5 variables, 70 functions)
Variables list:
	* bDebugPlayerInvincible
	* bDebugTapToTarget
	* bDebugTargetting
	* bHasDisplayedPlayerQuitEnterCarHelpText
	* bSwipeTargetHeads

Functions list:
	* AnnoyPlayerPed(bool)
	* Busted()
	* CPlayerPed(int, bool)
	* CanIKReachThisTarget(CVector, CWeapon*, bool)
	* CanPlayerStartMission()
	* CheatWantedLevel(int)
	* Clear3rdPersonMouseTarget()
	* ClearAdrenaline()
	* ClearWeaponTarget()
	* Compute3rdPersonMouseTarget(bool)
	* ControlButtonSprint(eSprintType)
	* DeactivatePlayerPed(int)
	* DisbandPlayerGroup()
	* DisplayTargettingDebug()
	* DoStuffToGoOnFire()
	* DoesPlayerWantNewWeapon(eWeaponType, bool)
	* DoesTargetHaveToBeBroken(CEntity*, CWeapon*)
	* DrawTriangleForMouseRecruitPed() const
	* EvaluateNeighbouringTarget(CEntity*, CEntity**, float*, float, float, bool)
	* EvaluateTarget(CEntity*, CEntity**, float*, float, float, bool)
	* FindNextWeaponLockOnTarget(CEntity*, bool)
	* FindPedToAttack()
	* FindSprayableBuilding()
	* FindTargetPriority(CEntity*)
	* FindWeaponLockOnTarget()
	* ForceGroupToAlwaysFollow(bool)
	* ForceGroupToNeverFollow(bool)
	* GetButtonSprintResults(eSprintType)
	* GetPadFromPlayer()
	* GetPlayerInfoForThisPlayerPed()
	* GetWeaponRadiusOnScreen()
	* HandlePlayerBreath(bool, float)
	* HandleSprintEnergy(bool, float)
	* HandleTapToTarget(float, float, bool)
	* IsHidden() const
	* KeepAreaAroundPlayerClear()
	* Load()
	* MakeChangesForNewWeapon(eWeaponType)
	* MakeChangesForNewWeapon(int)
	* MakeGroupRespondToPlayerTakingDamage(CEventDamage const&)
	* MakePlayerGroupDisappear()
	* MakePlayerGroupReappear()
	* MakeThisPedJoinOurGroup(CPed*)
	* MovementDisabledBecauseOfTargeting()
	* PedCanBeTargettedVehicleWise(CPed*)
	* PickWeaponAllowedFor2Player()
	* PlayerHasJustAttackedSomeone()
	* PlayerWantsToAttack()
	* ProcessAnimGroups()
	* ProcessControl()
	* ProcessGroupBehaviour(CPad*)
	* ProcessPlayerWeapon(CPad*)
	* ProcessWeaponSwitch(CPad*)
	* ReApplyMoveAnims()
	* ReactivatePlayerPed(int)
	* RemovePlayerPed(int)
	* ResetPlayerBreath()
	* ResetSprintEnergy()
	* RotatePlayerToTrackTarget()
	* Save()
	* SetInitialState(bool)
	* SetMoveAnim()
	* SetPlayerMoveBlendRatio(CVector*)
	* SetRealMoveAnim()
	* SetWantedLevel(int)
	* SetWantedLevelNoDrop(int)
	* SetupPlayerPed(int)
	* TellGroupToStartFollowingPlayer(bool, bool, bool)
	* UpdateCameraWeaponModes(CPad*)
	* ~CPlayerPed()

CPedGroups (5 variables, 14 functions)
Variables list:
	* ScriptReferenceIndex
	* ms_activeGroups
	* ms_bIsPlayerOnAMission
	* ms_groups
	* ms_iNoOfPlayerKills

Functions list:
	* AddGroup()
	* AreInSameGroup(CPed const*, CPed const*)
	* CleanUpForShutDown()
	* GetGroupId(CPedGroup*)
	* GetPedsGroup(CPed const*)
	* Init()
	* IsGroupLeader(CPed*)
	* IsInPlayersGroup(CPed const*)
	* Load()
	* Process()
	* RegisterKillByPlayer()
	* RemoveAllFollowersFromGroup(int)
	* RemoveGroup(int)
	* Save()

CSaveGarage (0 variables, 2 functions)
Variables list:

Functions list:
	* CopyGarageIntoSaveGarage(CGarage*)
	* CopyGarageOutOfSaveGarage(CGarage*)

CTheCarGenerators (5 variables, 6 functions)
Variables list:
	* CarGeneratorArray
	* GenerateEvenIfPlayerIsCloseCounter
	* NumOfCarGenerators
	* ProcessCounter
	* m_SpecialPlateHandler

Functions list:
	* CreateCarGenerator(float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
	* Init()
	* Load()
	* Process()
	* RemoveCarGenerators(unsigned char)
	* Save()

CGangs (2 variables, 8 functions)
Variables list:
	* Gang
	* GangAttackWithCops

Functions list:
	* ChooseGangPedModel(short)
	* GetWillAttackPlayerWithCops(ePedType)
	* Initialise()
	* Load()
	* Save()
	* SetGangPedModelOverride(short, signed char)
	* SetGangWeapons(short, int, int, int)
	* SetWillAttackPlayerWithCops(ePedType, bool)

CPedType (1 variables, 13 functions)
Variables list:
	* ms_apPedTypes

Functions list:
	* ClearPedTypeAcquaintances(int, int)
	* ClearPedTypeAsAcquaintance(int, int, unsigned int)
	* FindPedType(char*)
	* GetPedFlag(int)
	* GetPedTypeAcquaintances(int)
	* GetPedTypeAcquaintances(int, int)
	* Initialise()
	* Load()
	* LoadPedData()
	* PoliceDontCareAboutCrimesAgainstPedType(int)
	* Save()
	* SetPedTypeAsAcquaintance(int, int, unsigned int)
	* Shutdown()

C3dMarkers (9 variables, 21 functions)
Variables list:
	* IgnoreRenderLimit
	* NumActiveMarkers
	* m_aMarkerArray
	* m_angleDiamond
	* m_colDiamond
	* m_pRpClumpArray
	* m_user3dMarkerColor
	* ms_directionArrows
	* ms_user3dMarkers

Functions list:
	* DirectionArrowFindFirstFreeSlot()
	* DirectionArrowSet(CVector, float, int, int, int, int, float, float, float)
	* DirectionArrowsDraw()
	* DirectionArrowsInit()
	* ForceRender(unsigned char)
	* Init()
	* LoadMarker(char const*)
	* LoadUser3dMarkers()
	* PlaceMarker(unsigned int, unsigned short, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short, float, float, float, bool)
	* PlaceMarkerCone(unsigned int, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short, unsigned char)
	* PlaceMarkerSet(unsigned int, unsigned short, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short)
	* Render()
	* SaveUser3dMarkers()
	* Shutdown()
	* Update()
	* User3dMarkerAtomicCB(RpAtomic*, void*)
	* User3dMarkerDelete(int)
	* User3dMarkerDeleteAll()
	* User3dMarkerFindFirstFreeSlot()
	* User3dMarkerSet(float, float, float, int)
	* User3dMarkersDraw()

CPedScriptedTaskRecord (1 variables, 8 functions)
Variables list:
	* ms_scriptedTasks

Functions list:
	* GetRecordAssociatedWithEvent(CEventScriptCommand*)
	* GetRecordAssociatedWithTask(CTask*)
	* GetStatus(CPed const*)
	* GetStatus(CPed const*, int)
	* GetVacantSlot()
	* Load()
	* Process()
	* Save()

CScripted2dEffects (8 variables, 7 functions)
Variables list:
	* ScriptReferenceIndex
	* ms_activated
	* ms_effectPairs
	* ms_effectSequenceTaskIDs
	* ms_effects
	* ms_radii
	* ms_useAgainFlags
	* ms_userLists

Functions list:
	* AddScripted2DEffect(float)
	* GetEffectPairs(C2dEffect const*)
	* GetIndex(C2dEffect const*)
	* Init()
	* Load()
	* ReturnScripted2DEffect(int)
	* Save()

CTaskSimpleHitFromFront (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitFromFront()

CTaskSimpleHitFromBack (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitFromBack()

CTaskSimpleHitFromBehind (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitFromBehind()

CTaskSimpleHitFromLeft (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitFromLeft()

CTaskSimpleHitFromRight (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitFromRight()

CTaskSimpleHitByGunFromFront (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitByGunFromFront()

CTaskSimpleHitByGunFromRear (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitByGunFromRear()

CTaskSimpleHitByGunFromLeft (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitByGunFromLeft()

CTaskSimpleHitByGunFromRight (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitByGunFromRight()

CTaskSimpleHitWall (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHitWall()

CTaskSimpleHailTaxi (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHailTaxi()

CTaskSimpleAbseil (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleAbseil()

CTaskSimpleChat (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleChat()

CTaskSimpleHailTaxiAndPause (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleHailTaxiAndPause()

CTaskSimpleDetonate (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* IsInterruptable(CPed const*) const
	* Serialize()
	* ~CTaskSimpleDetonate()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorFixedPos> (0 variables, 10 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorDriving> (0 variables, 10 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorVehicleId> (0 variables, 10 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorEntitySurface> (0 variables, 10 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexSeekEntity<CEntitySeekPosCalculatorXYOffset> (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexSeekEntity(CEntity*, int, int, float, float, float, unsigned char, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexSeekEntity<CEntitySeekPosCalculator> (0 variables, 10 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSeekEntity()

CTaskComplexDie (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexDie(eWeaponType, AssocGroupId, AnimationId, float, float, bool, bool, int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SayDeathSample(CPed*) const
	* Serialize()
	* ~CTaskComplexDie()

CTaskComplexFallToDeath (7 variables, 11 functions)
Variables list:
	* ms_FallVerticalDistance
	* ms_LateralForceMagnitude
	* ms_NearEdgeDist
	* ms_NoRailingVerticalForce
	* ms_OverRailingVerticalForce
	* ms_PedChestHeightOffset
	* ms_PedShinHeightOffset

Functions list:
	* CTaskComplexFallToDeath(int, CVector const&, bool, bool)
	* CalcFall(CPed*, int&, bool&)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexFallToDeath()

CTaskSimpleRunNamedAnim (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleRunNamedAnim(char const*, char const*, int, float, int, bool, bool, bool, bool)
	* Clone() const
	* CreateTask()
	* FinishRunAnimMovePedCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* OffsetPedPosition(CPed*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleRunNamedAnim()

CTaskSimplePlayHandSignalAnim (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimplePlayHandSignalAnim(AnimationId, float, unsigned char, bool)
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimplePlayHandSignalAnim()

CTaskComplexWalkRoundFire (1 variables, 10 functions)
Variables list:
	* ms_fFireRadius

Functions list:
	* CTaskComplexWalkRoundFire(int, CVector const&, float, CVector const&)
	* Clone() const
	* ComputeDetourTarget(CPed const&, CVector&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexWalkRoundFire()

CTaskComplexGoToPointAndStandStill (2 variables, 11 functions)
Variables list:
	* ms_fSlowDownDistance
	* ms_fTargetRadius

Functions list:
	* CTaskComplexGoToPointAndStandStill(int, CVector const&, float, float, bool, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* SelectMoveState(CTaskSimpleGoToPoint*, CPed*, float, float) const
	* Serialize()
	* ~CTaskComplexGoToPointAndStandStill()

CTaskComplexFollowPointRoute (3 variables, 17 functions)
Variables list:
	* ms_fSlowDownDistance
	* ms_fTargetRadius
	* ms_pointRoute

Functions list:
	* CTaskComplexFollowPointRoute(int, CPointRoute const&, int, float, float, bool, bool, bool)
	* CalcBlendRatio(CPed*, bool)
	* CalcGoToTaskType(CPed*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* CreateTask()
	* GetLastWaypoint(CPed*)
	* GetNextWaypoint(CPed*)
	* GetSubTaskType()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* SetRoute(CPointRoute const&, float, float, bool)
	* ~CTaskComplexFollowPointRoute()

CTaskComplexFollowNodeRoute (4 variables, 22 functions)
Variables list:
	* ms_fFollowNodeThresholdHeightChange
	* ms_fSlowDownDistance
	* ms_fTargetRadius
	* ms_iDefaultTime

Functions list:
	* CTaskComplexFollowNodeRoute(int, CVector const&, float, float, float, bool, int, bool)
	* CalcBlendRatio(CPed*, bool)
	* CalcGoToTaskType(CPed*, int)
	* CanGoStraightThere(CPed const&, CVector const&, CVector const&, float) const
	* Clone() const
	* ComputePathNodes(CPed const*)
	* ComputeRoute()
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetLastWaypoint(CPed*)
	* GetNextWaypoint(CPed*)
	* GetRouteSize()
	* GetSubTaskType(int, bool, CPointRoute const&)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* SetTarget(CPed const*, CVector const&, float, float, float, bool)
	* StopTimer(CEvent const*)
	* ~CTaskComplexFollowNodeRoute()

CTaskComplexFollowPatrolRoute (3 variables, 13 functions)
Variables list:
	* ms_fSlowDownDistance
	* ms_fTargetRadius
	* ms_patrolRoute

Functions list:
	* CTaskComplexFollowPatrolRoute(int, CPatrolRoute const&, int, float, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* CreateTask()
	* GetSubTaskType()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* SetRoute(CPatrolRoute const&, float, float, bool)
	* ~CTaskComplexFollowPatrolRoute()

CTaskComplexEvasiveDiveAndGetUp (0 variables, 12 functions)
Variables list:

Functions list:
	* CTaskComplexEvasiveDiveAndGetUp(CVehicle*, int, CVector const&, bool)
	* Clone() const
	* ComputeTargetHeading() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexEvasiveDiveAndGetUp()

CTaskComplexWalkRoundCar (4 variables, 15 functions)
Variables list:
	* ms_fVehicleDotAngleChangedThreshold
	* ms_fVehiclePosChangedThresholdSq
	* ms_iWalkRoundTimeRunning
	* ms_iWalkRoundTimeWalking

Functions list:
	* CTaskComplexWalkRoundCar(int, CVector const&, CVehicle const*, bool, int)
	* Clone() const
	* ComputeRoute(CPed const*)
	* ComputeRouteRoundBigCar(CPed const*)
	* ComputeRouteRoundSmallCar(CPed const*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateRouteTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* GoingForDoor() const
	* Serialize()
	* SetNewVehicle(CVehicle*, int)
	* ~CTaskComplexWalkRoundCar()

CTaskComplexLeaveCar (0 variables, 15 functions)
Variables list:

Functions list:
	* CTaskComplexLeaveCar(CVehicle*, int, int, bool, bool)
	* Clone() const
	* ComputeTargetDoor(CPed*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* CreateTask()
	* CreateTaskUtilityLineUpPedWithCar(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PreparePedForVehicleExit(CPed*)
	* PrepareVehicleForPedExit(CPed*)
	* Serialize()
	* ~CTaskComplexLeaveCar()

CTaskComplexLeaveCarAndDie (0 variables, 6 functions)
Variables list:

Functions list:
	* Clone() const
	* CreateFirstSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexLeaveCarAndDie()

CTaskComplexLeaveCarAndFlee (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexLeaveCarAndFlee(CVehicle*, CVector const&, int, int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexLeaveCarAndFlee()

CTaskComplexLeaveCarAndWander (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexLeaveCarAndWander(CVehicle*, int, int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexLeaveCarAndWander()

CTaskComplexDriveToPoint (2 variables, 11 functions)
Variables list:
	* ms_fBlockedTargetDistance
	* ms_fSlowDownDistance

Functions list:
	* CTaskComplexDriveToPoint(CVehicle*, CVector const&, float, int, int, float, int)
	* Clone() const
	* CreateSubTaskCannotGetInCar(CPed*) const
	* CreateTask()
	* Drive(CPed*)
	* GetTaskType() const
	* IsTargetBlocked(CPed*) const
	* IsTargetBlocked(CPed*, CEntity**, int) const
	* Serialize()
	* SetUpCar() const
	* ~CTaskComplexDriveToPoint()

CTaskComplexDrivePointRoute (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexDrivePointRoute(CVehicle*, CPointRoute const&, float, int, int, float, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexDrivePointRoute()

CTaskComplexCarDrive (0 variables, 14 functions)
Variables list:

Functions list:
	* CTaskComplexCarDrive(CVehicle*)
	* CTaskComplexCarDrive(CVehicle*, float, int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateSubTaskCannotGetInCar(CPed*) const
	* CreateTask()
	* Drive(CPed*)
	* GetTaskType() const
	* Serialize()
	* SetUpCar() const
	* ~CTaskComplexCarDrive()

CTaskComplexGoToCarDoorAndStandStill (5 variables, 13 functions)
Variables list:
	* ms_fMaxSeekDistance
	* ms_fSlowDownDistance
	* ms_fSmallDistSq
	* ms_fTargetRadius
	* ms_iMaxSeekTime

Functions list:
	* CTaskComplexGoToCarDoorAndStandStill(CVehicle*, int, bool, int, float, float, float, int)
	* Clone() const
	* ComputeRouteToDoor(CPed const&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* IsVehicleInRange(CPed const&) const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexGoToCarDoorAndStandStill()

CTaskComplexGoToPointAnyMeans (2 variables, 11 functions)
Variables list:
	* ms_fOnFootDistance
	* ms_fTargetRadius

Functions list:
	* CTaskComplexGoToPointAnyMeans(int, CVector const&, CVehicle*, float, int)
	* CTaskComplexGoToPointAnyMeans(int, CVector const&, float, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGoToPointAnyMeans()

CTaskComplexDestroyCar (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexDestroyCar(CVehicle*, unsigned int, unsigned int, unsigned int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexDestroyCar()

CTaskSimpleTriggerLookAt (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleTriggerLookAt(CEntity*, int, int, RwV3d, unsigned char, float, int, int)
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleTriggerLookAt()

CTaskComplexWalkRoundBuildingAttempt (3 variables, 16 functions)
Variables list:
	* ms_LargeMovedEpsSqr
	* ms_SmallMovedEpsSqr
	* ms_iMaxAttempts

Functions list:
	* AddNormalToMoveDir(CVector&) const
	* CTaskComplexWalkRoundBuildingAttempt(int, CEntity*, CVector const&, CVector const&, CVector const&, bool)
	* CTaskComplexWalkRoundBuildingAttempt(int, CVector const&, CVector const&, CVector const&, bool)
	* Clone() const
	* ComputeCrapRoute(CPed const&)
	* ComputeMoveDir(CPed const&, CVector&) const
	* ComputeRoute(CPed const&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexWalkRoundBuildingAttempt()

CTaskComplexEnterCarAsPassengerWait (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexEnterCarAsPassengerWait(CVehicle*, CPed*, bool, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEnterCarAsPassengerWait()

CTaskComplexTurnToFaceEntityOrCoord (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexTurnToFaceEntityOrCoord(CEntity*, float, float)
	* CTaskComplexTurnToFaceEntityOrCoord(CVector const&, float, float)
	* Clone() const
	* ComputeTargetHeading(CPed*) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexTurnToFaceEntityOrCoord()

CTaskSimpleGunControl (1 variables, 9 functions)
Variables list:
	* DEFAULT_GUN_ATTACK_PERIOD

Functions list:
	* CTaskSimpleGunControl(CEntity*, CVector const*, CVector const*, signed char, short, int)
	* ChangeFiringTask(signed char, CEntity*, CVector*, CVector*)
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleGunControl()

CTaskSimpleGangDriveBy (3 variables, 15 functions)
Variables list:
	* ANIM_LOOP_END
	* ANIM_LOOP_FIRE
	* ANIM_LOOP_START

Functions list:
	* AimGun(CPed*)
	* CTaskSimpleGangDriveBy(CEntity*, CVector const*, float, signed char, signed char, bool)
	* Clone() const
	* CreateTask()
	* FinishAnimGangDriveByCB(CAnimBlendAssociation*, void*)
	* FireGun(CPed*)
	* GetTaskType() const
	* LineOfSightClearForAttack(CPed*, CVector&)
	* LookForTarget(CPed*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ManageAnim(CPed*)
	* PlayerTarget(CPed*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleGangDriveBy()

CTaskComplexPartnerChat (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexPartnerChat(char*, CPed*, unsigned char, float, int, unsigned char, unsigned char, CVector)
	* Clone() const
	* CreateTask()
	* GetPartnerSequence()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexPartnerChat()

CTaskSimpleClimb (13 variables, 20 functions)
Variables list:
	* ms_ClimbColModel
	* ms_FindEdgeColModel
	* ms_StandupColModel
	* ms_VaultColModel
	* ms_fAtEdgeOffsetHorz
	* ms_fAtEdgeOffsetVert
	* ms_fHangingOffsetHorz
	* ms_fHangingOffsetVert
	* ms_fMinForStretchGrab
	* ms_fStandUpOffsetHorz
	* ms_fStandUpOffsetVert
	* ms_fVaultOffsetHorz
	* ms_fVaultOffsetVert

Functions list:
	* CTaskSimpleClimb(CEntity*, CVector const&, float, unsigned char, signed char, bool)
	* Clone() const
	* CreateColModel()
	* CreateTask()
	* DeleteAnimClimbCB(CAnimBlendAssociation*, void*)
	* GetCameraStickModifier(CPed*, float&, float&, float&, float&)
	* GetCameraTargetPos(CPed*, CVector&)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ScanToGrab(CPed*, CVector&, float&, unsigned char&, bool, bool, bool, CVector*)
	* ScanToGrabSectorList(CPtrList&, CPed*, CVector&, float&, unsigned char&, bool, bool, bool)
	* Serialize()
	* Shutdown()
	* StartAnim(CPed*)
	* StartSpeech(CPed*) const
	* TestForClimb(CPed*, CVector&, float&, unsigned char&, bool)
	* TestForStandUp(CPed*, CVector&, float)
	* TestForVault(CPed*, CVector&, float)
	* ~CTaskSimpleClimb()

CTaskComplexGoPickUpEntity (2 variables, 9 functions)
Variables list:
	* MAX_GOTO_TIME
	* MAX_PICKUP_TIME

Functions list:
	* CTaskComplexGoPickUpEntity(CEntity*, AssocGroupId)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGoPickUpEntity()

CTaskSimpleEvasiveStep (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleEvasiveStep(CEntity*)
	* Clone() const
	* CreateTask()
	* FinishAnimEvasiveStepCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleEvasiveStep()

CTaskComplexEvasiveStep (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexEvasiveStep(CEntity*, CVector const&)
	* Clone() const
	* ComputeTargetHeading() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEvasiveStep()

CTaskComplexWalkRoundObject (4 variables, 12 functions)
Variables list:
	* ms_fObjectDotAngleChangedThreshold
	* ms_fObjectPosChangedThresholdSq
	* ms_iWalkRoundTimeRunning
	* ms_iWalkRoundTimeWalking

Functions list:
	* CTaskComplexWalkRoundObject(int, CVector const&, CEntity*)
	* Clone() const
	* ComputeRoute(CPed*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateRouteTask(CPed const*) const
	* CreateSubTask(int, CPed const*) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexWalkRoundObject()

CTaskComplexEvasiveCower (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexEvasiveCower(CEntity*, CVector const&)
	* Clone() const
	* ComputeTargetHeading() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEvasiveCower()

CTaskComplexCarDriveMission (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexCarDriveMission(CVehicle*, CEntity*, int, int, float)
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* SetUpCar() const
	* ~CTaskComplexCarDriveMission()

CTaskComplexGoToPointShooting (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskComplexGoToPointShooting(int, CVector const&, CEntity*, CVector, float, float)
	* Clone() const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGoToPointShooting()

CTaskComplexSmartFleeEntity (4 variables, 10 functions)
Variables list:
	* ms_fEntityPosChangeThreshold
	* ms_fSafeDistance
	* ms_iEntityPosCheckPeriod
	* ms_iFleeTime

Functions list:
	* CTaskComplexSmartFleeEntity(CEntity*, bool, float, int, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexSmartFleeEntity()

CTaskComplexGoToPointAiming (2 variables, 10 functions)
Variables list:
	* ms_fSlowDownDistance
	* ms_fTargetRadius

Functions list:
	* CTaskComplexGoToPointAiming(int, CVector const&, CEntity*, CVector, float, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGoToPointAiming()

CTaskComplexFleeAnyMeans (3 variables, 10 functions)
Variables list:
	* ms_fStealCarDist
	* ms_iShootRecoverTime
	* ms_iShootTime

Functions list:
	* CTaskComplexFleeAnyMeans(CEntity*, bool, float, int, int, int, float, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexFleeAnyMeans()

CTaskComplexSeekEntityAiming (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexSeekEntityAiming(CEntity*, float, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateTask()
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexSeekEntityAiming()

CTaskSimpleUseGun (1 variables, 23 functions)
Variables list:
	* WEAPON_RE_AIM_RATE

Functions list:
	* AbortIK(CPed*)
	* AimGun(CPed*)
	* CTaskSimpleUseGun(CEntity*, CVector, signed char, short, unsigned char)
	* ClearAnim(CPed*)
	* Clone() const
	* ControlGun(CPed*, CEntity*, signed char)
	* ControlGunMove(CVector2D*)
	* CreateTask()
	* FinishGunAnimCB(CAnimBlendAssociation*, void*)
	* FireGun(CPed*, bool)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PlayerPassiveControlGun()
	* ProcessPed(CPed*)
	* RemoveStanceAnims(CPed*, float)
	* RequirePistolWhip(CPed*, CEntity*)
	* Reset(CPed*, CEntity*, CVector, signed char, short)
	* Serialize()
	* SetMoveAnim(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed*)
	* StartCountDown(unsigned char, bool)
	* ~CTaskSimpleUseGun()

CTaskSimpleJetPack (12 variables, 17 functions)
Variables list:
	* JETPACK_ANGLE_RATE
	* JETPACK_TURN_RATE
	* LEG_SWING_DAMP_FRAC
	* LEG_SWING_DELTA_V_MULT
	* LEG_SWING_GRAVITY_MULT
	* LEG_SWING_MAX_ANGLE
	* THRUST_FULL
	* THRUST_MAX_ANGLE
	* THRUST_MOVE_DAMPING
	* THRUST_NOMINAL
	* THRUST_STOP
	* THRUST_STRAFE

Functions list:
	* ApplyRollAndPitch(CPed*)
	* CTaskSimpleJetPack(CVector const*, float, int, CEntity*)
	* Clone() const
	* CreateTask()
	* DoJetPackEffect(CPed*)
	* DropJetPack(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessAnims(CPed*)
	* ProcessControlAI(CPed*)
	* ProcessControlInput(CPlayerPed*)
	* ProcessPed(CPed*)
	* ProcessThrust(CPed*)
	* RenderJetPack(CPed*)
	* Serialize()
	* StopJetPackEffect()
	* ~CTaskSimpleJetPack()

CCivilianPed (0 variables, 3 functions)
Variables list:

Functions list:
	* CCivilianPed(ePedType, unsigned int)
	* ProcessControl()
	* ~CCivilianPed()

CCopPed (0 variables, 7 functions)
Variables list:

Functions list:
	* AddCriminalToKill(CPed*)
	* CCopPed(eCopType)
	* ClearCriminalsToKill()
	* ProcessControl()
	* RemoveCriminalToKill(CPed*, int)
	* SetPartner(CCopPed*)
	* ~CCopPed()

CDummyPed (0 variables, 2 functions)
Variables list:

Functions list:
	* CDummyPed()
	* ~CDummyPed()

CEmergencyPed (0 variables, 6 functions)
Variables list:

Functions list:
	* CEmergencyPed(unsigned int, unsigned int)
	* FiremanAI()
	* InRange(CPed*)
	* MedicAI()
	* ProcessControl()
	* ~CEmergencyPed()

CGangInfo (0 variables, 2 functions)
Variables list:

Functions list:
	* CGangInfo()
	* ~CGangInfo()

CPool<CPed, CCopPed> (0 variables, 1 functions)
Variables list:

Functions list:
	* Delete(CPed*)

CPedAttractor (1 variables, 23 functions)
Variables list:
	* ms_tasks

Functions list:
	* AbortPedTasks()
	* BroadcastArrival(CPed*)
	* BroadcastDeparture(CPed*)
	* CPedAttractor(C2dEffect*, CEntity*, int, int, float, float, float, float, float, float, float)
	* ComputeAttractHeading(int, float&) const
	* ComputeAttractPos(int, CVector&) const
	* ComputeAttractTime(int, bool, float&) const
	* ComputeDeltaHeading() const
	* ComputeDeltaPos() const
	* ComputeFreeSlot() const
	* DeRegisterPed(CPed*)
	* GetHeadOfQueue() const
	* GetNoOfRegisteredPeds() const
	* GetQueueSlot(CPed const*) const
	* GetTailOfQueue() const
	* GetTaskForPed(CPed*) const
	* IsAtHeadOfQueue(CPed*) const
	* IsRegisteredWithPed(CPed const*) const
	* RegisterPed(CPed*)
	* SetTaskForPed(CPed*, CTask*)
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CPedAttractor()

CPedShelterAttractor (9 variables, 7 functions)
Variables list:
	* ms_displacements
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* BroadcastDeparture(CPed*)
	* ComputeAttractHeading(int, float&) const
	* ComputeAttractPos(int, CVector&) const
	* GetDisplacement(int)
	* GetType() const
	* IsAtHeadOfQueue(CPed*) const
	* ~CPedShelterAttractor()

CPedTaskPair (0 variables, 1 functions)
Variables list:

Functions list:
	* Flush()

CPedAttractorManager (3 variables, 27 functions)
Variables list:
	* ms_fInfluenceCosTheta
	* ms_fInfluenceDistance
	* ms_fSearchDistance

Functions list:
	* BroadcastArrival(CPed*, CPedAttractor*)
	* BroadcastArrival(CPed*, CPedAttractor*, SArray<CPedAttractor*>&)
	* BroadcastDeparture(CPed*, CPedAttractor*)
	* BroadcastDeparture(CPed*, CPedAttractor*, SArray<CPedAttractor*>&)
	* ComputeEffectForwardDir(C2dEffect const*, CMatrix const&, CVector&)
	* ComputeEffectPos(C2dEffect const*, CMatrix const&, CVector&)
	* ComputeEffectQueueDir(C2dEffect const*, CMatrix const&, CVector&)
	* ComputeEffectUseDir(C2dEffect const*, CMatrix const&, CVector&)
	* DeRegisterPed(CPed*, CPedAttractor*)
	* DeRegisterPed(CPed*, CPedAttractor*, SArray<CPedAttractor*>&)
	* FindAssociatedAttractor(C2dEffect const*, CEntity const*, SArray<CPedAttractor*> const&) const
	* GetPedUsingEffect(C2dEffect const*, CEntity const*)
	* GetPedUsingEffect(C2dEffect const*, CEntity const*, SArray<CPedAttractor*> const&)
	* GetRelevantAttractor(CPed const*, C2dEffect const*, CEntity const*) const
	* GetRelevantAttractor(CPed const*, C2dEffect const*, CEntity const*, SArray<CPedAttractor*> const&) const
	* HasEmptySlot(C2dEffect const*, CEntity const*) const
	* HasQueueTailArrivedAtSlot(C2dEffect const*, CEntity const*)
	* IsApproachable(C2dEffect*, CMatrix const&, int, CPed*)
	* IsPedRegistered(CPed*, SArray<CPedAttractor*> const&) const
	* IsPedRegisteredWithEffect(CPed*) const
	* IsPedRegisteredWithEffect(CPed*, C2dEffect const*, CEntity const*) const
	* IsPedRegisteredWithEffect(CPed*, C2dEffect const*, CEntity const*, SArray<CPedAttractor*> const&) const
	* RegisterPed(CPed*, C2dEffect*, CEntity*, int, SArray<CPedAttractor*>&)
	* RegisterPedWithAttractor(CPed*, C2dEffect*, CEntity*, int)
	* RemoveEffect(C2dEffect const*) const
	* RemoveEffect(C2dEffect const*, SArray<CPedAttractor*> const&) const
	* RestoreStuffFromMem()

CPedAttractorPedPlacer (0 variables, 1 functions)
Variables list:

Functions list:
	* PlacePedAtEffect(C2dEffect const&, CEntity*, CPed*, float)

CPedAtmAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedAtmAttractor()

CPedSeatAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedSeatAttractor()

CPedStopAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedStopAttractor()

CPedPizzaAttractor (9 variables, 3 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fPizzaOrderTime
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetHeadOfQueueWaitTime()
	* GetType() const
	* ~CPedPizzaAttractor()

CPedTriggerScriptAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedTriggerScriptAttractor()

CPedLookAtAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedLookAtAttractor()

CPedScriptedAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedScriptedAttractor()

CPedParkAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedParkAttractor()

CPedStepAttractor (8 variables, 2 functions)
Variables list:
	* ms_fAchieveQueueShuffleTime
	* ms_fAchieveQueueTime
	* ms_fArriveRange
	* ms_fDeltaHeading
	* ms_fDeltaPos
	* ms_fHeadingRange
	* ms_fSpacing
	* ms_iMaxSlots

Functions list:
	* GetType() const
	* ~CPedStepAttractor()

SArray<CTask const*> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~SArray()

SArray<CVector> (0 variables, 1 functions)
Variables list:

Functions list:
	* ~SArray()

CMoveStateStrings (0 variables, 1 functions)
Variables list:

Functions list:
	* GetMoveStateString(int)

CPedDebugVisualiser (2 variables, 13 functions)
Variables list:
	* m_textDisplayFlags
	* nDisplayDebugInfo

Functions list:
	* SetRenderStates()
	* VisualiseAttractorsInPtrList(CPtrList&, CPed const&) const
	* VisualiseBoundingVolumes(CPed&) const
	* VisualiseEvents(CPed const&) const
	* VisualiseFOV(CPed const&) const
	* VisualiseHitSidesToPlayer(CPed&) const
	* VisualiseNearbyAttractors(CPed const&) const
	* VisualiseOneAttractor(CVector const&, CVector const&, CVector const&, CVector const&) const
	* VisualisePedsNearPlayer()
	* VisualisePosition(CPed const&) const
	* VisualiseTasks(CPed const&) const
	* VisualiseText(CPed const&) const
	* VisualiseTextViaMenu(CPed const&) const

CPedDebugVisualiser::CTextDisplayFlags (0 variables, 2 functions)
Variables list:

Functions list:
	* CTextDisplayFlags()
	* ~CTextDisplayFlags()

CPedGeometryAnalyser (7 variables, 39 functions)
Variables list:
	* ms_bDisplayProfilingInfo
	* ms_bUseEntityBoundsCaching
	* ms_bUseLineOfSightCaching
	* ms_fClearTargetSearchDistance
	* ms_fInAirOffset
	* ms_fPedNominalRadius
	* ms_fTargetRange

Functions list:
	* CanPedJumpObstacle(CPed const&, CEntity const&)
	* CanPedJumpObstacle(CPed const&, CEntity const&, CVector const&, CVector const&)
	* CanPedTargetPed(CPed&, CPed&, bool)
	* CanPedTargetPoint(CPed const&, CVector const&, bool)
	* ComputeBuildingHitPoints(CVector const&, CVector const&)
	* ComputeClearTarget(CPed const&, CVector const&, CVector&)
	* ComputeClosestSurfacePoint(CPed const&, CEntity&, CVector&)
	* ComputeClosestSurfacePoint(CVector const&, CEntity&, CVector&)
	* ComputeClosestSurfacePoint(CVector const&, CVector const*, CVector&)
	* ComputeEntityBoundingBoxCentre(float, CEntity&, CVector&)
	* ComputeEntityBoundingBoxCentreUncached(float, CVector const*, CVector&)
	* ComputeEntityBoundingBoxCentreUncachedAll(float, CEntity&, CVector&)
	* ComputeEntityBoundingBoxCorners(float, CEntity&, CVector*)
	* ComputeEntityBoundingBoxCornersUncached(float, CEntity&, CVector*)
	* ComputeEntityBoundingBoxPlanes(float, CEntity&, CVector*, float*)
	* ComputeEntityBoundingBoxPlanesUncached(float, CVector const*, CVector*, float*)
	* ComputeEntityBoundingBoxPlanesUncachedAll(float, CEntity&, CVector*, float*)
	* ComputeEntityBoundingBoxSegmentPlanes(float, CEntity&, CVector*, float*)
	* ComputeEntityBoundingBoxSegmentPlanesUncached(CVector const*, CVector&, CVector*, float*)
	* ComputeEntityBoundingBoxSegmentPlanesUncachedAll(float, CEntity&, CVector*, float*)
	* ComputeEntityBoundingSphere(CPed const&, CEntity&, CColSphere&)
	* ComputeEntityDirs(CEntity const&, CVector*)
	* ComputeEntityHitSide(CPed const&, CEntity&)
	* ComputeEntityHitSide(CVector const&, CEntity&)
	* ComputeEntityHitSide(CVector const&, CVector const*, float const*)
	* ComputeMoveDirToAvoidEntity(CPed const&, CEntity&, CVector&)
	* ComputePedHitSide(CPed const&, CPhysical const&)
	* ComputePedHitSide(CPed const&, CVector const&)
	* ComputePedShotSide(CPed const&, CVector const&)
	* ComputeRouteRoundEntityBoundingBox(CPed const&, CEntity&, CVector const&, CPointRoute&, int)
	* ComputeRouteRoundEntityBoundingBox(CPed const&, CVector const&, CEntity&, CVector const&, CPointRoute&, int)
	* ComputeRouteRoundSphere(CPed const&, CColSphere const&, CVector const&, CVector const&, CVector&, CVector&)
	* GetIsLineOfSightClear(CPed const&, CVector const&, CEntity&, float&)
	* GetIsLineOfSightClear(CVector const&, CVector const&, CEntity&)
	* GetNearestPed(CVector const&)
	* IsEntityBlockingTarget(CEntity*, CVector const&, float)
	* IsInAir(CPed const&)
	* IsWanderPathClear(CVector const&, CVector const&, float, int)
	* LiesInsideBoundingBox(CPed const&, CVector const&, CEntity&)

CPedGroupDefaultTaskAllocatorStandStill (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorStandStill()

CPedGroupMembership (2 variables, 22 functions)
Variables list:
	* ms_fMaxSeparation
	* ms_fPlayerGroupMaxSeparation

Functions list:
	* AddFollower(CPed*)
	* AddMember(CPed*, int)
	* AppointNewLeader()
	* CPedGroupMembership()
	* CPedGroupMembership(CPedGroupMembership const&)
	* CountMembers() const
	* CountMembersExcludingLeader() const
	* Flush()
	* From(CPedGroupMembership const&)
	* GetLeader() const
	* GetMember(int) const
	* GetObjectForPedToHold()
	* IsFollower(CPed const*) const
	* IsLeader(CPed const*) const
	* IsMember(CPed const*) const
	* Process()
	* RemoveAllFollowers(bool)
	* RemoveMember(CPed*)
	* RemoveMember(int)
	* RemoveNFollowers(int)
	* SetLeader(CPed*)
	* ~CPedGroupMembership()

CPedGroupDefaultTaskAllocatorRandom (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorRandom()

CPedGroupDefaultTaskAllocatorFollowLimited (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorFollowLimited()

CPedGroupDefaultTaskAllocatorFollowAnyMeans (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorFollowAnyMeans()

CPedGroupDefaultTaskAllocatorSitInLeaderCar (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorSitInLeaderCar()

CPedGroupDefaultTaskAllocatorChat (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateDefaultTasks(CPedGroup*, CPed*) const
	* GetType() const
	* ~CPedGroupDefaultTaskAllocatorChat()

CPedGroupDefaultTaskAllocators (6 variables, 1 functions)
Variables list:
	* ms_chatAllocator
	* ms_followAnyMeansAllocator
	* ms_followLimitedAllocator
	* ms_randomAllocator
	* ms_sitInLeaderCarAllocator
	* ms_standStillAllocator

Functions list:
	* Get(int)

CPedGroupIntelligence (0 variables, 34 functions)
Variables list:

Functions list:
	* AddEvent(CEvent&)
	* CPedGroupIntelligence()
	* ComputeDefaultTasks(CPed*)
	* ComputeEventResponseTasks()
	* ComputeScriptCommandTasks()
	* Flush()
	* FlushTasks(CPedTaskPair*, CPed*)
	* GetTask(CPed*, CPedTaskPair const*) const
	* GetTaskDefault(CPed*) const
	* GetTaskMain(CPed*) const
	* GetTaskScriptCommand(CPed*) const
	* GetTaskSecondary(CPed*) const
	* GetTaskSecondarySlot(CPed*) const
	* GetTaskSlot(CPed*, CPedTaskPair const*) const
	* IsCurrentEventValid() const
	* IsGroupResponding() const
	* Process()
	* ProcessIgnorePlayerGroup()
	* ReportAllBarScriptTasksFinished()
	* ReportAllTasksFinished()
	* ReportAllTasksFinished(CPedTaskPair*)
	* ReportFinishedTask(CPed const*, CTask const&)
	* ReportFinishedTask(CPed const*, CTask const&, CPedTaskPair*)
	* SetDefaultTask(CPed*, CTask const&)
	* SetDefaultTaskAllocator(CPedGroupDefaultTaskAllocator const*)
	* SetDefaultTaskAllocatorType(int)
	* SetEventResponseTask(CPed*, bool, CTask const&, bool, CTask const&, int)
	* SetEventResponseTaskAllocator(CTaskAllocator*)
	* SetGroupDecisionMakerType(int)
	* SetPrimaryTaskAllocator(CTaskAllocator*)
	* SetScriptCommandTask(CPed*, CTask const&)
	* SetTask(CPed*, CTask const&, CPedTaskPair*, int, bool)
	* SetTask(int, CTask const&, CPedTaskPair*, int, bool)
	* ~CPedGroupIntelligence()

CGroupEventHandler (0 variables, 32 functions)
Variables list:

Functions list:
	* ComputeDoDealResponse(CPedGroup*, CPed*, CPed*)
	* ComputeDrivebyResponse(CPedGroup*, CPed*, CPed*)
	* ComputeEventResponseTasks(CEventGroupEvent const&, CPedGroup*)
	* ComputeFleePedResponse(CPedGroup*, CPed*, CPed*, unsigned char)
	* ComputeGreetResponse(CPedGroup*, CPed*, CPed*)
	* ComputeHandSignalResponse(CPedGroup*, CPed*, CPed*)
	* ComputeHassleSexyPedResponse(CPedGroup*, CPed*, CPed*)
	* ComputeHassleThreatResponse(CPedGroup*, CPed*, CPed*, bool)
	* ComputeKillPlayerBasicResponse(CPedGroup*, CPed*, CPed*, unsigned char)
	* ComputeKillThreatsBasicResponse(CPedGroup*, CPed*, CPed*, unsigned char)
	* ComputeLeanOnVehicleResponse(CEvent const&, CPedGroup*, CPed*)
	* ComputeMemberResponses(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponsLeaderQuitEnteringCar(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseDamage(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseDanger(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseDraggedOutCar(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseGather(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseGunAimedAt(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseLeaderEnterExit(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseLeaderEnteredCar(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseLeaderExitedCar(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseNewGangMember(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponsePedFriend(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponsePedThreat(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponsePlayerCommand(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseSeenCop(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseSexyPed(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseShotFired(CEvent const&, CPedGroup*, CPed*)
	* ComputeResponseVehicleDamage(CEvent const&, CPedGroup*, CPed*)
	* ComputeStareResponse(CPedGroup*, CPed*, CPed*, int, int)
	* ComputeWalkAlongsideResponse(CPedGroup*, CPed*, CPed*)
	* IsKillTaskAppropriate(CPedGroup*, CPed*)

CPedGroup (0 variables, 12 functions)
Variables list:

Functions list:
	* CPedGroup()
	* FindDistanceToFurthestMember()
	* FindDistanceToNearestMember(CPed**)
	* Flush()
	* GetClosestGroupPed(CPed*, float*)
	* IsAnyoneUsingCar(CVehicle const&) const
	* PlayerGaveCommand_Attack(CPed*, CPed*)
	* PlayerGaveCommand_Gather(CPed*)
	* Process()
	* RemoveAllFollowers()
	* Teleport(CVector const&)
	* ~CPedGroup()

CPedGroupPlacer (2 variables, 4 functions)
Variables list:
	* ms_maxGangSize
	* ms_minGangSize

Functions list:
	* PlaceChatGroup(ePedType, int, CVector const&, int) const
	* PlaceFormationGroup(ePedType, int, CVector const&, int) const
	* PlaceGroup(ePedType, int, CVector const&, int) const
	* PlaceRandomGroup(ePedType, int, CVector const&, int) const

CEventCreatePartnerTask (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventCreatePartnerTask()

CPedIK (8 variables, 10 functions)
Variables list:
	* XaxisIK
	* YaxisIK
	* ZaxisIK
	* ms_headInfo
	* ms_headRestoreInfo
	* ms_lowerArmInfo
	* ms_torsoInfo
	* ms_upperArmInfo

Functions list:
	* CPedIK(CPed*)
	* ExtractYawAndPitchWorld(RwMatrixTag*, float&, float&)
	* GetWorldMatrix(RwFrame*, RwMatrixTag*)
	* MoveLimb(LimbOrientation&, float, float, LimbMovementInfo&)
	* MoveLimb(LimbOrientation&, float, float, LimbMovementInfo&, float)
	* PitchForSlope()
	* PointGunAtPosition(CVector const&, float)
	* PointGunInDirection(float, float, bool, float)
	* RotateTorso(AnimBlendFrameData*, LimbOrientation&, bool)
	* RotateTorsoForArm(CVector const&)

CInterestingEvents (1 variables, 7 functions)
Variables list:
	* ms_iScanFrequency

Functions list:
	* Add(CInterestingEvents::EType, CEntity*)
	* CInterestingEvents()
	* GetInterestingEvent()
	* InvalidateEvent(TInterestingEvent const*)
	* InvalidateNonVisibleEvents()
	* ScanForNearbyEntities()
	* ~CInterestingEvents()

CPedStuckChecker (0 variables, 2 functions)
Variables list:

Functions list:
	* CPedStuckChecker()
	* TestPedStuck(CPed*, CEventGroup*)

CEntityScanner (1 variables, 4 functions)
Variables list:
	* ms_iScanPeriod

Functions list:
	* CEntityScanner()
	* Clear()
	* ScanForEntitiesInRange(int, CPed const&)
	* ~CEntityScanner()

CVehicleScanner (0 variables, 2 functions)
Variables list:

Functions list:
	* GetClosestVehicleInRange() const
	* ScanForVehiclesInRange(CPed const&)

CPedScanner (0 variables, 2 functions)
Variables list:

Functions list:
	* GetClosestPedInRange() const
	* ScanForPedsInRange(CPed const&)

CObjectScanner (0 variables, 2 functions)
Variables list:

Functions list:
	* GetClosestObjectInRange() const
	* ScanForObjectsInRange(CPed const&)

CAttractorScanner (2 variables, 9 functions)
Variables list:
	* ms_iScanLatency
	* ms_iScanPeriod

Functions list:
	* AddEffect(C2dEffect*, CEntity*, CPed const&)
	* CAttractorScanner()
	* Clear()
	* GetClosestAttractorOfType(CVector const&, float, int, int, char const*, bool, C2dEffect const*, C2dEffect*&, CEntity*&)
	* GetNearestAttractorInRange(C2dEffect*&, CEntity*&) const
	* GetNearestPedNotUsingAttractor(C2dEffect const&)
	* ScanForAttractorsInPtrList(CPtrList&, CPed const&)
	* ScanForAttractorsInRange(CPed const&)
	* ~CAttractorScanner()

CBuildingPotentialCollisionScanner (4 variables, 1 functions)
Variables list:
	* ms_fLookAheadDistanceRunning
	* ms_fLookAheadDistanceWalking
	* ms_fNormalZThreshold
	* ms_iPeriod

Functions list:
	* ScanForBuildingPotentialCollisionEvents(CPed const&)

CPedAcquaintanceScanner (4 variables, 7 functions)
Variables list:
	* ms_fThresholdDotProduct
	* ms_iAcquaintanceLatencyPeriodDefinite
	* ms_iAcquaintanceLatencyPeriodMaybe
	* ms_iAcquaintanceScanPeriod

Functions list:
	* AddAcquaintanceEvent(CPed const&, int, CPed*)
	* CanJoinLARiot(CPed const&, CPed const&)
	* FindClosestAcquaintance(CPed&, int, CEntity**, int, CPed*&, int&)
	* IsScanPermitted(CPed const&) const
	* ScanAcquaintanceTypes(CPed const&, int, int, CPed*, CPed*&, int&)
	* ScanForPedAcquaintanceEvents(CPed&, CEntity**, int)
	* SetTimer(int)

CSexyPedScanner (3 variables, 2 functions)
Variables list:
	* ms_fSexyPedRange
	* ms_iScanPeriod
	* ms_iSexyPedLatencyPeriod

Functions list:
	* IsScanPermitted(CPed const&) const
	* ScanForSexyPedEvents(CPed const&, CEntity**, int)

CVehicleThreatScanner (0 variables, 1 functions)
Variables list:

Functions list:
	* ScanForVehicleThreatEvents(CPed const&, CVehicleThreats const&, CEntity**, int, CEventGroup*) const

CDecision (0 variables, 7 functions)
Variables list:

Functions list:
	* Add(int, float*, int*)
	* CDecision()
	* From(CDecision const&)
	* HasResponse() const
	* MakeDecision(int, bool, int, int, int, int, short&, short&) const
	* Set(int*, float (*) [4], int (*) [2], float (*) [6])
	* SetDefault()

CDecisionSimple (0 variables, 3 functions)
Variables list:

Functions list:
	* MakeDecision(int, short&, int&) const
	* Set(int*, unsigned char*, int)
	* SetDefault()

CMentalState (0 variables, 2 functions)
Variables list:

Functions list:
	* IncrementAnger(int)
	* Process(CPed const&)

CEventScanner (1 variables, 5 functions)
Variables list:
	* m_sDeadPedWalkingTimer

Functions list:
	* CEventScanner()
	* Clear()
	* ScanForEvents(CPed&)
	* ScanForEventsNow(CPed const&, int)
	* ~CEventScanner()

CCollisionEventScanner (2 variables, 1 functions)
Variables list:
	* ms_fMinVelToDamagePedSqr
	* ms_fTrailerMinVelToDamagePedSqr

Functions list:
	* ScanForCollisionEvents(CPed&, CEventGroup*)

CNearbyFireScanner (3 variables, 1 functions)
Variables list:
	* ms_fNearbyFireRange
	* ms_fPotentialWalkIntoFireRange
	* ms_iLatencyPeriod

Functions list:
	* ScanForNearbyFires(CPed const&)

CObjectPotentialCollisionScanner (3 variables, 1 functions)
Variables list:
	* ms_fMinIntersectionLength
	* ms_fObjectAvoidDistance
	* ms_iPeriod

Functions list:
	* ScanForObjectPotentialCollisionEvents(CPed const&)

CVehiclePotentialCollisionScanner (9 variables, 1 functions)
Variables list:
	* ms_fFastDiveDist
	* ms_fMinAvoidScaredSpeed
	* ms_fMinAvoidSpeed
	* ms_fMinIntersectionLength
	* ms_fSlowDiveDist
	* ms_fVehicleAvoidDistance
	* ms_fVehiclePotentialRunOverDistance
	* ms_fVehicleThreatMultiplier
	* ms_iPeriod

Functions list:
	* ScanForVehiclePotentialCollisionEvents(CPed const&, CEntity**, int)

CPedPotentialCollisionScanner (1 variables, 1 functions)
Variables list:
	* ms_fPedAvoidDistance

Functions list:
	* ScanForPedPotentialCollisionEvents(CPed const&, CPed*) const

CEventPedCollisionWithPlayer (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* GetEventType() const
	* ~CEventPedCollisionWithPlayer()

CEventPlayerCollisionWithPed (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* GetEventType() const
	* ~CEventPlayerCollisionWithPed()

CEventScriptedAttractor (0 variables, 3 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventType() const
	* ~CEventScriptedAttractor()

CEventAcquaintancePedRespect (0 variables, 4 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventAcquaintancePedRespect()

CEventAcquaintancePedLike (0 variables, 4 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventAcquaintancePedLike()

CEventAcquaintancePedDislike (0 variables, 4 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventAcquaintancePedDislike()

CPool<CPedIntelligence, CPedIntelligence> (0 variables, 1 functions)
Variables list:

Functions list:
	* Delete(CPedIntelligence*)

CPedPlacement (0 variables, 4 functions)
Variables list:

Functions list:
	* FindZCoorForPed(CVector*)
	* IsPositionClearForPed(CVector const&, float, int, CEntity**, unsigned char, unsigned char, unsigned char)
	* IsPositionClearOfCars(CPed const*)
	* IsPositionClearOfCars(CVector const*)

CPedScriptedTaskRecordData (0 variables, 8 functions)
Variables list:

Functions list:
	* AssociateWithEvent(CEventScriptCommand*)
	* AssociateWithTask(CTask*)
	* CPedScriptedTaskRecordData()
	* Flush()
	* Set(CPed*, int, CEventScriptCommand const*)
	* Set(CPed*, int, CTask const*)
	* SetAsAttractorScriptTask(CPed*, int, CTask const*)
	* SetAsGroupTask(CPed*, int, CTask const*)

CAcquaintance (0 variables, 5 functions)
Variables list:

Functions list:
	* ClearAcquaintances(int)
	* ClearAsAcquaintance(int, unsigned int)
	* GetAcquaintances(int) const
	* SetAcquaintances(int, unsigned int)
	* SetAsAcquaintance(int, unsigned int)

CEventNewGangMember (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventNewGangMember()

CEventDontJoinPlayerGroup (0 variables, 6 functions)
Variables list:

Functions list:
	* AffectsPed(CPed*) const
	* Clone() const
	* GetEventPriority() const
	* GetEventType() const
	* GetLifeTime() const
	* ~CEventDontJoinPlayerGroup()

CEventPlayerCommandToGroupGather (0 variables, 4 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventPriority() const
	* GetEventType() const
	* ~CEventPlayerCommandToGroupGather()

CLoadedCarGroup (0 variables, 8 functions)
Variables list:

Functions list:
	* AddMember(int)
	* Clear()
	* CountMembers()
	* GetMember(int)
	* PickLeastUsedModel(int)
	* PickRandomCar(bool, bool)
	* RemoveMember(int)
	* SortBasedOnUsage()

BoneNode_c (0 variables, 17 functions)
Variables list:

Functions list:
	* AddChild(BoneNode_c*)
	* BlendKeyframe(float)
	* BoneNode_c()
	* CalcWldMat(RwMatrixTag*)
	* ClampLimitsCurrent(unsigned char, unsigned char, unsigned char)
	* ClampLimitsDefault(unsigned char, unsigned char, unsigned char)
	* EulerToQuat(RwV3d*, RtQuat*)
	* GetIdFromBoneTag(int)
	* GetLimits(int, float*, float*)
	* GetSpeed()
	* Init(int, RpHAnimBlendInterpFrame*)
	* InitLimits()
	* Limit(float)
	* QuatToEuler(RtQuat*, RwV3d*)
	* SetLimits(int, float, float)
	* SetSpeed(float)
	* ~BoneNode_c()

BoneNodeManager_c (1 variables, 8 functions)
Variables list:
	* ms_boneInfos

Functions list:
	* BoneNodeManager_c()
	* Exit()
	* GetBoneNode()
	* GetNumBoneNodesLeft()
	* Init()
	* Reset()
	* ReturnBoneNode(BoneNode_c*)
	* ~BoneNodeManager_c()

IKChain_c (0 variables, 22 functions)
Variables list:

Functions list:
	* ClampLimits(int, unsigned char, unsigned char, unsigned char, int)
	* Exit()
	* GetBoneNodeFromTag(int)
	* GetBoneSpeed(int)
	* GetLimits(int, int, float*, float*)
	* GetPriority()
	* IKChain_c()
	* Init(char*, int, CPed*, int, RwV3d, int, CEntity*, int, RwV3d, float, int)
	* IsAtTarget(float, float*)
	* IsFacingTarget()
	* MoveBonesToTarget()
	* SetBlend(float)
	* SetBoneSpeed(int, float)
	* SetLimits(int, int, float, float)
	* SetOffsetBoneTag(int)
	* SetOffsetPos(RwV3d)
	* SetupBones(int, RwV3d, int, AnimBlendFrameData*)
	* Update(float)
	* UpdateEntity(CEntity*)
	* UpdateOffset(int, RwV3d)
	* UpdateTarget(unsigned char)
	* ~IKChain_c()

IKChainManager_c (0 variables, 19 functions)
Variables list:

Functions list:
	* AbortLookAt(CPed*, int)
	* AbortPointArm(int, CPed*, int)
	* AddIKChain(char*, int, CPed*, int, RwV3d, int, CEntity*, int, RwV3d, float, int)
	* CanAccept(CPed*, float)
	* CanAcceptLookAt(CPed*)
	* Exit()
	* GetLookAtEntity(CPed*)
	* GetLookAtOffset(CPed*, CVector*)
	* IKChainManager_c()
	* Init()
	* IsArmPointing(int, CPed*)
	* IsFacingTarget(CPed*, int)
	* IsLooking(CPed*)
	* LookAt(char*, CPed*, CEntity*, int, int, RwV3d*, unsigned char, float, int, int, unsigned char)
	* PointArm(char*, int, CPed*, CEntity*, int, RwV3d*, float, int, float)
	* RemoveIKChain(IKChain_c*)
	* Reset()
	* Update(float)
	* ~IKChainManager_c()

CDate (0 variables, 5 functions)
Variables list:

Functions list:
	* CDate()
	* PopulateDateFields(char const&, char const&, char const&, char const&, char const&, short)
	* operator<(CDate const&) const
	* operator==(CDate const&) const
	* operator>(CDate const&) const

C_PcSave (0 variables, 5 functions)
Variables list:

Functions list:
	* DeleteSlot(signed char)
	* GenerateGameFilename(int, char*)
	* PopulateSlotInfo()
	* SaveSlot(signed char, bool)
	* SetSaveDirectory(char const*)

CCover (6 variables, 16 functions)
Variables list:
	* LastTimeRecorded
	* SlowestTimeRecorded
	* bRenderCoverPoints
	* m_ListOfProcessedBuildings
	* m_NumPoints
	* m_aPoints

Functions list:
	* AddCoverPoint(int, CEntity*, CVector*, signed char, unsigned char)
	* CalculateHorizontalSize(CColTriangle*, CVector*)
	* DoLineCheckWithinObject(CColTriangle*, int, CVector*, CVector*, CVector, CVector)
	* DoesCoverPointStillProvideCover(CCoverPoint*, CVector)
	* Find2HighestPoints(CColTriangle*, CVector*, int&, int&)
	* FindAndReserveCoverPoint(CPed*, CVector&, bool)
	* FindCoordinatesCoverPoint(CCoverPoint*, CPed*, CVector&, CVector&)
	* FindCoverPointsForThisBuilding(CBuilding*)
	* FindDirFromVector(CVector)
	* FindVectorFromDir(unsigned char)
	* FindVectorFromFirstToMissingVertex(CColTriangle*, int*, CVector*)
	* Init()
	* RemoveCoverPointIfEntityLost(CCoverPoint*)
	* RemoveCoverPointsForThisEntity(CEntity*)
	* ShouldThisBuildingHaveItsCoverPointsCreated(CBuilding*)
	* Update()

CCoverPoint (0 variables, 3 functions)
Variables list:

Functions list:
	* CanAccomodateAnotherPed()
	* ReleaseCoverPointForPed(CPed*)
	* ReserveCoverPointForPed(CPed*)

CPlayerRelationshipRecorder (0 variables, 7 functions)
Variables list:

Functions list:
	* AddRelationship(CPed const*, int)
	* CPlayerRelationshipRecorder()
	* ClearRelationshipWithPlayer(CPed const*)
	* Flush()
	* GetRelationshipWithPlayer(CPed const*) const
	* RecordRelationshipWithPlayer(CPed const*)
	* ~CPlayerRelationshipRecorder()

CTaskSimpleAnim (0 variables, 4 functions)
Variables list:

Functions list:
	* CTaskSimpleAnim(bool)
	* FinishRunAnimCB(CAnimBlendAssociation*, void*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskSimpleAnim()

CTaskComplexPlayHandSignalAnim (1 variables, 11 functions)
Variables list:
	* ms_animBlock

Functions list:
	* CTaskComplexPlayHandSignalAnim(AnimationId, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetAnimIdForPed(CPed*)
	* GetTaskType() const
	* Serialize()
	* UseFatHands(CPed*)
	* ~CTaskComplexPlayHandSignalAnim()

CTaskSimpleRunAnimLoopedMiddle (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleRunAnimLoopedMiddle(AssocGroupId, AnimationId, float, float, float, int, bool)
	* CTaskSimpleRunAnimLoopedMiddle(char const*, char const*, int, float, float, float, int, bool)
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleRunAnimLoopedMiddle()

CTaskSimpleThrowProjectile (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleThrowProjectile(CEntity*, CVector)
	* Clone() const
	* ControlThrow(bool, CEntity*, CVector*)
	* FinishAnimThrowProjectileCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleThrowProjectile()

CTaskSimpleBeKickedOnGround (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleBeKickedOnGround()
	* Clone() const
	* FinishAnimBeKickedOnGroundCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleBeKickedOnGround()

CTaskSimpleBeHitWhileMoving (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleBeHitWhileMoving(int, int)
	* Clone() const
	* FinishAnimBeHitWhileMovingCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleBeHitWhileMoving()

CTaskSimpleChoking (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleChoking(CPed*, unsigned char)
	* Clone() const
	* DeleteAnimChokeCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* UpdateChoke(CPed*, CPed*, unsigned char)
	* ~CTaskSimpleChoking()

CTaskSimpleBeHit (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleBeHit(CPed*, ePedPieceTypes, int, int)
	* Clone() const
	* FinishAnimBeHitCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleBeHit()

CTaskComplexKillPedOnFootMelee (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexKillPedOnFootMelee(CPed*)
	* CalculateSearchPositionAndRanges(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexKillPedOnFootMelee()

CTaskComplexRoadRage (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexRoadRage(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexRoadRage()

CTaskComplexKillAllThreats (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexKillAllThreats(unsigned int, unsigned int, unsigned int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetNextThreatPed(CPed&) const
	* GetTaskType() const
	* ~CTaskComplexKillAllThreats()

CTaskComplexKillPedGroupOnFoot (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexKillPedGroupOnFoot(int, CPed*)
	* Clone() const
	* ComputeNearestLivingGroupPed(CPed const&, bool) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* ~CTaskComplexKillPedGroupOnFoot()

CTaskSimpleStealthKill (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleStealthKill(bool, CPed*, AssocGroupId)
	* Clone() const
	* FinishAnimStealthKillCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ManageAnim(CPed*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleStealthKill()

CTaskSimpleSetCharIgnoreWeaponRangeFlag (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleSetCharIgnoreWeaponRangeFlag()

CTaskComplexSeekCoverUntilTargetDead (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexSeekCoverUntilTargetDead(CPed*)
	* CTaskComplexSeekCoverUntilTargetDead(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetCoverPed(CPed*) const
	* GetTargetPed() const
	* GetTaskType() const
	* ~CTaskComplexSeekCoverUntilTargetDead()

CTaskComplexKillPedFromBoat (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexKillPedFromBoat(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexKillPedFromBoat()

CTaskComplexDestroyCarArmed (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexDestroyCarArmed(CVehicle*, unsigned int, unsigned int, unsigned int)
	* CalculateSearchPositionAndRanges(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexDestroyCarArmed()

CTaskComplexDestroyCarMelee (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexDestroyCarMelee(CVehicle*)
	* CalculateSearchPositionAndRanges(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexDestroyCarMelee()

CTaskComplexKillPedOnFootArmed (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexKillPedOnFootArmed(CPed*, unsigned int, unsigned int, unsigned int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* IsPedInLeaderFiringLine(CPed*) const
	* LineOfSightClearForAttack(CPed*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexKillPedOnFootArmed()

CTaskComplexKillPedOnFoot (1 variables, 11 functions)
Variables list:
	* ms_iCheckRoomToLeaveCarFreq

Functions list:
	* AbortIK(CPed*)
	* CTaskComplexKillPedOnFoot(CPed*, int, unsigned int, unsigned int, unsigned int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexKillPedOnFoot()

CTaskComplexKillPedOnFootStealth (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexKillPedOnFootStealth(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexKillPedOnFootStealth()

CTaskComplexReactToAttack (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexReactToAttack(eWeaponType, CEntity*, float, int, ePedPieceTypes)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexReactToAttack()

CTaskSimpleThrowControl (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleThrowControl(CEntity*, CVector const*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleThrowControl()

CTaskSimpleFightingControl (1 variables, 7 functions)
Variables list:
	* DEFAULT_FIGHT_ATTACK_PERIOD

Functions list:
	* CTaskSimpleFightingControl(CEntity*, float, float)
	* CalcMoveCommand(CPed*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleFightingControl()

CEventVehicleDamageWeapon (0 variables, 3 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventType() const
	* ~CEventVehicleDamageWeapon()

CVector2D (0 variables, 1 functions)
Variables list:

Functions list:
	* Magnitude() const

CTaskTimer (0 variables, 1 functions)
Variables list:

Functions list:
	* IsOutOfTime() const

CTaskSimpleSetStayInSamePlace (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleSetStayInSamePlace(bool)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleSetStayInSamePlace()

CTaskSimpleSetKindaStayInSamePlace (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleSetKindaStayInSamePlace(bool)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleSetKindaStayInSamePlace()

CTaskComplexBeStill (0 variables, 7 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexBeStill()

CTaskSimpleDie (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleDie(AssocGroupId, AnimationId, float, float)
	* CTaskSimpleDie(CAnimBlendHierarchy*, int, float, float)
	* CTaskSimpleDie(char const*, char const*, int, float, float)
	* Clone() const
	* FinishAnimDieCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleDie()

CTaskSimpleSitDown (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleSitDown(unsigned char)
	* Clone() const
	* FinishAnimSitDownCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleSitDown()

CTaskSimpleStandUp (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleStandUp(unsigned char)
	* Clone() const
	* FinishAnimStandUpCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleStandUp()

CTaskComplexObserveTrafficLights (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexObserveTrafficLights()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexObserveTrafficLights()

CTaskComplexObserveTrafficLightsAndAchieveHeading (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexObserveTrafficLightsAndAchieveHeading(int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexObserveTrafficLightsAndAchieveHeading()

CTaskComplexCrossRoadLookAndAchieveHeading (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexCrossRoadLookAndAchieveHeading(int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexCrossRoadLookAndAchieveHeading()

CTaskSimpleTurn180 (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleTurn180()
	* Clone() const
	* FinishAnimTurn180CB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleTurn180()

CTaskComplexHitResponse (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexHitResponse(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexHitResponse()

CTaskComplexHitByGunResponse (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexHitByGunResponse(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexHitByGunResponse()

CTaskComplexWaitAtAttractor (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexWaitAtAttractor(CPedAttractor*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexWaitAtAttractor()

CTaskComplexUseAttractor (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexUseAttractor(CPedAttractor*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexUseAttractor()

CTaskComplexWaitForDryWeather (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexWaitForDryWeather()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexWaitForDryWeather()

CTaskComplexWaitForBus (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexWaitForBus()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexWaitForBus()

CTaskSimpleWaitForBus (1 variables, 7 functions)
Variables list:
	* ms_fBoardBusThresholdSpeed

Functions list:
	* CTaskSimpleWaitForBus()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleWaitForBus()

CTaskComplexAttractorPartnerWait (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexAttractorPartnerWait(bool, CScriptedEffectPair const*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexAttractorPartnerWait()

CTaskComplexUseAttractorPartner (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexUseAttractorPartner(bool, CScriptedEffectPair const*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexUseAttractorPartner()

CTaskComplexUseScriptedAttractor (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexUseScriptedAttractor(CPedAttractor const*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexUseScriptedAttractor()

CTaskSimpleTogglePedThreatScanner (0 variables, 6 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleTogglePedThreatScanner()

CTaskSimpleClearLookAt (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleClearLookAt()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleClearLookAt()

CTaskComplexUseClosestFreeScriptedAttractor (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexUseClosestFreeScriptedAttractor(bool)
	* Clone() const
	* ComputeClosestFreeScriptedEffect(CPed const&) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexUseClosestFreeScriptedAttractor()

CTaskComplexUseGoggles (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexUseGoggles()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexUseGoggles()

CTaskComplexInWater (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexInWater()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexInWater()

CTaskComplexUseSequence (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexUseSequence(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexUseSequence()

CTaskSimpleWaitUntilLeaderAreaCodesMatch (0 variables, 6 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleWaitUntilLeaderAreaCodesMatch()

CTaskComplexUseScriptedBrain (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexUseScriptedBrain(char const*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexUseScriptedBrain()

CTaskSimpleIKManager (0 variables, 11 functions)
Variables list:

Functions list:
	* AddIKChainTask(CTaskSimpleIKChain*, int)
	* BlendOut(int, int)
	* CTaskSimpleIKManager()
	* Clone() const
	* GetTaskAtSlot(int)
	* GetTaskType() const
	* IsSlotEmpty(int)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* RemoveIKChainTask(int)
	* ~CTaskSimpleIKManager()

CTaskSimplePlayerOnFire (1 variables, 7 functions)
Variables list:
	* ms_iOnFireTime

Functions list:
	* CTaskSimplePlayerOnFire()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimplePlayerOnFire()

CTaskSimpleWaitForPizza (1 variables, 7 functions)
Variables list:
	* ms_iPizzaWaitTime

Functions list:
	* CTaskSimpleWaitForPizza()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleWaitForPizza()

CTaskSimpleSitIdle (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleSitIdle(int, unsigned char)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* SetTimer(int)
	* StartAnim(CPed*)
	* ~CTaskSimpleSitIdle()

CTaskSimpleTired (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleTired(int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleTired()

CTaskSimpleDead (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleDead(int, bool)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDead()

CTaskSimpleDrownInCar (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleDrownInCar()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDrownInCar()

CTaskSimpleDuckToggle (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleDuckToggle(int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDuckToggle()

CTaskSimpleStandStill (1 variables, 7 functions)
Variables list:
	* ms_iStandStillTime

Functions list:
	* CTaskSimpleStandStill(int, bool, bool, float)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleStandStill()

CTaskComplexUseMobilePhone (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexUseMobilePhone(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* RemovePhoneModel(CPed*)
	* Serialize()
	* Stop(CPed*)
	* ~CTaskComplexUseMobilePhone()

CTaskComplexOnFire (3 variables, 10 functions)
Variables list:
	* ms_fHealthRate
	* ms_fSafeDistance
	* ms_iMaxFleeTime

Functions list:
	* CTaskComplexOnFire()
	* Clone() const
	* ComputeFireDamage(CPed*, CPedDamageResponse&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexOnFire()

CTaskComplexUsePairedAttractor (1 variables, 11 functions)
Variables list:
	* ms_iUseAttractorAloneTime

Functions list:
	* CTaskComplexUsePairedAttractor(CPedAttractor*)
	* ClearPartnership()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* SeekPartnership(CPed*)
	* SetPartnership(CPed*, bool, CScriptedEffectPair const*)
	* ~CTaskComplexUsePairedAttractor()

CTaskComplexBeInGroup (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexBeInGroup(int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* MonitorMainGroupTask(CPed*)
	* MonitorSecondaryGroupTask(CPed*)
	* Serialize()
	* ~CTaskComplexBeInGroup()

CTaskComplexDieInCar (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexDieInCar(eWeaponType)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PreparePedVehicleForPedDeath(CVehicle*) const
	* Serialize()
	* ~CTaskComplexDieInCar()

CTaskSimpleWaitUntilAreaCodesMatch (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleWaitUntilAreaCodesMatch(CPed*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleWaitUntilAreaCodesMatch()

CTaskSimpleSetCharDecisionMaker (0 variables, 6 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleSetCharDecisionMaker()

CTaskSimpleIKPointArm (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleIKPointArm(char*, int, CEntity*, int, RwV3d, float, int)
	* Clone() const
	* CreateIKChain(CPed*)
	* GetPointAtEntity()
	* GetTaskType() const
	* UpdatePointArmInfo(char*, CEntity*, int, RwV3d, float, int)
	* ~CTaskSimpleIKPointArm()

CTaskSimpleIKChain (0 variables, 9 functions)
Variables list:

Functions list:
	* BlendOut(int)
	* CTaskSimpleIKChain(char*, int, RwV3d, int, CEntity*, int, RwV3d, float, int, int)
	* Clone() const
	* CreateIKChain(CPed*)
	* GetIKChain()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleIKChain()

CTaskSimpleIKLookAt (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleIKLookAt(char*, CEntity*, int, int, RwV3d, unsigned char, float, int, int)
	* Clone() const
	* CreateIKChain(CPed*)
	* GetLookAtEntity()
	* GetLookAtOffset()
	* GetTaskType() const
	* UpdateLookAtInfo(char*, CPed*, CEntity*, int, int, RwV3d, unsigned char, float, int, int)
	* ~CTaskSimpleIKLookAt()

CTaskComplexUseEffect (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexUseEffect(C2dEffect*, CEntity*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexUseEffect()

CTaskComplexSunbathe (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexSunbathe(CObject*, bool)
	* CanSunbathe()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ShouldLoadSunbatheAnims()
	* ~CTaskComplexSunbathe()

CTaskComplexSitDownThenIdleThenStandUp (1 variables, 10 functions)
Variables list:
	* ms_iDuration

Functions list:
	* CTaskComplexSitDownThenIdleThenStandUp(int, unsigned char, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexSitDownThenIdleThenStandUp()

CTaskSimpleDrown (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleDrown()
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDrown()

CTaskSimpleDieInCar (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleDieInCar(AssocGroupId, AnimationId)
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDieInCar()

CTaskSimpleTriggerEvent (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleTriggerEvent()

CTaskSimpleOnEscalator (0 variables, 5 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleOnEscalator()

CTaskSequences (3 variables, 5 functions)
Variables list:
	* ms_bIsOpened
	* ms_iActiveSequence
	* ms_taskSequence

Functions list:
	* CleanUpForShutdown()
	* GetAvailableSlot(unsigned char)
	* Init()
	* Load()
	* Save()

CScriptedBrainTaskStore (1 variables, 4 functions)
Variables list:
	* ms_entries

Functions list:
	* Clear(CPed*)
	* Clear(CTask*)
	* GetTask(CPed const*)
	* SetTask(CPed*, CTask*)

CTaskComplexUseEffectRunning (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* ~CTaskComplexUseEffectRunning()

CTaskComplexUseEffectSprinting (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* GetTaskType() const
	* ~CTaskComplexUseEffectSprinting()

CTaskComplexEnterCarAsDriverTimed (1 variables, 10 functions)
Variables list:
	* ms_iTime

Functions list:
	* CTaskComplexEnterCarAsDriverTimed(CVehicle*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* StopTimer(CEvent const*)
	* ~CTaskComplexEnterCarAsDriverTimed()

CTaskComplexEnterCarAsPassengerTimed (1 variables, 10 functions)
Variables list:
	* ms_iTime

Functions list:
	* CTaskComplexEnterCarAsPassengerTimed(CVehicle*, int, int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* StopTimer(CEvent const*)
	* ~CTaskComplexEnterCarAsPassengerTimed()

CTaskComplexEnterBoatAsDriver (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexEnterBoatAsDriver(CVehicle*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEnterBoatAsDriver()

CTaskComplexLeaveBoat (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexLeaveBoat(CVehicle*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexLeaveBoat()

CTaskComplexLeaveAnyCar (0 variables, 7 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexLeaveAnyCar()

CTaskComplexEnterAnyCarAsDriver (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexEnterAnyCarAsDriver()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEnterAnyCarAsDriver()

CTaskComplexShuffleSeats (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexShuffleSeats(CVehicle*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* CreateTaskUtilityLineUpPedWithCar(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexShuffleSeats()

CTaskComplexCarDriveWander (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexCarDriveWander(CVehicle*, int, float)
	* Clone() const
	* CreateSubTaskCannotGetInCar(CPed*) const
	* GetTaskType() const
	* Serialize()
	* SetUpCar() const
	* ~CTaskComplexCarDriveWander()

CTaskComplexScreamInCarThenLeave (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexScreamInCarThenLeave(CVehicle*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexScreamInCarThenLeave()

CTaskComplexStealCar (1 variables, 9 functions)
Variables list:
	* ms_iStealCarTime

Functions list:
	* CTaskComplexStealCar(CVehicle*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexStealCar()

CTaskComplexLeaveCarAsPassengerWait (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexLeaveCarAsPassengerWait(CVehicle*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetNextPassengerToLeave() const
	* GetTaskType() const
	* Serialize()
	* SetPedInZerothPassengerSeat(CPed*) const
	* ~CTaskComplexLeaveCarAsPassengerWait()

CTaskSimpleCarDrive (0 variables, 20 functions)
Variables list:

Functions list:
	* AbortIK(CPed*)
	* CTaskSimpleCarDrive(CVehicle*, CTaskUtilityLineUpPedWithCar*, bool)
	* Clone() const
	* FinishAnimCloseDoorRollingCB(CAnimBlendAssociation*, void*)
	* GetPedsBopInfo(CPed*, int*, int*)
	* GetTaskType() const
	* IsBopping()
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessArmBopping(CPed*, unsigned char, float)
	* ProcessBopping(CPed*, unsigned char)
	* ProcessHeadBopping(CPed*, unsigned char, float)
	* ProcessPed(CPed*)
	* Serialize()
	* SetPedPosition(CPed*)
	* StartAnimDoorCloseRolling(CPed const*)
	* StartBopping(CPed*)
	* StopBopping()
	* TriggerIK(CPed*)
	* UpdateBopping()
	* ~CTaskSimpleCarDrive()

CTaskSimpleCarSetTempAction (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSetTempAction(CVehicle*, int, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleCarSetTempAction()

CTaskComplexEnterCar (0 variables, 16 functions)
Variables list:

Functions list:
	* CTaskComplexEnterCar(CVehicle*, bool, bool, bool, bool)
	* ComputeTargetDoorOppositeToFlag()
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateNextSubTask_AfterSimpleCarAlign(CPed*)
	* CreateSubTask(int, CPed*)
	* CreateTaskUtilityLineUpPedWithCar(CPed*)
	* GetCameraAvoidVehicle()
	* GetCameraStickModifier(CPed*, float, float&, float&, float&, float&)
	* GetTargetPos()
	* MakeAbortable(CPed*, int, CEvent const*)
	* PreparePedForVehicleEnter(CPed*)
	* PrepareVehicleForPedEnter(CPed*)
	* SetVehicleFlags(CPed*)
	* ~CTaskComplexEnterCar()

CTaskComplexDragPedFromCar (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexDragPedFromCar(CPed*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexDragPedFromCar()

CTaskComplexOpenPassengerDoor (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskComplexOpenPassengerDoor(CVehicle*, int)
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexOpenPassengerDoor()

CTaskComplexOpenDriverDoor (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskComplexOpenDriverDoor(CVehicle*)
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexOpenDriverDoor()

CTaskComplexEnterCarAsPassenger (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskComplexEnterCarAsPassenger(CVehicle*, int, bool)
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEnterCarAsPassenger()

CTaskComplexEnterCarAsDriver (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskComplexEnterCarAsDriver(CVehicle*)
	* Clone() const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexEnterCarAsDriver()

CTaskSimpleCarAlign (1 variables, 10 functions)
Variables list:
	* ms_fMinHeightForJump

Functions list:
	* CTaskSimpleCarAlign(CVehicle*, CVector const&, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* FinishAnimCarAlignCB(CAnimBlendAssociation*, void*)
	* FixHeading(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarAlign()

CTaskSimpleCarOpenLockedDoorFromOutside (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleCarOpenLockedDoorFromOutside(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* FinishAnimCarOpenLockedDoorFromOutsideCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarOpenLockedDoorFromOutside()

CTaskSimplePickUpBike (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimplePickUpBike(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* FinishAnimPickUpBikeCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimplePickUpBike()

CTaskSimpleCarCloseDoorFromOutside (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarCloseDoorFromOutside(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* ComputeAnimID(int&, int&)
	* FinishAnimCarCloseDoorFromOutsideCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarCloseDoorFromOutside()

CTaskSimpleCarGetIn (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarGetIn(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* FinishAnimCarGetInCB(CAnimBlendAssociation*, void*)
	* GetPositionInAnim()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarGetIn()

CTaskSimpleCarShuffle (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleCarShuffle(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* FinishAnimCarShuffleCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarShuffle()

CTaskSimpleCarWaitToSlowDown (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleCarWaitToSlowDown(CVehicle*, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* ~CTaskSimpleCarWaitToSlowDown()

CTaskSimpleCarGetOut (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarGetOut(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* ComputeAnimID(int&, int&)
	* FinishAnimCarGetOutCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarGetOut()

CTaskSimpleCarJumpOut (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarJumpOut(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* ComputeAnimID(int&, int&)
	* FinishAnimCarJumpOutCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarJumpOut()

CTaskSimpleCarSlowBeDraggedOut (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSlowBeDraggedOut(CVehicle*, int, CTaskUtilityLineUpPedWithCar*, bool)
	* Clone() const
	* ComputeAnimID(int&, int&) const
	* FinishAnimCarSlowBeDraggedOutCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarSlowBeDraggedOut()

CTaskComplexCarSlowBeDraggedOut (0 variables, 12 functions)
Variables list:

Functions list:
	* CTaskComplexCarSlowBeDraggedOut(CVehicle*, int, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* CreateTaskUtilityLineUpPedWithCar(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PreparePedForVehicleExit(CPed*)
	* PrepareVehicleForPedExit(CPed*)
	* ~CTaskComplexCarSlowBeDraggedOut()

CTaskComplexCarSlowBeDraggedOutAndStandUp (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexCarSlowBeDraggedOutAndStandUp(CVehicle*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexCarSlowBeDraggedOutAndStandUp()

CTaskSimpleBikeJacked (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleBikeJacked(CVehicle*, int, int, CPed*, bool)
	* Clone() const
	* FinishAnimBikeHitCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* ~CTaskSimpleBikeJacked()

CTaskComplexGetOnBoatSeat (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexGetOnBoatSeat(CVehicle*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexGetOnBoatSeat()

CTaskSimpleWaitUntilPedIsInCar (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleWaitUntilPedIsInCar(CPed*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleWaitUntilPedIsInCar()

CTaskSimpleWaitUntilPedIsOutCar (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleWaitUntilPedIsOutCar(CPed*, CVector const&)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleWaitUntilPedIsOutCar()

CTaskSimpleSetPedAsAutoDriver (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleSetPedAsAutoDriver(CVehicle*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleSetPedAsAutoDriver()

CTaskSimpleCarFallOut (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarFallOut(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* ComputeAnimID(int&, int&) const
	* FinishAnimFallOutCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarFallOut()

CTaskSimpleCarSetPedSlowDraggedOut (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSetPedSlowDraggedOut(CVehicle*, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarSetPedSlowDraggedOut()

CTaskSimpleCarSetPedOut (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSetPedOut(CVehicle*, int, bool)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PositionPedOutOfCollision(CPed*, CVehicle*, int)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarSetPedOut()

CTaskSimpleCarForcePedOut (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCarForcePedOut(CVehicle*, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarForcePedOut()

CTaskSimpleCarSetPedInAsDriver (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSetPedInAsDriver(CVehicle*, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarSetPedInAsDriver()

CTaskSimpleCarSetPedInAsPassenger (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSetPedInAsPassenger(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarSetPedInAsPassenger()

CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse(CVehicle*, int, CVector const&, int)
	* Clone() const
	* ComputeTarget(CVector&) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse()

CTaskSimpleCarWaitForDoorNotToBeInUse (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleCarWaitForDoorNotToBeInUse(CVehicle*, int, int)
	* CheckDoorsFreeOfPeds(CVehicle const&, int, bool&, bool&)
	* Clone() const
	* GetTaskType() const
	* IsValidTargetDoor(int)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* ~CTaskSimpleCarWaitForDoorNotToBeInUse()

CTaskSimpleCreateCarAndGetIn (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleCreateCarAndGetIn(CVector const&, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleCreateCarAndGetIn()

CTaskComplexGoToBoatSteeringWheel (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexGoToBoatSteeringWheel(CVehicle*)
	* Clone() const
	* ComputeTargetPos()
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* ~CTaskComplexGoToBoatSteeringWheel()

CTaskSimpleCarSlowDragPedOut (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarSlowDragPedOut(CVehicle*, int, CTaskUtilityLineUpPedWithCar*, bool)
	* Clone() const
	* ComputeAnimID(int&, int&) const
	* FinishAnimCarSlowDragPedOutCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarSlowDragPedOut()

CTaskSimpleCarCloseDoorFromInside (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarCloseDoorFromInside(CVehicle*, int, CTaskUtilityLineUpPedWithCar*)
	* Clone() const
	* ComputeAnimID(int&, int&) const
	* FinishAnimCarCloseDoorFromInsideCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarCloseDoorFromInside()

CTaskSimpleCarOpenDoorFromOutside (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleCarOpenDoorFromOutside(CVehicle*, int, CTaskUtilityLineUpPedWithCar*, bool)
	* Clone() const
	* ComputeAnimID(int&, int&) const
	* FinishAnimCarOpenDoorFromOutsideCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetPedPosition(CPed*)
	* StartAnim(CPed const*)
	* ~CTaskSimpleCarOpenDoorFromOutside()

CCarEnterExit (13 variables, 34 functions)
Variables list:
	* ms_bPedOffsetsCalculated
	* ms_fMaxSpeed_CanDragPedOut
	* ms_fMaxSpeed_PlayerCanDragPedOut
	* ms_fMinSpeedPlayerCanJumpOutCar
	* ms_fMinSpeedPlayerCanStepOutCar
	* ms_fPlayerMinQuitTime
	* ms_fSmallTurnAmount
	* ms_vecPedBedLAnimOffset
	* ms_vecPedBedRAnimOffset
	* ms_vecPedChairAnimOffset
	* ms_vecPedDeskAnimOffset
	* ms_vecPedGetUpAnimOffset
	* ms_vecPedQuickDraggedOutCarAnimOffset

Functions list:
	* AddInCarAnim(CVehicle const&, CPed*, bool)
	* CarHasDoorToClose(CVehicle const&, int)
	* CarHasDoorToOpen(CVehicle const&, int)
	* CarHasOpenableDoor(CVehicle const&, int, CPed const&)
	* CarHasPartiallyOpenDoor(CVehicle const&, int)
	* ComputeDoorFlag(CVehicle const&, int, bool)
	* ComputeOppositeDoorFlag(CVehicle const&, int, bool)
	* ComputePassengerIndexFromCarDoor(CVehicle const&, int)
	* ComputeQuickJackedPed(CVehicle const&, int)
	* ComputeSlowJackedPed(CVehicle const&, int)
	* ComputeTargetDoorToEnterAsPassenger(CVehicle const&, int)
	* ComputeTargetDoorToExit(CVehicle const&, CPed const&)
	* GetNearestCarDoor(CPed const&, CVehicle const&, CVector&, int&)
	* GetNearestCarPassengerDoor(CPed const&, CVehicle const&, CVector&, int&, bool, bool, bool)
	* GetPositionToOpenCarDoor(CVehicle const&, int)
	* IsCarDoorInUse(CVehicle const&, int, int)
	* IsCarDoorReady(CVehicle const&, int)
	* IsCarQuickJackPossible(CVehicle const&, int, CPed const&)
	* IsCarSlowJackRequired(CVehicle const&, int, CPed const&)
	* IsClearToDriveAway(CVehicle const&)
	* IsDriverDoorFlag(CVehicle const&, unsigned char, bool)
	* IsPathToDoorBlockedByVehicleCollisionModel(CPed const&, CVehicle&, CVector const&)
	* IsPedHealthy(CPed const&)
	* IsPlayerToQuitCarEnter(CPed const&, CVehicle const&, int, CTask*)
	* IsRoomForPedToLeaveCar(CVehicle const&, int, CVector*)
	* IsVehicleHealthy(CVehicle const&)
	* IsVehicleStealable(CVehicle const&, CPed const&)
	* MakeUndraggedDriverPedLeaveCar(CVehicle const&, CPed const&)
	* MakeUndraggedPassengerPedsLeaveCar(CVehicle const&, CPed const*, CPed const*)
	* QuitEnteringCar(CPed*, CVehicle*, int, bool)
	* RemoveCarSitAnim(CPed const&)
	* RemoveGetInAnims(CPed const&)
	* SetAnimOffsetForEnterOrExitVehicle()
	* SetPedInCarDirect(CPed*, CVehicle*, int, bool)

CTaskUtilityLineUpPedWithCar (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskUtilityLineUpPedWithCar(CVector const&, int, int, int)
	* GetLocalPositionToOpenCarDoor(CVehicle*, float, CAnimBlendAssociation*)
	* GetPositionToOpenCarDoor(CVehicle*, float, CAnimBlendAssociation*)
	* ProcessPed(CPed*, CVehicle*, CAnimBlendAssociation*)
	* ~CTaskUtilityLineUpPedWithCar()

CTaskSimpleHitHead (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleHitHead()
	* Clone() const
	* FinishAnimHitHeadCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleHitHead()

CTaskSimpleEvasiveDive (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleEvasiveDive(CVehicle*)
	* Clone() const
	* FinishAnimEvasiveDiveCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleEvasiveDive()

CTaskComplexHitPedWithCar (6 variables, 12 functions)
Variables list:
	* ms_fMinDamageImpulse
	* ms_fMinDieImpulse
	* ms_fMinPlayerDamageImpulse
	* ms_fMinPlayerDieImpulse
	* ms_fMinVertDamageImpulse
	* ms_iDownTime

Functions list:
	* CTaskComplexHitPedWithCar(CVehicle*, float)
	* Clone() const
	* ComputeEvasiveStepMoveDir(CPed const&, CVehicle*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* HitHurtsPed(CPed*) const
	* HitKillsPed(CPed*) const
	* Serialize()
	* ~CTaskComplexHitPedWithCar()

CTaskComplexMoveBackAndJump (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexMoveBackAndJump()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int) const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexMoveBackAndJump()

CTaskComplexDiveFromAttachedEntityAndGetUp (0 variables, 7 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexDiveFromAttachedEntityAndGetUp()

CTaskSimpleHurtPedWithCar (1 variables, 7 functions)
Variables list:
	* ms_fDamage

Functions list:
	* CTaskSimpleHurtPedWithCar(CVehicle*, float)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleHurtPedWithCar()

CTaskSimpleKillPedWithCar (1 variables, 9 functions)
Variables list:
	* ms_fDamage

Functions list:
	* CTaskSimpleKillPedWithCar(CVehicle*, float)
	* Clone() const
	* DamageCarBonnet(CPed const*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* SetPlayerPadJolt() const
	* ~CTaskSimpleKillPedWithCar()

CTaskSimpleGiveCPR (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleGiveCPR(CAccident*)
	* Clone() const
	* FinishGiveCPRAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ReviveDeadPed(CPed*) const
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleGiveCPR()

CTaskComplexTreatAccident (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexTreatAccident(CAccident*)
	* Clone() const
	* ComputeHeading(CPed const&) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed const*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexTreatAccident()

CTaskComplexUseSwatRope (4 variables, 12 functions)
Variables list:
	* ms_fAbseilSpeed
	* ms_fAbseilTurnSpeed
	* ms_fJumpHeight
	* ms_fRopeSpeed

Functions list:
	* AbortUrgently(CPed*)
	* CTaskComplexUseSwatRope(int)
	* CTaskComplexUseSwatRope(int, CHeli*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* IsInterruptable(CPed const*) const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexUseSwatRope()

CTaskComplexUseWaterCannon (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexUseWaterCannon(CFire*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* ExtinguishFire(CPed*)
	* GetTaskType() const
	* ~CTaskComplexUseWaterCannon()

CTaskComplexExtinguishFireOnFoot (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexExtinguishFireOnFoot(CVector const&)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* FindNearestFire(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexExtinguishFireOnFoot()

CTaskComplexDriveFireTruck (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexDriveFireTruck(CVehicle*, CPed*, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* ~CTaskComplexDriveFireTruck()

CTaskComplexPresentIDToCop (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexPresentIDToCop(CPed*)
	* Clone() const
	* ComputeTargetHeading(CPed const&) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed const*) const
	* GetTaskType() const
	* ~CTaskComplexPresentIDToCop()

CTaskComplexMedicTreatInjuredPed (3 variables, 13 functions)
Variables list:
	* ms_fDriveDist
	* ms_fInjuredPedTargetRadius
	* ms_fMaxTreatmentRadius

Functions list:
	* CTaskComplexMedicTreatInjuredPed(CVehicle*, CPed*, bool)
	* CalcTargetPosWithOffset(CPed*, CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateDealWithNextAccidentTask(CPed*, CAccident*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetNearestAccident(CVector const&)
	* GetNearestAccidentExceptThisOne(CVector const&, CAccident*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexMedicTreatInjuredPed()

CTaskComplexWander (4 variables, 19 functions)
Variables list:
	* ms_fBlockedNodeDistance
	* ms_fTargetRadius
	* ms_iCrossRoadLookTime
	* ms_iTrafficLightWaitTime

Functions list:
	* CTaskComplexWander(int, unsigned char, bool, float)
	* ComputeTargetHeading(CPed const*) const
	* ComputeTargetPos(CPed const*, CVector&, CNodeAddress const&) const
	* ContinueFrom(CTaskComplexWander const&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(CPed const*, int)
	* GetTaskType() const
	* GetWanderTaskByPedType(CPed const&)
	* GetWanderTaskByPedType(int)
	* ScanForBlockedNode(CPed*, CNodeAddress const&) const
	* ScanForBlockedNode(CVector const&, CEntity const*) const
	* ScanForBlockedNodes(CPed*)
	* SetDir(int)
	* UpdateDir(CPed const*)
	* UpdatePathNodes(CPed const*, unsigned char, CNodeAddress&, CNodeAddress&, unsigned char&)
	* ValidNodes() const
	* ~CTaskComplexWander()

CTaskComplexWanderMedic (0 variables, 4 functions)
Variables list:

Functions list:
	* Clone() const
	* GetWanderType() const
	* ScanForStuff(CPed*)
	* ~CTaskComplexWanderMedic()

CTaskComplexFleePoint (6 variables, 11 functions)
Variables list:
	* ms_fMaxDist
	* ms_fMinDist
	* ms_fSafeDistance
	* ms_fThetaRange
	* ms_iFleeTime
	* ms_iRecoveryTime

Functions list:
	* CTaskComplexFleePoint(CVector const&, bool, float, int)
	* Clone() const
	* ComputeTargetPoint(CPed const*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SetFleePosition(CVector const&, float, bool)
	* ~CTaskComplexFleePoint()

CTaskComplexSmartFleePoint (3 variables, 12 functions)
Variables list:
	* ms_fSafeDistance
	* ms_iFleeTime
	* ms_iRecoveryTime

Functions list:
	* CTaskComplexSmartFleePoint(CVector const&, bool, float, int)
	* Clone() const
	* ComputeFleeDir(CPed*) const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SetDefaultTaskWanderDir(CPed*) const
	* SetFleePosition(CVector const&, float, bool)
	* ~CTaskComplexSmartFleePoint()

CTaskComplexFleeShooting (2 variables, 8 functions)
Variables list:
	* ms_iShootRecoverTime
	* ms_iShootTime

Functions list:
	* CTaskComplexFleeShooting(CEntity*, bool, float, int, int, int, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexFleeShooting()

CTaskComplexFleeEntity (4 variables, 8 functions)
Variables list:
	* ms_fEntityPosChangeThreshold
	* ms_fSafeDistance
	* ms_iEntityPosCheckPeriod
	* ms_iFleeTime

Functions list:
	* CTaskComplexFleeEntity(CEntity*, bool, float, int, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* ~CTaskComplexFleeEntity()

CTaskComplexWanderFlee (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskComplexWanderFlee(int, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* GetWanderType() const
	* ScanForStuff(CPed*)
	* ~CTaskComplexWanderFlee()

CTaskComplexGangLeader (0 variables, 16 functions)
Variables list:

Functions list:
	* CTaskComplexGangLeader(CPedGroup*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* DoGangAbuseSpeech(CPed*, CPed*)
	* DoGangAttackSpeech(CPed*, CPed*)
	* GetDrinkAnim(CPed*)
	* GetRandomGangAmbientAnim(CPed*, CEntity*)
	* GetSmokeAnim(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ScanForStuff(CPed*)
	* ShouldLoadGangAnims()
	* TryToPassObject(CPed*, CPedGroup*)
	* ~CTaskComplexGangLeader()

CTaskComplexGangFollower (7 variables, 10 functions)
Variables list:
	* ms_fDistFromLeaderCanStop
	* ms_fDistFromLeaderCanStopSqr
	* ms_fLeaderIsMovingDeltaDistSqr
	* ms_fTargetSlowDownDist
	* ms_fTargetSlowDownDistSqr
	* ms_iMaxStaticCounter
	* ms_nUseClimbing

Functions list:
	* CTaskComplexGangFollower(CPedGroup*, CPed*, unsigned char, CVector, float)
	* CalculateOffsetPosition(CVector&)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SetFollowLeader(unsigned char)
	* ~CTaskComplexGangFollower()

CTaskComplexTrackEntity (0 variables, 12 functions)
Variables list:

Functions list:
	* CTaskComplexTrackEntity(CEntity*, CVector, unsigned char, int, float, float, unsigned char)
	* CalcMoveRatio(CPed*)
	* CalcTargetPos(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetDistToTargetSq()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* SetOffsetPos(CVector)
	* ~CTaskComplexTrackEntity()

CTaskSimpleDoHandSignal (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleDoHandSignal()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleDoHandSignal()

CTaskLeanOnVehicle (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskLeanOnVehicle(CEntity*, int, unsigned char)
	* Clone() const
	* FinishAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskLeanOnVehicle()

CTaskComplexGangJoinRespond (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexGangJoinRespond(unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexGangJoinRespond()

CTaskComplexProstituteSolicit (13 variables, 12 functions)
Variables list:
	* ms_fGiveUpDistanceSqr
	* ms_fMaxSolicitDistanceSqr
	* ms_fMaxSolicitSpeedSqr
	* ms_fMinSecludedDistForSexSqr
	* ms_fSlowEnoughSpeedForSexSqr
	* ms_fTooCloseDistForSexSqr
	* ms_iChargePerSec
	* ms_iGiveUpTime
	* ms_iHealthPerSec
	* ms_iScanForPedsFreq
	* ms_iShagFreqFast
	* ms_iShagFreqMid
	* ms_iShagFreqSlow

Functions list:
	* CTaskComplexProstituteSolicit(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetRidOfPlayerProstitute()
	* GetTaskType() const
	* IsTaskValid(CPed*, CPed*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexProstituteSolicit()

CTaskComplexPassObject (0 variables, 9 functions)
Variables list:

Functions list:
	* AbortIK(CPed*)
	* CTaskComplexPassObject(CPed*, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexPassObject()

CTaskGoToVehicleAndLean (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskGoToVehicleAndLean(CVehicle*, int)
	* CalcTargetPos(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* DoTidyUp(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskGoToVehicleAndLean()

CTaskComplexSignalAtPed (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexSignalAtPed(CPed*, int, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexSignalAtPed()

CTaskComplexStareAtPed (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexStareAtPed(CPedGroup*, CPed*, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexStareAtPed()

CTaskGangHasslePed (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskGangHasslePed(CPed*, int, int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskGangHasslePed()

CTaskGangHassleVehicle (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskGangHassleVehicle(CVehicle*, int, unsigned char, float, float)
	* CalcTargetOffset()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTargetHeading(CPed*)
	* GetTaskType() const
	* ~CTaskGangHassleVehicle()

CTaskSimpleGoToPointFine (0 variables, 11 functions)
Variables list:

Functions list:
	* BaseRatio(eMoveState)
	* CTaskSimpleGoToPointFine(float, CVector, float, CEntity*)
	* Clone() const
	* Finish(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* SetBlendedMoveAnim(CPed*)
	* SetMoveRatio(float)
	* SetTargetPos(CVector)
	* ~CTaskSimpleGoToPointFine()

CTaskComplexGoToAttractor (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexGoToAttractor(CPedAttractor*, CVector const&, float, float, int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexGoToAttractor()

CTaskComplexUseEntryExit (0 variables, 8 functions)
Variables list:

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* UseEntryExit(CPed*)
	* ~CTaskComplexUseEntryExit()

CTaskComplexInvestigateDisturbance (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexInvestigateDisturbance(CVector const&, CEntity*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexInvestigateDisturbance()

CTaskComplexGotoDoorAndOpen (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexGotoDoorAndOpen(CObject*)
	* CTaskComplexGotoDoorAndOpen(CVector const&, CVector const&)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexGotoDoorAndOpen()

CTaskComplexAvoidEntity (2 variables, 15 functions)
Variables list:
	* ms_fEntityAvoidRadius
	* ms_iPeriod

Functions list:
	* CTaskComplexAvoidEntity(int, CEntity*, CVector const&)
	* Clone() const
	* ComputeAvoidSphere(CPed const&, CColSphere&)
	* ComputeDetourTarget(CPed const&)
	* ComputeDetourTarget(CPed const&, CColSphere const&)
	* ComputeSphere(CColSphere&, CEntity**)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* NearbyEntitiesInSphere(CPed const&, CColSphere const&, CEntity**, CEntity**)
	* QuitIK(CPed*)
	* SetUpIK(CPed*)
	* ~CTaskComplexAvoidEntity()

CTaskComplexAvoidOtherPedWhileWandering (2 variables, 16 functions)
Variables list:
	* ms_fPedAvoidRadius
	* ms_iPeriod

Functions list:
	* CTaskComplexAvoidOtherPedWhileWandering(CPed*, CVector const&, int)
	* Clone() const
	* ComputeAvoidSphere(CPed const&, CColSphere&)
	* ComputeDetourTarget(CPed const&)
	* ComputeDetourTarget(CPed const&, CColSphere&)
	* ComputeSphere(CColSphere&, CPed**)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* NearbyPedsInSphere(CPed const&, CColSphere const&, CPed**, CPed**)
	* QuitIK(CPed*)
	* Serialize()
	* SetUpIK(CPed*)
	* ~CTaskComplexAvoidOtherPedWhileWandering()

CTaskComplexGoToPointAndStandStillAndAchieveHeading (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexGoToPointAndStandStillAndAchieveHeading(int, CVector const&, float, float, float, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGoToPointAndStandStillAndAchieveHeading()

CTaskComplexGoToPointAndStandStillTimed (1 variables, 7 functions)
Variables list:
	* ms_iTime

Functions list:
	* CTaskComplexGoToPointAndStandStillTimed(int, CVector const&, float, float, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* StopTimer(CEvent const*)
	* ~CTaskComplexGoToPointAndStandStillTimed()

CTaskSimpleSlideToCoord (2 variables, 7 functions)
Variables list:
	* ms_fHeadingAccuracy
	* ms_fPosAccuracy

Functions list:
	* CTaskSimpleSlideToCoord(CVector const&, float, float)
	* CTaskSimpleSlideToCoord(CVector const&, float, float, char const*, char const*, int, float, bool, int)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleSlideToCoord()

CTaskSimpleAchieveHeading (2 variables, 9 functions)
Variables list:
	* ms_fHeadingChangeRateFrac
	* ms_fHeadingTolerance

Functions list:
	* CTaskSimpleAchieveHeading(float, float, float)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* QuitIK(CPed*)
	* Serialize()
	* SetUpIK(CPed*)
	* ~CTaskSimpleAchieveHeading()

CTaskSimpleGoTo (1 variables, 5 functions)
Variables list:
	* ms_fTargetRadius

Functions list:
	* CTaskSimpleGoTo(int, CVector const&, float)
	* HasCircledTarget(CPed*)
	* QuitIK(CPed*)
	* SetUpIK(CPed*)
	* ~CTaskSimpleGoTo()

CTaskSimpleGoToPoint (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleGoToPoint(int, CVector const&, float, bool, bool)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleGoToPoint()

CTaskComplexGoToPointUntilCollisionAndStandStill (0 variables, 3 functions)
Variables list:

Functions list:
	* Clone() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexGoToPointUntilCollisionAndStandStill()

CTaskComplexFollowNodeRouteShooting (2 variables, 6 functions)
Variables list:
	* ms_iShootRecoverTime
	* ms_iShootTime

Functions list:
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexFollowNodeRouteShooting()

CTaskComplexWanderProstitute (1 variables, 6 functions)
Variables list:
	* ms_iPunterScanFreq

Functions list:
	* CTaskComplexWanderProstitute(int, unsigned char, bool)
	* Clone() const
	* CreateFirstSubTask(CPed*)
	* GetWanderType() const
	* ScanForStuff(CPed*)
	* ~CTaskComplexWanderProstitute()

CTaskComplexWanderGang (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexWanderGang(int, unsigned char, int, bool, float)
	* CanJoinGang()
	* Clone() const
	* GetDistanceSqToNode(CPed*)
	* GetWanderType() const
	* ScanForStuff(CPed*)
	* ~CTaskComplexWanderGang()

CTaskComplexWanderStandard (4 variables, 11 functions)
Variables list:
	* ms_fChatRange
	* ms_fSexyVehicleRange
	* ms_iScanFreeTime
	* ms_iScanPeriod

Functions list:
	* Clone() const
	* GetWanderType() const
	* LookForChatPartners(CPed*)
	* LookForGangMembers(CPed*)
	* LookForSexyCars(CPed*)
	* ScanForEffects(CPed*)
	* ScanForStuff(CPed*)
	* SetNextMinScanTime(CPed*)
	* SetNextScanTime(int)
	* WillChat(CPed const&, CPed const&) const
	* ~CTaskComplexWanderStandard()

CTaskComplexWanderCriminal (2 variables, 5 functions)
Variables list:
	* ms_iScanPeriod
	* ms_iStealCarScanFreeTime

Functions list:
	* Clone() const
	* GetWanderType() const
	* LookForCarsToSteal(CPed*)
	* ScanForStuff(CPed*)
	* ~CTaskComplexWanderCriminal()

CTaskInteriorBeInHouse (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskInteriorBeInHouse(InteriorGroup_c*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetInfoForPedToUse(CPed*, int*)
	* GetTaskType() const
	* ~CTaskInteriorBeInHouse()

CTaskInteriorBeInOffice (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskInteriorBeInOffice(InteriorGroup_c*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetInfoForPedToUse(int*)
	* GetTaskType() const
	* ~CTaskInteriorBeInOffice()

CTaskInteriorGoToInfo (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskInteriorGoToInfo(InteriorInfo_t*, Interior_c*, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskInteriorGoToInfo()

CTaskInteriorUseInfo (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskInteriorUseInfo(InteriorInfo_t*, Interior_c*, int, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskInteriorUseInfo()

CTaskInteriorSitInChair (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskInteriorSitInChair(int, InteriorInfo_t*, unsigned char)
	* Clone() const
	* FinishAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskInteriorSitInChair()

CTaskInteriorLieInBed (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskInteriorLieInBed(int, InteriorInfo_t*, unsigned char, unsigned char)
	* Clone() const
	* FinishAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskInteriorLieInBed()

CTaskInteriorSitAtDesk (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskInteriorSitAtDesk(int, InteriorInfo_t*, unsigned char)
	* Clone() const
	* FinishAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartRandomLoopAnim(CPed*, float)
	* StartRandomOneOffAnim(CPed*)
	* ~CTaskInteriorSitAtDesk()

CTaskInteriorShopKeeper (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskInteriorShopKeeper(InteriorGroup_c*, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskInteriorShopKeeper()

CTaskInteriorBeInShop (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskInteriorBeInShop(InteriorGroup_c*)
	* Clone() const
	* GetTaskType() const
	* GetWanderType() const
	* ScanForStuff(CPed*)
	* ~CTaskInteriorBeInShop()

CTaskSimpleGetUp (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleGetUp()
	* Clone() const
	* FinishAnimGetUpCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleGetUp()

CTaskComplexGetUpAndStandStill (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexGetUpAndStandStill()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexGetUpAndStandStill()

CTaskSimpleFall (2 variables, 9 functions)
Variables list:
	* ms_fFallingLoopEnd
	* ms_fFallingLoopStart

Functions list:
	* CTaskSimpleFall(AnimationId, AssocGroupId, unsigned int)
	* Clone() const
	* FinishAnimFallCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessFall(CPed*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleFall()

CTaskComplexFallAndGetUp (0 variables, 13 functions)
Variables list:

Functions list:
	* CTaskComplexFallAndGetUp(AnimationId, AssocGroupId, int)
	* CTaskComplexFallAndGetUp(int, int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* IsFalling() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* SetDownTime(int)
	* ~CTaskComplexFallAndGetUp()

CTaskComplexFallAndStayDown (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexFallAndStayDown(AnimationId, AssocGroupId)
	* CTaskComplexFallAndStayDown(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexFallAndStayDown()

CTaskSimpleInAir (2 variables, 9 functions)
Variables list:
	* ms_fMaxStuckVelocity
	* ms_iNumStuckFallingFramesBeforeQuitting

Functions list:
	* ApplyRollAndPitch(CPed*)
	* CTaskSimpleInAir(bool, bool, bool)
	* Clone() const
	* DeleteInAirAnimCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleInAir()

CTaskSimpleLand (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskSimpleLand(AnimationId)
	* Clone() const
	* FinishAnimLandCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* LeftFootLanded()
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* RightFootLanded()
	* Serialize()
	* ~CTaskSimpleLand()

CTaskSimpleJump (5 variables, 11 functions)
Variables list:
	* ms_fMinJumpSpeed
	* ms_fPedJumpForce
	* ms_fPlayerPedJumpForce
	* ms_fRunJumpSpeed
	* ms_fSprintJumpSpeed

Functions list:
	* CTaskSimpleJump(bool)
	* Clone() const
	* FinishAnimLaunchCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* HasPedHitHead(CPed*)
	* Launch(CPed*)
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartLaunchAnim(CPed*)
	* ~CTaskSimpleJump()

CTaskComplexJump (0 variables, 10 functions)
Variables list:

Functions list:
	* CTaskComplexJump(int)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* ~CTaskComplexJump()

CTaskComplexStuckInAir (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexStuckInAir()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexStuckInAir()

CTaskComplexInAirAndLand (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexInAirAndLand(bool, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexInAirAndLand()

CTaskManager (0 variables, 20 functions)
Variables list:

Functions list:
	* AddSubTasks(CTask*)
	* CTaskManager(CPed*)
	* ClearTaskEventResponse()
	* FindActiveTaskByType(int) const
	* FindTaskByType(int, int) const
	* Flush()
	* FlushImmediately()
	* GetActiveTask() const
	* GetSimplestActiveTask() const
	* GetSimplestTask(CTask*)
	* GetSimplestTask(int) const
	* GetTaskSecondary(int) const
	* HasTaskSecondary(CTask const*) const
	* ManageTasks()
	* ParentsControlChildren(CTask*)
	* SetNextSubTask(CTask*)
	* SetTask(CTask*, int, bool)
	* SetTaskSecondary(CTask*, int)
	* StopTimers(CEvent const*)
	* ~CTaskManager()

CTaskComplexChat (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexChat(unsigned char, CPed*, int, short)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexChat()

CTaskComplexWalkAlongsidePed (1 variables, 9 functions)
Variables list:
	* ms_fTargetSlowDownDist

Functions list:
	* CTaskComplexWalkAlongsidePed(CPed*, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexWalkAlongsidePed()

CTaskComplexWaitForPed (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexWaitForPed(CPed*, float, int, unsigned char)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexWaitForPed()

CTaskComplexBeInCouple (0 variables, 10 functions)
Variables list:

Functions list:
	* AbortArmIK(CPed*)
	* CTaskComplexBeInCouple(CPed*, unsigned char, unsigned char, unsigned char, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetPartnerSide(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexBeInCouple()

CTaskComplexPartnerShove (0 variables, 5 functions)
Variables list:

Functions list:
	* CTaskComplexPartnerShove(char*, CPed*, unsigned char, float, int, CVector)
	* Clone() const
	* GetPartnerSequence()
	* GetTaskType() const
	* ~CTaskComplexPartnerShove()

CTaskComplexPartnerDeal (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexPartnerDeal(char*, CPed*, unsigned char, float, CVector)
	* Clone() const
	* CreateFirstSubTask(CPed*)
	* GetPartnerSequence()
	* GetTaskType() const
	* StreamRequiredAnims()
	* ~CTaskComplexPartnerDeal()

CTaskComplexPartner (0 variables, 13 functions)
Variables list:

Functions list:
	* CTaskComplexPartner(char*, CPed*, unsigned char, float, unsigned char, int, CVector)
	* CalcTargetPositions(CPed*, CVector*, CVector*)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetPartnerState()
	* GetTaskType() const
	* IsPartnerStillValid(CPed*)
	* RemoveStreamedAnims()
	* SetFirstToTargetFlag(unsigned char)
	* SetTargetPos(CVector*)
	* StreamRequiredAnims()
	* ~CTaskComplexPartner()

CTaskComplexPartnerGreet (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexPartnerGreet(char*, CPed*, unsigned char, float, int, CVector)
	* Clone() const
	* CreateFirstSubTask(CPed*)
	* GetPartnerSequence()
	* GetTaskType() const
	* StreamRequiredAnims()
	* ~CTaskComplexPartnerGreet()

CTaskSimplePlayerOnFoot (7 variables, 13 functions)
Variables list:
	* DUCK_HEADING_CHANGE_RATE
	* FIGHTER_HEADING_CHANGE_RATE
	* SPRINT_HOLDSUB
	* SPRINT_MAX
	* SPRINT_RELEASESUB
	* SPRINT_TAPADD
	* SPRINT_THRESHOLD

Functions list:
	* CTaskSimplePlayerOnFoot()
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PlayIdleAnimations(CPlayerPed*)
	* PlayerControlDucked(CPlayerPed*)
	* PlayerControlFighter(CPlayerPed*)
	* PlayerControlZelda(CPlayerPed*, bool)
	* PlayerControlZeldaWeapon(CPlayerPed*)
	* ProcessPed(CPed*)
	* ProcessPlayerWeapon(CPlayerPed*)
	* Serialize()
	* ~CTaskSimplePlayerOnFoot()

CTaskSimpleSwim (12 variables, 15 functions)
Variables list:
	* SWIM_BREAST_FORCE
	* SWIM_CRAWL_FORCE
	* SWIM_CRAWL_HOLDSUB
	* SWIM_CRAWL_RELEASESUB
	* SWIM_CRAWL_TAPADD
	* SWIM_CRAWL_THRESHOLD
	* SWIM_DIVE_UNDER_ANGLE
	* SWIM_STOP_TIME
	* SWIM_UWATER_HOLDSUB
	* SWIM_UWATER_RELEASESUB
	* SWIM_UWATER_TAPADD
	* SWIM_UWATER_THRESHOLD

Functions list:
	* ApplyRollAndPitch(CPed*)
	* CTaskSimpleSwim(CVector const*, CPed*)
	* Clone() const
	* CreateFxSystem(CPed*, RwMatrixTag*)
	* DestroyFxSystem()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessControlAI(CPed*)
	* ProcessControlInput(CPlayerPed*)
	* ProcessEffects(CPed*)
	* ProcessPed(CPed*)
	* ProcessSwimAnims(CPed*)
	* ProcessSwimmingResistance(CPed*)
	* Serialize()
	* ~CTaskSimpleSwim()

CTaskSimpleArrestPed (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleArrestPed(CPed*)
	* Clone() const
	* FinishAnimArrestPedCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleArrestPed()

CTaskComplexArrestPed (2 variables, 9 functions)
Variables list:
	* ms_fArrestAssistRange
	* ms_fArrestRange

Functions list:
	* CTaskComplexArrestPed(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexArrestPed()

CTaskComplexPolicePursuit (0 variables, 13 functions)
Variables list:

Functions list:
	* CTaskComplexPolicePursuit()
	* ClearPursuit(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PersistPursuit(CPed*)
	* SetPursuit(CPed*)
	* SetWeapon(CPed*)
	* ~CTaskComplexPolicePursuit()

CTaskComplexCopInCar (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexCopInCar(CVehicle*, CPed*, CPed*, bool)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*) const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexCopInCar()

CTaskComplexKillCriminal (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexKillCriminal(CPed*, bool)
	* ChangeTarget(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*, bool) const
	* FindNextCriminalToKill(CPed*, bool)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexKillCriminal()

CTaskSimpleShakeFist (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskSimpleShakeFist()
	* Clone() const
	* FinishAnimShakeFistCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* StartAnim(CPed*)
	* ~CTaskSimpleShakeFist()

CTaskSimpleDuck (1 variables, 17 functions)
Variables list:
	* ms_nLengthOfDuck

Functions list:
	* AbortBecauseOfOtherDuck(CPed*)
	* CTaskSimpleDuck(unsigned char, unsigned short, short)
	* CanPedDuck(CPed*)
	* Clone() const
	* ControlDuckMove(CVector2D)
	* DeleteDuckAnimCB(CAnimBlendAssociation*, void*)
	* ForceStopMove()
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* RestartTask(CPed*)
	* Serialize()
	* SetControlType(unsigned char)
	* SetDuckTimer(unsigned short)
	* SetMoveAnim(CPed*)
	* StartCountDown(unsigned char, bool)
	* ~CTaskSimpleDuck()

CTaskSimpleAffectSecondaryBehaviour (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimpleAffectSecondaryBehaviour(bool, int, CTask*)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* ~CTaskSimpleAffectSecondaryBehaviour()

CTaskSimpleFacial (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskSimpleFacial(int, int)
	* Clone() const
	* GetAnimId(int)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleFacial()

CTaskSimpleDuckWhileShotsWhizzing (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimpleDuckWhileShotsWhizzing(unsigned short)
	* Clone() const
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ProcessPed(CPed*)
	* Serialize()
	* ~CTaskSimpleDuckWhileShotsWhizzing()

CTaskSimpleHoldEntity (1 variables, 16 functions)
Variables list:
	* m_nPutDownTimer

Functions list:
	* CTaskSimpleHoldEntity(CEntity*, CVector const*, unsigned char, unsigned char, AnimationId, AssocGroupId, bool)
	* CTaskSimpleHoldEntity(CEntity*, CVector const*, unsigned char, unsigned char, CAnimBlock*, CAnimBlendHierarchy*, int)
	* CTaskSimpleHoldEntity(CEntity*, CVector const*, unsigned char, unsigned char, char const*, char const*, int)
	* CanThrowEntity()
	* ChoosePutDownHeight(CPed*)
	* Clone() const
	* DropEntity(CPed*, bool)
	* FinishAnimHoldEntityCB(CAnimBlendAssociation*, void*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* PlayAnim(AnimationId, AssocGroupId)
	* ProcessPed(CPed*)
	* ReleaseEntity()
	* SetPedPosition(CPed*)
	* StartAnim(CPed*)
	* ~CTaskSimpleHoldEntity()

CTaskComplexFacial (0 variables, 11 functions)
Variables list:

Functions list:
	* CTaskComplexFacial()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* Serialize()
	* SetRequest(int, int, int, int)
	* StopAll()
	* ~CTaskComplexFacial()

CTaskSimplePickUpEntity (0 variables, 6 functions)
Variables list:

Functions list:
	* CTaskSimplePickUpEntity(CEntity*, CVector const*, unsigned char, unsigned char, AnimationId, AssocGroupId, float)
	* CTaskSimplePickUpEntity(CEntity*, CVector const*, unsigned char, unsigned char, CAnimBlock*, CAnimBlendHierarchy*, int, float)
	* CTaskSimplePickUpEntity(CEntity*, CVector const*, unsigned char, unsigned char, char const*, char const*, int, float)
	* Clone() const
	* GetTaskType() const
	* ~CTaskSimplePickUpEntity()

CTaskSimplePutDownEntity (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskSimplePutDownEntity()
	* CTaskSimplePutDownEntity(CEntity*, CVector const*, unsigned char, unsigned char, AnimationId, AssocGroupId, float)
	* CTaskSimplePutDownEntity(CEntity*, CVector const*, unsigned char, unsigned char, CAnimBlock*, CAnimBlendHierarchy*, int, float)
	* CTaskSimplePutDownEntity(CEntity*, CVector const*, unsigned char, unsigned char, char const*, char const*, int, float)
	* Clone() const
	* GetTaskType() const
	* ~CTaskSimplePutDownEntity()

CTaskComplexFollowPedFootsteps (7 variables, 9 functions)
Variables list:
	* ms_fGotoPointRadius
	* ms_fKeepWithinRadius
	* ms_fRunToKeepUpRadius
	* ms_fSeekEntityRadius
	* ms_fTooCloseRadius
	* ms_iLosFreq
	* ms_iMsecsInterval

Functions list:
	* CTaskComplexFollowPedFootsteps(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed const*)
	* GetTaskType() const
	* MakeAbortable(CPed*, int, CEvent const*)
	* ~CTaskComplexFollowPedFootsteps()

CTaskComplexFollowLeaderAnyMeans (0 variables, 8 functions)
Variables list:

Functions list:
	* CTaskComplexFollowLeaderAnyMeans(CPedGroup*, CPed*, CVector const&)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed const*) const
	* GetTaskType() const
	* ~CTaskComplexFollowLeaderAnyMeans()

CTaskComplexFollowLeaderInFormation (2 variables, 9 functions)
Variables list:
	* ms_fMaxDistanceToLeader
	* ms_offsets

Functions list:
	* CTaskComplexFollowLeaderInFormation(CPedGroup*, CPed*, CVector const&, float)
	* CTaskComplexFollowLeaderInFormation(CPedGroup*, CPed*, int, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed const*)
	* GetTaskType() const
	* ~CTaskComplexFollowLeaderInFormation()

CEntitySeekPosCalculatorFixedPos (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorDriving (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorXYOffset (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorEntitySurface (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorRadiusAngleOffset (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CEntitySeekPosCalculatorVehicleId (0 variables, 1 functions)
Variables list:

Functions list:
	* ComputeEntitySeekPos(CPed const&, CEntity const&, CVector&) const

CFollowLeaderOffSets (0 variables, 2 functions)
Variables list:

Functions list:
	* CFollowLeaderOffSets()
	* ~CFollowLeaderOffSets()

CTaskComplexSeekEntityAnyMeans<CEntitySeekPosCalculatorXYOffset> (0 variables, 7 functions)
Variables list:

Functions list:
	* CTaskComplexSeekEntityAnyMeans(CEntity*, int, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetTaskType() const
	* ~CTaskComplexSeekEntityAnyMeans()

CTaskComplexWaitForBackup (1 variables, 9 functions)
Variables list:
	* ms_iTimer

Functions list:
	* CTaskComplexWaitForBackup(CPed*, CPed*, float)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexWaitForBackup()

CTaskComplexExtinguishFires (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexExtinguishFires()
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* GetNearestFire(CPed*) const
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexExtinguishFires()

CTaskComplexReactToGunAimedAt (0 variables, 9 functions)
Variables list:

Functions list:
	* CTaskComplexReactToGunAimedAt(CPed*)
	* Clone() const
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexReactToGunAimedAt()

CTaskComplexInvestigateDeadPed (3 variables, 10 functions)
Variables list:
	* ms_iMaxLookTime
	* ms_iMaxSeekTime
	* ms_iMinLookTime

Functions list:
	* CTaskComplexInvestigateDeadPed(CPed*)
	* Clone() const
	* ComputeTargetPos(CPed*, CVector&)
	* ControlSubTask(CPed*)
	* CreateFirstSubTask(CPed*)
	* CreateNextSubTask(CPed*)
	* CreateSubTask(int, CPed*)
	* GetTaskType() const
	* Serialize()
	* ~CTaskComplexInvestigateDeadPed()

CTaskCategories (0 variables, 4 functions)
Variables list:

Functions list:
	* ComputeTaskCategory(CTask const*)
	* IsFleePedTask(CTask const*, bool&, bool&)
	* IsFollowPedTask(CTask const*, bool&, bool&)
	* IsKillPedTask(CTask const*, bool&, bool&)

CPedList (0 variables, 10 functions)
Variables list:

Functions list:
	* AddMember(CPed*)
	* BuildListFromGroup_NoLeader(CPedGroupMembership*)
	* BuildListFromGroup_NotInCar_NoLeader(CPedGroupMembership*)
	* BuildListOfPedsOfPedType(int)
	* Empty()
	* ExtractPedsWithGuns(CPedList&)
	* FillUpHoles()
	* RemovePedsAttackingPedType(int)
	* RemovePedsThatDontListenToPlayer()
	* ~CPedList()

CPointList (0 variables, 4 functions)
Variables list:

Functions list:
	* AddPoint(CVector)
	* Empty()
	* MergeListsRemovingDoubles(CPointList*, CPointList*)
	* ~CPointList()

CFormation (5 variables, 10 functions)
Variables list:
	* m_DestinationPeds
	* m_Destinations
	* m_Peds
	* m_aFinalPedLinkToDestinations
	* m_aPedLinkToDestinations

Functions list:
	* DistributeDestinations(CPedList*)
	* DistributeDestinations_CoverPoints(CPedList*, CVector)
	* DistributeDestinations_PedsToAttack(CPedList*)
	* FindCoverPoints(CVector, float)
	* FindCoverPointsBehindBox(CPointList*, CVector, CMatrix*, CVector const*, CVector const*, CVector const*, float)
	* FindNearestAvailableDestination(CVector, float&)
	* GenerateGatherDestinations(CPedList*, CPed*)
	* GenerateGatherDestinations_AroundCar(CPedList*, CVehicle*)
	* ReturnDestinationForPed(CPed*, CVector&)
	* ReturnTargetPedForPed(CPed*, CPed**)

CTaskAllocator (0 variables, 6 functions)
Variables list:

Functions list:
	* Abort()
	* IsFinished(CPedGroupIntelligence*)
	* ProcessGroup(CPedGroupIntelligence*)
	* operator delete(void*)
	* operator new(unsigned int)
	* ~CTaskAllocator()

CTaskAllocatorRetreat (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* GetType() const
	* ~CTaskAllocatorRetreat()

CTaskAllocatorPlayerCommandRetreat (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* GetType() const
	* ~CTaskAllocatorPlayerCommandRetreat()

CTaskAllocatorKillThreatsDriveby (0 variables, 5 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* CTaskAllocatorKillThreatsDriveby(CPed*)
	* GetType() const
	* ProcessGroup(CPedGroupIntelligence*)
	* ~CTaskAllocatorKillThreatsDriveby()

CTaskAllocatorKillThreatsBasic (0 variables, 6 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* CTaskAllocatorKillThreatsBasic(CPed*)
	* ComputeClosestPeds(CPedGroup&, CPedGroup&, CPed**)
	* GetType() const
	* ProcessGroup(CPedGroupIntelligence*)
	* ~CTaskAllocatorKillThreatsBasic()

CTaskAllocatorAttack (0 variables, 6 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* CTaskAllocatorAttack(CPed*, int, CPed*)
	* GetType() const
	* ProcessGroup(CPedGroupIntelligence*)
	* TargetIsArmed()
	* ~CTaskAllocatorAttack()

CTaskAllocatorKillOnFoot (0 variables, 4 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* CTaskAllocatorKillOnFoot(CPed*, int)
	* GetType() const
	* ~CTaskAllocatorKillOnFoot()

CTaskAllocatorPlayerCommandAttack (0 variables, 5 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* CTaskAllocatorPlayerCommandAttack(CPed*, int, int)
	* GetType() const
	* ProcessGroup(CPedGroupIntelligence*)
	* ~CTaskAllocatorPlayerCommandAttack()

CTaskAllocatorKillThreatsBasicRandomGroup (0 variables, 3 functions)
Variables list:

Functions list:
	* AllocateTasks(CPedGroupIntelligence*)
	* GetType() const
	* ~CTaskAllocatorKillThreatsBasicRandomGroup()

CMessages (3 variables, 29 functions)
Variables list:
	* BIGMessages
	* BriefMessages
	* PreviousBriefs

Functions list:
	* AddBigMessage(unsigned short*, unsigned int, unsigned short)
	* AddBigMessageQ(unsigned short*, unsigned int, unsigned short)
	* AddBigMessageWithNumber(unsigned short*, unsigned int, unsigned short, int, int, int, int, int, int)
	* AddBigMessageWithNumberQ(unsigned short*, unsigned int, unsigned short, int, int, int, int, int, int)
	* AddMessage(char const*, unsigned short*, unsigned int, unsigned short, bool)
	* AddMessageJumpQ(char const*, unsigned short*, unsigned int, unsigned short, bool)
	* AddMessageJumpQWithNumber(unsigned short*, unsigned int, unsigned short, int, int, int, int, int, int, bool)
	* AddMessageJumpQWithString(unsigned short*, unsigned int, unsigned short, unsigned short*, bool)
	* AddMessageWithNumber(char const*, unsigned short*, unsigned int, unsigned short, int, int, int, int, int, int, bool)
	* AddMessageWithString(unsigned short*, unsigned int, unsigned short, unsigned short*, bool)
	* AddToPreviousBriefArray(char const*, unsigned short*, int, int, int, int, int, int, unsigned short*)
	* ClearAllMessagesDisplayedByGame(unsigned char)
	* ClearMessages(unsigned char)
	* ClearPreviousBriefArray()
	* ClearSmallMessagesOnly()
	* ClearThisBigPrint(unsigned short*)
	* ClearThisBigPrintNow(unsigned int)
	* ClearThisPrint(unsigned short*)
	* CutString(short, char*, char**)
	* Display(unsigned char)
	* GetGxtStringLength(unsigned short*)
	* GxtStringCompare(unsigned short*, unsigned short*, unsigned short)
	* GxtStringCopy(unsigned short*, unsigned short*, unsigned short)
	* Init()
	* InsertNumberInString(unsigned short*, int, int, int, int, int, int, unsigned short*)
	* InsertPlayerControlKeysInString(unsigned short*)
	* InsertStringInString(unsigned short*, unsigned short*)
	* Process()
	* ReloadPreviousBriefArray()

CKeyArray (0 variables, 5 functions)
Variables list:

Functions list:
	* BinarySearch(unsigned int, CKeyEntry*, short, short)
	* Load(unsigned int, int, unsigned int*, unsigned char)
	* Search(char const*, unsigned char*)
	* Unload()
	* Update(unsigned short*)

CData (0 variables, 2 functions)
Variables list:

Functions list:
	* Load(unsigned int, int, unsigned int*, unsigned char)
	* Unload()

CText (0 variables, 10 functions)
Variables list:

Functions list:
	* CText()
	* Get(char const*)
	* GetNameOfLoadedMissionText(char*)
	* GetUpperCase(unsigned short)
	* Load(unsigned char)
	* LoadMissionPackText()
	* LoadMissionText(char*)
	* ReadChunkHeader(ChunkHeader*, int, unsigned int*, unsigned char)
	* Unload(unsigned char)
	* ~CText()

CMissionTextOffsets (0 variables, 1 functions)
Variables list:

Functions list:
	* Load(unsigned int, int, unsigned int*, int)

CEventVehicleDamageCollision (0 variables, 3 functions)
Variables list:

Functions list:
	* CloneEditable() const
	* GetEventType() const
	* ~CEventVehicleDamageCollision()

CBike (0 variables, 55 functions)
Variables list:

Functions list:
	* BlowUpCar(CEntity*, unsigned char)
	* BurstTyre(unsigned char, bool)
	* CBike(int, unsigned char)
	* CalculateLeanMatrix()
	* DamageKnockOffRider(CVehicle*, float, unsigned short, CEntity*, CVector&, CVector&)
	* DebugCode()
	* DoBurstAndSoftGroundRatios()
	* DoSoftGroundResistance(unsigned int&)
	* FindWheelWidth(bool)
	* Fix()
	* FixHandsToBars(CPed*)
	* GetAllWheelsOffGround()
	* GetComponentWorldPosition(int, CVector&)
	* GetCorrectedWorldDoorPosition(CVector&, CVector, CVector)
	* GetHeightAboveRoad() const
	* GetNumContactWheels()
	* GetRideAnimData()
	* IsComponentPresent(int) const
	* IsDoorClosed(eDoors) const
	* IsDoorClosed(unsigned int) const
	* IsDoorFullyOpen(eDoors) const
	* IsDoorFullyOpen(unsigned int) const
	* IsDoorMissing(eDoors) const
	* IsDoorMissing(unsigned int) const
	* IsDoorReady(eDoors) const
	* IsDoorReady(unsigned int) const
	* IsRoomForPedToLeaveCar(unsigned int, CVector*)
	* KnockOffRider(eWeaponType, unsigned char, CPed*, bool)
	* PlaceOnRoadProperly()
	* PlayCarHorn()
	* PlayHornIfNecessary()
	* PreRender()
	* ProcessAI(unsigned int&)
	* ProcessBuoyancy()
	* ProcessControl()
	* ProcessControlCollisionCheck(bool)
	* ProcessControlInputs(unsigned char)
	* ProcessDrivingAnims(CPed*, unsigned char)
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* ProcessOpenDoor(CPed*, unsigned int, unsigned int, unsigned int, float)
	* ProcessRiderAnims(CPed*, CVehicle*, CRideAnimData*, tBikeHandlingData*, short)
	* ReduceHornCounter()
	* RemoveRefsToVehicle(CEntity*)
	* Render()
	* ResetSuspension()
	* SetModelIndex(unsigned int)
	* SetRemoveAnimFlags(CPed*)
	* SetUpWheelColModel(CColModel*)
	* SetupDamageAfterLoad()
	* SetupModelNodes()
	* SetupSuspensionLines()
	* Teleport(CVector, unsigned char)
	* VehicleDamage(float, unsigned short, CEntity*, CVector*, CVector*, eWeaponType)
	* dmgDrawCarCollidingParticles(CVector const&, float, eWeaponType)
	* ~CBike()

CBmx (0 variables, 13 functions)
Variables list:

Functions list:
	* BlowUpCar(CEntity*, unsigned char)
	* BurstTyre(unsigned char, bool)
	* CBmx(int, unsigned char)
	* FindWheelWidth(bool)
	* GetFrameOffset(float&, float&)
	* LaunchBunnyHopCB(CAnimBlendAssociation*, void*)
	* PreRender()
	* ProcessAI(unsigned int&)
	* ProcessBunnyHop()
	* ProcessControl()
	* ProcessDrivingAnims(CPed*, unsigned char)
	* SetUpWheelColModel(CColModel*)
	* ~CBmx()

CBoat (4 variables, 22 functions)
Variables list:
	* MAX_WAKE_LENGTH
	* MIN_WAKE_INTERVAL
	* WAKE_LIFETIME
	* apFrameWakeGeneratingBoats

Functions list:
	* AddWakePoint(CVector)
	* BlowUpCar(CEntity*, unsigned char)
	* CBoat(int, unsigned char)
	* CheckForSkippingCalculations()
	* DebugCode()
	* DisplayHandlingData()
	* FillBoatList()
	* GetComponentWorldPosition(int, CVector&)
	* IsComponentPresent(int) const
	* IsSectorAffectedByWake(CVector2D, float, CBoat**)
	* IsVertexAffectedByWake(CVector, CBoat*, short, bool)
	* ModifyHandlingValue(bool const&)
	* PreRender()
	* ProcessControl()
	* ProcessControlInputs(unsigned char)
	* ProcessOpenDoor(CPed*, unsigned int, unsigned int, unsigned int, float)
	* PruneWakeTrail()
	* Render()
	* SetModelIndex(unsigned int)
	* SetupModelNodes()
	* Teleport(CVector, unsigned char)
	* ~CBoat()

CSpecialPlateHandler (0 variables, 4 functions)
Variables list:

Functions list:
	* Add(int, char*)
	* Find(int, char*)
	* Init()
	* Remove(int)

CCarGenerator (0 variables, 8 functions)
Variables list:

Functions list:
	* CalcNextGen()
	* CheckForBlockage(int)
	* CheckIfWithinRangeOfAnyPlayers()
	* DoInternalProcessing()
	* Process()
	* Setup(float, float, float, float, int, short, short, unsigned char, unsigned char, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
	* SwitchOff()
	* SwitchOn()

CCranes (0 variables, 6 functions)
Variables list:

Functions list:
	* InitCranes()
	* IsThisCarBeingCarriedByAnyCrane(CVehicle*)
	* IsThisCarBeingTargettedByAnyCrane(CVehicle*)
	* IsThisCarPickedUp(float, float, CVehicle*)
	* Save(unsigned char*, unsigned int*)
	* UpdateCranes()

CDamageManager (0 variables, 25 functions)
Variables list:

Functions list:
	* ApplyDamage(CAutomobile*, tComponent, float, float)
	* FuckCarCompletely(bool)
	* GetAeroplaneCompStatus(int) const
	* GetCarNodeIndexFromDoor(eDoors)
	* GetCarNodeIndexFromPanel(ePanels)
	* GetComponentGroup(tComponent, tComponentGroup*, unsigned char*)
	* GetDoorStatus(eDoors) const
	* GetDoorStatus(int) const
	* GetEngineStatus() const
	* GetLightStatus(eLights) const
	* GetPanelStatus(int) const
	* GetWheelStatus(int) const
	* ProgressAeroplaneDamage(unsigned char)
	* ProgressDoorDamage(unsigned char, CAutomobile*)
	* ProgressEngineDamage(float)
	* ProgressPanelDamage(unsigned char)
	* ProgressWheelDamage(unsigned char)
	* ResetDamageStatus()
	* SetAeroplaneCompStatus(int, unsigned int)
	* SetDoorStatus(eDoors, unsigned int)
	* SetDoorStatus(int, unsigned int)
	* SetEngineStatus(unsigned int)
	* SetLightStatus(eLights, unsigned int)
	* SetPanelStatus(int, unsigned int)
	* SetWheelStatus(int, unsigned int)

CDoor (1 variables, 6 functions)
Variables list:
	* DOOR_SPEED_MAX_CAPPED

Functions list:
	* GetAngleOpenRatio() const
	* IsClosed() const
	* IsFullyOpen() const
	* Open(float)
	* Process(CVehicle*, CVector&, CVector&, CVector&)
	* ProcessImpact(CVehicle*, CVector&, CVector&, CVector&)

CTrainDoor (0 variables, 6 functions)
Variables list:

Functions list:
	* IsClosed() const
	* IsFullyOpen() const
	* IsInUse()
	* Open(float)
	* RetTranslationWhenClosed() const
	* RetTranslationWhenOpen() const

CBouncingPanel (5 variables, 3 functions)
Variables list:
	* BOUNCE_HANGING_DAMP_MULT
	* BOUNCE_HANGING_RETURN_MULT
	* BOUNCE_SPRING_DAMP_MULT
	* BOUNCE_SPRING_RETURN_MULT
	* BOUNCE_VEL_CHANGE_LIMIT

Functions list:
	* ProcessPanel(CVehicle*, RwFrame*, CVector, CVector, float, float)
	* ResetPanel()
	* SetPanel(short, short, float)

cBuoyancy (0 variables, 10 functions)
Variables list:

Functions list:
	* AddSplashParticles(CPhysical*, CVector, CVector, CVector, unsigned char)
	* CalcBuoyancyForce(CPhysical*, CVector*, CVector*)
	* FindWaterLevel(CVector const&, CVector*, tWaterLevel*)
	* FindWaterLevelNorm(CVector const&, CVector*, tWaterLevel*, CVector*)
	* PreCalcSetup(CPhysical*, float)
	* ProcessBuoyancy(CPhysical*, float, CVector*, CVector*)
	* ProcessBuoyancyBoat(CVehicle*, float, CVector*, CVector*, bool)
	* SimpleCalcBuoyancy(CPhysical*)
	* SimpleSumBuoyancyData(CVector&, tWaterLevel)
	* ~cBuoyancy()

CHeli (6 variables, 26 functions)
Variables list:
	* HeliSearchLights
	* NumberOfSearchLights
	* TestForNewRandomHelisTimer
	* bHeliControlsCheat
	* bPoliceHelisAllowed
	* pHelis

Functions list:
	* AddHeliSearchLight(CVector const&, CVector const&, float, float, unsigned int, unsigned char, unsigned char)
	* BlowUpCar(CEntity*, unsigned char)
	* BurstTyre(unsigned char, bool)
	* CHeli(int, unsigned char)
	* FindSwatPositionRelativeToHeli(int)
	* Fix()
	* GenerateHeli(CPed*, bool)
	* InitHelis()
	* Post_SearchLightCone()
	* PreRender()
	* PreRenderAlways()
	* Pre_SearchLightCone()
	* ProcessControl()
	* ProcessControlInputs(unsigned char)
	* ProcessFlyingCarStuff()
	* Render()
	* RenderAllHeliSearchLights()
	* SearchLightCone(int, CVector, CVector, float, float, unsigned char, unsigned char, CVector*, CVector*, CVector*, bool, float, float, float, float)
	* SendDownSwat()
	* SetUpWheelColModel(CColModel*)
	* SetupDamageAfterLoad()
	* SpecialHeliPreRender()
	* SwitchPoliceHelis(bool)
	* TestSniperCollision(CVector*, CVector*)
	* UpdateHelis()
	* ~CHeli()

CMonsterTruck (1 variables, 12 functions)
Variables list:
	* DUMPER_COL_ANGLEMULT

Functions list:
	* BurstTyre(unsigned char, bool)
	* CMonsterTruck(int, unsigned char)
	* ExtendSuspension()
	* PreRender()
	* ProcessControl()
	* ProcessControlCollisionCheck(bool)
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* ProcessSuspension()
	* ResetSuspension()
	* SetUpWheelColModel(CColModel*)
	* SetupSuspensionLines()
	* ~CMonsterTruck()

CPlane (11 variables, 24 functions)
Variables list:
	* ANDROM_COL_ANGLE_MULT
	* GenPlane_Active
	* GenPlane_LastTimeGenerated
	* GenPlane_ModelIndex
	* GenPlane_Status
	* HARRIER_NOZZLE_ROTATE_LIMIT
	* HARRIER_NOZZLE_SWITCH_LIMIT
	* PLANE_MAX_PROP_SPEED
	* PLANE_MIN_PROP_SPEED
	* PLANE_ROC_PROP_SPEED
	* PLANE_STD_PROP_SPEED

Functions list:
	* AreWeInNoBigPlaneZone()
	* AreWeInNoPlaneZone()
	* BlowUpCar(CEntity*, unsigned char)
	* BurstTyre(unsigned char, bool)
	* CPlane(int, unsigned char)
	* CountPlanesAndHelis()
	* DoPlaneGenerationAndRemoval()
	* FindPlaneCreationCoors(CVector*, CVector*, float*, float*, bool)
	* Fix()
	* InitPlaneGenerationAndRemoval()
	* IsAlreadyFlying()
	* OpenDoor(CPed*, int, eDoors, float, bool)
	* PreRender()
	* ProcessControl()
	* ProcessControlInputs(unsigned char)
	* ProcessFlyingCarStuff()
	* Render()
	* SetGearDown()
	* SetGearUp()
	* SetUpWheelColModel(CColModel*)
	* SetupDamageAfterLoad()
	* SwitchAmbientPlanes(bool)
	* VehicleDamage(float, unsigned short, CEntity*, CVector*, CVector*, eWeaponType)
	* ~CPlane()

CQuadBike (0 variables, 13 functions)
Variables list:

Functions list:
	* CQuadBike(int, unsigned char)
	* Fix()
	* GetRideAnimData()
	* PreRender()
	* ProcessAI(unsigned int&)
	* ProcessControl()
	* ProcessControlInputs(unsigned char)
	* ProcessDrivingAnims(CPed*, unsigned char)
	* ProcessSuspension()
	* ResetSuspension()
	* SetupDamageAfterLoad()
	* SetupSuspensionLines()
	* ~CQuadBike()

CTrailer (2 variables, 14 functions)
Variables list:
	* m_fTrailerDampingForce
	* m_fTrailerSuspensionForce

Functions list:
	* BreakTowLink()
	* CTrailer(int, unsigned char)
	* GetTowBarPos(CVector&, bool, CVehicle*)
	* GetTowHitchPos(CVector&, bool, CVehicle*)
	* PreRender()
	* ProcessAI(unsigned int&)
	* ProcessControl()
	* ProcessEntityCollision(CEntity*, CColPoint*)
	* ProcessSuspension()
	* ResetSuspension()
	* ScanForTowLink()
	* SetTowLink(CVehicle*, bool)
	* SetupSuspensionLines()
	* ~CTrailer()

CTrain (8 variables, 45 functions)
Variables list:
	* GenTrain_Direction
	* GenTrain_GenerationNode
	* GenTrain_Status
	* GenTrain_Track
	* GenTrain_TrainConfig
	* aStationCoors
	* bDisableRandomTrains
	* bHelpToSetStations

Functions list:
	* AddNearbyPedAsRandomPassenger()
	* AddPassenger(CPed*)
	* CTrain(int, unsigned char)
	* CreateMissionTrain(CVector, bool, unsigned int, CTrain**, CTrain**, int, int, bool)
	* DisableRandomTrains(bool)
	* DoTrainGenerationAndRemoval()
	* FindCaboose(CTrain*)
	* FindCarriage(CTrain*, unsigned char)
	* FindClosestTrackNode(CVector, int*)
	* FindCoorsFromPositionOnTrack(float, int, CVector*)
	* FindEngine(CTrain*)
	* FindMaximumSpeedToStopAtStations(float*)
	* FindNearestTrain(CVector, bool)
	* FindNextStationPositionInDirection(bool, float, float*, int*)
	* FindNumCarriagesPulled()
	* FindPositionOnTrackFromCoors()
	* FindSideStationIsOn()
	* GetDooorAngleOpenRatio(eDoors) const
	* GetDooorAngleOpenRatio(unsigned int) const
	* InitTrains()
	* IsInTunnel()
	* IsNextStationAllowed(CTrain*)
	* IsRoomForPedToLeaveCar(unsigned int, CVector*)
	* OpenDoor(CPed*, int, eDoors, float, bool)
	* OpenTrainDoor(float)
	* PreRender()
	* ProcessControl()
	* ReadAndInterpretTrackFile(char*, CTrainNode**, int*, float*, int)
	* ReleaseMissionTrains()
	* ReleaseOneMissionTrain(CTrain*)
	* RemoveAllTrains()
	* RemoveMissionTrains()
	* RemoveOneMissionTrain(CTrain*)
	* RemovePassenger(CPed*)
	* RemoveRandomPassenger()
	* Render()
	* SetModelIndex(unsigned int)
	* SetNewTrainPosition(CTrain*, CVector)
	* SetTrainCruiseSpeed(CTrain*, float)
	* SetTrainSpeed(CTrain*, float)
	* Shutdown()
	* SkipToNextAllowedStation(CTrain*)
	* Teleport(CVector, unsigned char)
	* UpdateTrains()
	* ~CTrain()

CTrainNode (0 variables, 1 functions)
Variables list:

Functions list:
	* GetLightingFromCollision()

cTransmission (0 variables, 5 functions)
Variables list:

Functions list:
	* CalculateDriveAcceleration(float const&, unsigned char&, float&, float const&, float*, float*, unsigned char, unsigned char)
	* CalculateGearForSimpleCar(float, unsigned char&)
	* DisplayGearRatios()
	* InitGearRatios()
	* cTransmission()

CRideAnimData (0 variables, 2 functions)
Variables list:

Functions list:
	* CRideAnimData()
	* ~CRideAnimData()

CPool<CVehicle, CHeli> (0 variables, 1 functions)
Variables list:

Functions list:
	* Delete(CVehicle*)

CVehicleAnimGroup (0 variables, 3 functions)
Variables list:

Functions list:
	* ComputeAnimDoorOffsets(int)
	* ComputeCriticalBlendTime(int)
	* GetGroup(int)

WaterCreature_c (0 variables, 5 functions)
Variables list:

Functions list:
	* Exit()
	* Init(int, CVector*, WaterCreature_c*, float, float)
	* Update(float)
	* WaterCreature_c()
	* ~WaterCreature_c()

WaterCreatureManager_c (1 variables, 9 functions)
Variables list:
	* ms_waterCreatureInfos

Functions list:
	* CanAddWaterCreatureAtPos(int, CVector)
	* Exit()
	* GetRandomWaterCreatureId()
	* Init()
	* TryToExitGroup(WaterCreature_c*)
	* TryToFreeUpWaterCreatures(int)
	* Update(float)
	* WaterCreatureManager_c()
	* ~WaterCreatureManager_c()

CWaterLevel (28 variables, 55 functions)
Variables list:
	* m_BlocksToBeRenderedOutsideWorldX
	* m_BlocksToBeRenderedOutsideWorldY
	* m_CurrentDesiredFlowX
	* m_CurrentDesiredFlowY
	* m_CurrentFlowX
	* m_CurrentFlowY
	* m_ElementsOnQuadsAndTrianglesList
	* m_NumBlocksOutsideWorldToBeRendered
	* m_QuadsAndTrianglesInEachBlock
	* m_QuadsAndTrianglesList
	* m_WaterFogCol
	* m_WaterFogDensity
	* m_WaterFogHourOfDayEnd
	* m_WaterFogHourOfDayStart
	* m_WaterFogInsideCol
	* m_aQuads
	* m_aTriangles
	* m_aVertices
	* m_bWaterFog
	* m_bWaterFogScript
	* m_fWaterFogHeight
	* m_fWaterFogInsideFadeSpeed
	* m_nNumOfWaterQuads
	* m_nNumOfWaterTriangles
	* m_nNumOfWaterVertices
	* m_nWaterConfiguration
	* m_nWaterTimeOffset
	* ms_WaterFog

Functions list:
	* AddToQuadsAndTrianglesList(int, int, int, unsigned int)
	* AddWaterLevelQuad(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar, int, int, CRenPar, unsigned int)
	* AddWaterLevelTriangle(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar, unsigned int)
	* AddWaterLevelVertex(int, int, CRenPar)
	* AddWaveToResult(float, float, float*, float, float, CVector*)
	* AddWaveToResult(int, int, float*, float, float)
	* BlockHit(int, int)
	* CalculateWavesForCoordinate(int, int, float, float, float*, float*, float*, CVector*)
	* CalculateWavesOnlyForCoordinate(int, int, float, float, float*)
	* ChangeWaterConfiguration(int)
	* CreateBeachToy(CVector const&, eBeachToy)
	* FillQuadsAndTrianglesList()
	* FindNearestWaterAndItsFlow()
	* FixVertexOnToLine(CWaterVertex*, CWaterVertex*, CWaterVertex*, float*)
	* GetGroundLevel(CVector const&, float*, ColData*, float)
	* GetGroundLevel_WS(CVector const&, float*, ColData*, float)
	* GetWaterDepth(CVector const&, float*, float*, float*)
	* GetWaterLevel(float, float, float, float*, bool, CVector*)
	* GetWaterLevelNoWaves(float, float, float, float*, float*, float*)
	* HandleBeachToysStuff()
	* IsLocationOutOfWorldBounds_WS(CVector const&, int)
	* MarkQuadsAndPolysToBeRendered(int, int, bool)
	* PreRenderWater()
	* RenderAndEmptyRenderBuffer()
	* RenderBoatWakes()
	* RenderDetailedSeaBedSegment(int, int, float, float, float, float)
	* RenderFlatWaterRectangle(int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar)
	* RenderFlatWaterRectangle_OneLayer(int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar, int)
	* RenderFlatWaterTriangle(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar)
	* RenderFlatWaterTriangle_OneLayer(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar, int)
	* RenderHighDetailWaterRectangle(int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar)
	* RenderHighDetailWaterRectangle_OneLayer(int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar, int, int, int, int, int)
	* RenderHighDetailWaterTriangle(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar)
	* RenderHighDetailWaterTriangle_OneLayer(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar, int, int, int, int)
	* RenderSeaBedSegment(int, int, float, float, float, float)
	* RenderShipsOnHorizon()
	* RenderTransparentWater()
	* RenderWakeSegment(CVector2D&, CVector2D&, CVector2D&, CVector2D&, float&, float&, float&, float&, float&)
	* RenderWater()
	* RenderWaterFog()
	* RenderWaterRectangle(int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar)
	* RenderWaterTriangle(int, int, CRenPar, int, int, CRenPar, int, int, CRenPar)
	* ScanThroughBlocks()
	* SetCameraRange()
	* SetUpWaterFog(int, int, int, int)
	* Shutdown()
	* SplitWaterRectangleAlongXLine(int, int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar)
	* SplitWaterRectangleAlongYLine(int, int, int, int, int, CRenPar, CRenPar, CRenPar, CRenPar)
	* SplitWaterTriangleAlongXLine(int, int, int, CRenPar, int, int, CRenPar, int, int, CRenPar)
	* SplitWaterTriangleAlongYLine(int, int, int, CRenPar, int, int, CRenPar, int, int, CRenPar)
	* SyncWater()
	* TestLineAgainstWater(CVector, CVector, CVector*)
	* TestQuadToGetWaterLevel(CWaterQuad*, float, float, float, float*, float*, float*)
	* TestTriangleToGetWaterLevel(CWaterTriangle*, float, float, float, float*, float*, float*)
	* WaterLevelInitialise()

CScriptedEffectPair (0 variables, 3 functions)
Variables list:

Functions list:
	* CScriptedEffectPair()
	* Flush()
	* ~CScriptedEffectPair()

CScriptedEffectPairs (0 variables, 4 functions)
Variables list:

Functions list:
	* AddPair(CScriptedEffectPair const&)
	* CScriptedEffectPairs()
	* Flush()
	* ~CScriptedEffectPairs()

CBirds (4 variables, 6 functions)
Variables list:
	* BirdShotAt
	* NumberOfBirds
	* aBirds
	* bHasBirdBeenShot

Functions list:
	* CreateNumberOfBirds(CVector, CVector, int, int, bool)
	* HandleGunShot(CVector const*, CVector const*)
	* Init()
	* Render()
	* Shutdown()
	* Update()

CClouds (16 variables, 21 functions)
Variables list:
	* CloudRotation
	* IndividualRotation
	* m_FrothCoors
	* m_VolumetricCloudsUsedNum
	* m_bVolumetricCloudHeightSwitch
	* m_fFrothIntensity
	* m_fVolumetricCloudDensity
	* m_fVolumetricCloudMaxDistance
	* m_fVolumetricCloudWindMoveFactor
	* ms_HorizonTilt
	* ms_cameraRoll
	* ms_colourBottom
	* ms_colourTop
	* ms_horizonZ
	* ms_mf
	* ms_vc

Functions list:
	* Init()
	* MovingFogInit()
	* MovingFogRender()
	* MovingFog_Create(CVector*)
	* MovingFog_Delete(int)
	* MovingFog_GetFXIntensity()
	* MovingFog_GetFirstFreeSlot()
	* MovingFog_GetWind()
	* MovingFog_Update()
	* Render()
	* RenderBottomFromHeight()
	* RenderSkyPolys()
	* SetUpOneSkyPoly(CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
	* Shutdown()
	* Update()
	* VolumetricCloudsGetMaxDistance()
	* VolumetricCloudsInit()
	* VolumetricCloudsRender()
	* VolumetricClouds_Create(CVector*)
	* VolumetricClouds_Delete(int)
	* VolumetricClouds_GetFirstFreeSlot()

CRegisteredCorona (0 variables, 1 functions)
Variables list:

Functions list:
	* Update()

CCoronas (9 variables, 11 functions)
Variables list:
	* LightsMult
	* MoonSize
	* NumCoronas
	* ScreenMult
	* SunBlockedByClouds
	* SunScreenX
	* SunScreenY
	* aCoronas
	* bChangeBrightnessImmediately

Functions list:
	* DoSunAndMoon()
	* Init()
	* RegisterCorona(unsigned int, CEntity*, unsigned char, unsigned char, unsigned char, unsigned char, CVector const&, float, float, RwTexture*, unsigned char, unsigned char, unsigned char, unsigned char, float, bool, float, bool, float, bool, bool)
	* RegisterCorona(unsigned int, CEntity*, unsigned char, unsigned char, unsigned char, unsigned char, CVector const&, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float, bool, float, bool, float, bool, bo
	* Render()
	* RenderOutGeometryBufferForReflections()
	* RenderReflections()
	* RenderSunReflection()
	* Shutdown()
	* Update()
	* UpdateCoronaCoors(unsigned int, CVector const&, float, float)

CCustomCarPlateMgr (3 variables, 10 functions)
Variables list:
	* pCharsetTex
	* pPalette1555Tab
	* pPlatebackTexTab

Functions list:
	* CreatePlateTexture(char*, unsigned char)
	* GeneratePlateText(char*, int)
	* GetMapRegionPlateDesign()
	* Initialise()
	* LoadPlatecharsetDat(char const*, unsigned char*, int, int)
	* SetupClump(RpClump*, char*, unsigned char)
	* SetupClumpAfterVehicleUpgrade(RpClump*, RpMaterial*, unsigned char)
	* SetupMaterialPlateTexture(RpMaterial*, char*, unsigned char)
	* SetupMaterialPlatebackTexture(RpMaterial*, unsigned char)
	* Shutdown()

CCustomRoadsignMgr (1 variables, 10 functions)
Variables list:
	* pCharsetTex

Functions list:
	* CreateRoadsignAtomic(float, float, int, char*, char*, char*, char*, int, unsigned char)
	* CreateRoadsignAtomicA(float, float, int, char*, char*, char*, char*, int, unsigned char)
	* CreateRoadsignTexture(char*, int)
	* DebugDrawInternalTexture()
	* Initialise()
	* RenderRoadsignAtomic(RpAtomic*, CVector const&)
	* RenderTest(CVector const&)
	* SetAtomicAlpha(RpAtomic*, unsigned char)
	* SetupRoadsignAtomic(RpAtomic*, char*, int)
	* Shutdown()

CDraw (11 variables, 2 functions)
Variables list:
	* Drawn
	* FadeBlue
	* FadeGreen
	* FadeRed
	* FadeValue
	* NotDrawn
	* ms_fAspectRatio
	* ms_fFOV
	* ms_fFarClipZ
	* ms_fLODDistance
	* ms_fNearClipZ

Functions list:
	* CalculateAspectRatio()
	* SetFOV(float)

CMovingThings (0 variables, 5 functions)
Variables list:

Functions list:
	* Init()
	* Render()
	* Render_BeforeClouds()
	* Shutdown()
	* Update()

CPlaneTrail (0 variables, 3 functions)
Variables list:

Functions list:
	* Init()
	* RegisterPoint(CVector)
	* Render(float)

CPlaneTrails (1 variables, 4 functions)
Variables list:
	* aArray

Functions list:
	* Init()
	* RegisterPoint(CVector, unsigned int)
	* Render()
	* Update()

CPlaneBanner (0 variables, 4 functions)
Variables list:

Functions list:
	* Init()
	* RegisterPoint(CVector)
	* Render()
	* Update()

CPlaneBanners (0 variables, 4 functions)
Variables list:

Functions list:
	* Init()
	* RegisterPoint(CVector, unsigned int)
	* Render()
	* Update()

CEscalator (0 variables, 3 functions)
Variables list:

Functions list:
	* AddThisOne(CVector const&, CVector const&, CVector const&, CVector const&, bool, CEntity*)
	* SwitchOff()
	* Update()

CEscalators (1 variables, 4 functions)
Variables list:
	* aArray

Functions list:
	* AddOne(CVector const&, CVector const&, CVector const&, CVector const&, bool, CEntity*)
	* Init()
	* Shutdown()
	* Update()

CFontDetails (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CFontDetails()

CFontRenderState (0 variables, 1 functions)
Variables list:

Functions list:
	* ~CFontRenderState()

CGlass (3 variables, 18 functions)
Variables list:
	* NumGlassEntities
	* aGlassPanes
	* apEntitiesToBeRendered

Functions list:
	* AskForObjectToBeRenderedInGlass(CEntity*)
	* BreakGlassPhysically(CVector, float)
	* CalcAlphaWithNormal(CVector*)
	* CarWindscreenShatters(CVehicle*, bool)
	* FindFreePane()
	* FindWindowSectorList(CPtrList&, float*, CEntity**, float, float, float)
	* GeneratePanesForWindow(unsigned int, CVector, CVector, CVector, CVector, CVector, float, bool, bool, int, bool)
	* HasGlassBeenShatteredAtCoors(float, float, float)
	* Init()
	* Render()
	* RenderHiLightPolys()
	* RenderReflectionPolys()
	* RenderShatteredPolys()
	* Update()
	* WasGlassHitByBullet(CEntity*, CVector)
	* WindowRespondsToCollision(CEntity*, float, CVector, CVector, bool)
	* WindowRespondsToExplosion(CEntity*, CVector)
	* WindowRespondsToSoftCollision(CEntity*, float)

CFallingGlassPane (0 variables, 2 functions)
Variables list:

Functions list:
	* Render()
	* Update()

CGridRef (4 variables, 5 functions)
Variables list:
	* displayAllTheWalls
	* displayCamCords
	* displayGridRef
	* displayWalls

Functions list:
	* GetAreaName(unsigned char, unsigned char)
	* GetArtistBugstarID(unsigned char, unsigned char)
	* GetGridRefPositions(CVector, unsigned char*, unsigned char*)
	* GetGridRefPositions(unsigned char*, unsigned char*)
	* Init()

CLines (0 variables, 3 functions)
Variables list:

Functions list:
	* ImmediateLine2D(int, int, int, int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
	* RenderLineNoClipping(float, float, float, float, float, float, unsigned int, unsigned int)
	* RenderLineWithClipping(float, float, float, float, float, float, unsigned int, unsigned int)

COcclusion (11 variables, 5 functions)
Variables list:
	* FarAwayList
	* ListWalkThroughFA
	* NearbyList
	* NumActiveOccluders
	* NumInteriorOccludersOnMap
	* NumOccludersOnMap
	* PreviousListWalkThroughFA
	* aActiveOccluders
	* aInteriorOccluders
	* aOccluders
	* bRenderShadows

Functions list:
	* AddOne(float, float, float, float, float, float, float, float, float, unsigned int, bool) #
	* Init()                                                #
	* IsPositionOccluded(CVector, float)                    #
	* OccluderHidesBehind(CActiveOccluder*, CActiveOccluder*)   #
	* ProcessBeforeRendering()                              #

COccluder (0 variables, 3 functions)
Variables list:

Functions list:
	* NearCamera()                                          #
	* ProcessLineSegment(int, int, CActiveOccluder*)        #
	* ProcessOneOccluder(CActiveOccluder*)                  #

CActiveOccluder (0 variables, 2 functions)
Variables list:

Functions list:
	* IsPointBehindOccluder(CVector, float)                 #
	* IsPointWithinOcclusionArea(float, float, float)       #

CPlayerSkin (1 variables, 6 functions)
Variables list:
	* m_txdSlot

Functions list:
	* BeginFrontendSkinEdit()
	* EndFrontendSkinEdit()
	* GetSkinTexture(char const*)
	* Initialise()
	* RenderFrontendSkinEdit()
	* Shutdown()

CPointLights (5 variables, 7 functions)
Variables list:
	* NextCachedValue
	* NumLights
	* aCachedMapReadResults
	* aCachedMapReads
	* aLights

Functions list:
	* AddLight(unsigned char, CVector, CVector, float, float, float, float, unsigned char, bool, CEntity*)
	* GenerateLightsAffectingObject(CVector const*, float*, CEntity*)
	* GetLightMultiplier(CVector const*)
	* Init()
	* ProcessVerticalLineUsingCache(CVector, float*)
	* RemoveLightsAffectingObject()
	* RenderFogEffect()

CPostEffects (101 variables, 44 functions)
Variables list:
	* SCREEN_EXTRA_MULT_BASE_CAP
	* SCREEN_EXTRA_MULT_BASE_MULT
	* SCREEN_EXTRA_MULT_CHANGE_RATE
	* m_CCTVcol
	* m_DarknessFilterAlpha
	* m_DarknessFilterAlphaDefault
	* m_DarknessFilterRadiosityIntensityLimit
	* m_HeatHazeFXHourOfDayEnd
	* m_HeatHazeFXHourOfDayStart
	* m_HeatHazeFXIntensity
	* m_HeatHazeFXRandomShift
	* m_HeatHazeFXRenderSizeX
	* m_HeatHazeFXRenderSizeY
	* m_HeatHazeFXScanSizeX
	* m_HeatHazeFXScanSizeY
	* m_HeatHazeFXSpeedMax
	* m_HeatHazeFXSpeedMin
	* m_HeatHazeFXType
	* m_HeatHazeFXTypeLast
	* m_InfraredVisionCol
	* m_InfraredVisionGrainStrength
	* m_InfraredVisionMainCol
	* m_NightVisionGrainStrength
	* m_NightVisionMainCol
	* m_RadiosityFilterPasses
	* m_RadiosityFilterUCorrection
	* m_RadiosityFilterVCorrection
	* m_RadiosityIntensity
	* m_RadiosityIntensityLimit
	* m_RadiosityPixelsX
	* m_RadiosityPixelsY
	* m_RadiosityRenderPasses
	* m_SeamRemoverMode
	* m_SeamRemoverShiftBottomRight
	* m_SeamRemoverShiftTopLeft
	* m_SpeedFXAlpha
	* m_VisionFXDayNightBalance
	* m_bCCTV
	* m_bColorEnable
	* m_bDarknessFilter
	* m_bDisableAllPostEffect
	* m_bFog
	* m_bGrainEnable
	* m_bHeatHazeFX
	* m_bHeatHazeMaskModeTest
	* m_bHilightEnable
	* m_bInCutscene
	* m_bInfraredVision
	* m_bNightVision
	* m_bRadiosity
	* m_bRadiosityBypassTimeCycleIntensityLimit
	* m_bRadiosityDebug
	* m_bRadiosityLinearFilter
	* m_bRadiosityStripCopyMode
	* m_bRainEnable
	* m_bSavePhotoFromScript
	* m_bSeamRemover
	* m_bSeamRemoverDebugMode
	* m_bSeamRemoverSeamSearchMode
	* m_bSpeedFX
	* m_bSpeedFXTestMode
	* m_bSpeedFXUserFlag
	* m_bSpeedFXUserFlagCurrentFrame
	* m_bWaterDepthDarkness
	* m_colour1Multiplier
	* m_colour2Multiplier
	* m_colourBottomVOffset
	* m_colourLeftUOffset
	* m_colourRightUOffset
	* m_colourTopVOffset
	* m_defScreenXPosn
	* m_defScreenYPosn
	* m_fHeatHazeFXFadeSpeed
	* m_fHeatHazeFXInsideBuildingFadeSpeed
	* m_fInfraredVisionFilterRadius
	* m_fInfraredVisionHeatObjectCol
	* m_fInfraredVisionSwitchOnFXCount
	* m_fNightVisionSwitchOnFXCount
	* m_fNightVisionSwitchOnFXTime
	* m_fSpeedFXManualSpeedCurrentFrame
	* m_fWaterFXStartUnderWaterness
	* m_fWaterFullDarknessDepth
	* m_grainStrength
	* m_hilightMblur
	* m_hilightOffset
	* m_hilightScale
	* m_hilightStrength
	* m_pDmaPkt
	* m_pGrainRaster
	* m_smokeyDistance
	* m_smokeyEnable
	* m_smokeyStrength
	* m_waterCol
	* m_waterEnable
	* m_waterFreq
	* m_waterSpeed
	* m_waterStrength
	* m_xoffset
	* m_yoffset
	* ms_imf
	* pRasterFrontBuffer

Functions list:
	* CCTV()
	* Close()
	* ColourFilter(RwRGBA, RwRGBA)
	* DarknessFilter(int)
	* DoScreenModeDependentInitializations()
	* DrawQuad(float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, RwRaster*)
	* DrawQuadSetDefaultUVs()
	* DrawQuadSetPixelUVs(float, float, float, float, float, float, float, float)
	* DrawQuadSetUVs(float, float, float, float, float, float, float, float)
	* FilterFX_RestoreDayNightBalance()
	* FilterFX_StoreAndSetDayNightBalance()
	* Fog()
	* Grain(int, bool)
	* HeatHazeFX(float, bool)
	* HeatHazeFXInit()
	* ImmediateModeFilterStuffInitialize()
	* ImmediateModeRenderStatesReStore()
	* ImmediateModeRenderStatesSet()
	* ImmediateModeRenderStatesStore()
	* InfraredVision(RwRGBA, RwRGBA)
	* InfraredVisionRestoreLightsForHeatObjects()
	* InfraredVisionSetLightsForDefaultObjects()
	* InfraredVisionSetLightsForHeatObjects()
	* InfraredVisionStoreAndSetLightsForHeatObjects(CPed*)
	* Initialise()
	* IsVisionFXActive()
	* MobileRender()
	* NightVision(RwRGBA)
	* NightVisionSetLights()
	* Radiosity(int, int, int, int)
	* RasterCreatePostEffects(RwRect)
	* Render()
	* ScriptCCTVSwitch(bool)
	* ScriptDarknessFilterSwitch(bool, int)
	* ScriptHeatHazeFXSwitch(bool)
	* ScriptInfraredVisionSwitch(bool)
	* ScriptNightVisionSwitch(bool)
	* ScriptResetForEffects()
	* SetFilterMainColour(RwRaster*, RwRGBA)
	* SetupBackBufferVertex()
	* SpeedFX(float)
	* UnderWaterRipple(RwRGBA, float, float, int, float, float)
	* UnderWaterRippleFadeToFX()
	* Update()

CRealTimeShadowManager (0 variables, 10 functions)
Variables list:

Functions list:
	* CRealTimeShadowManager()
	* CamDistComp(void const*, void const*)
	* DoShadowThisFrame(CPhysical*)
	* Exit()
	* GetRealTimeShadow(CPhysical*)
	* Init()
	* ReInit()
	* ReturnRealTimeShadow(CRealTimeShadow*)
	* Update()
	* ~CRealTimeShadowManager()

CShadowCamera (0 variables, 20 functions)
Variables list:

Functions list:
	* ApplyAlphaMapToRaster()
	* CShadowCamera()
	* Create(int)
	* Destroy()
	* DrawOutlineBorder(RwRGBA const&)
	* GetRwRenderRaster()
	* GetRwRenderTexture()
	* InvertRaster()
	* MakeGradientRaster()
	* RasterBlur(RwRaster*, int)            #
	* RasterGradient(RwRaster*)             #
	* RasterResample(RwRaster*)             #
	* ReInitRasters()
	* SetCenter(RwV3d*)
	* SetFrustum(float)
	* SetLight(RpLight*)
	* ShadowRasterRender(RwV2d*)
	* Update(RpAtomic*)
	* Update(RpClump*, bool, CPed*)
	* ~CShadowCamera()

CRealTimeShadow (0 variables, 11 functions)
Variables list:

Functions list:
	* CRealTimeShadow()
	* Create(int, bool, int, bool)
	* Destroy()
	* DrawBorderAroundTexture(RwRGBA const&)
	* GetShadowCamera()
	* GetShadowRwTexture()
	* Render(int, float)
	* SetLightProperties(float, float, bool)
	* SetShadowedObject(CPhysical*)
	* Update()
	* ~CRealTimeShadow()

CRubbish (0 variables, 1 functions)
Variables list:

Functions list:
	* SetVisibility(bool)

CShadows (6 variables, 31 functions)
Variables list:
	* ShadowsStoredToBeRendered
	* aPermanentShadows
	* aPolyBunches
	* aStaticShadows
	* asShadowsStored
	* pEmptyBunchList

Functions list:
	* AddPermanentShadow(unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, unsigned int, float)
	* AffectColourWithLighting(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned char*, unsigned char*)
	* CalcPedShadowValues(CVector, float*, float*, float*, float*, float*, float*)
	* CastPlayerShadowSectorList(CPtrList&, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**, unsigned char*, int)
	* CastRealTimeShadowSectorList(CPtrList&, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**, CRealTimeShadow*, unsigned char*)
	* CastShadowEntityXY(CEntity*, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**, unsigned char*, int)
	* CastShadowEntityXYZ(CEntity*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**, CRealTimeShadow*, unsigned char*)
	* CastShadowSectorList(CPtrList&, float, float, float, float, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, CPolyBunch**, unsigned char*, int)
	* GeneratePolysForStaticShadow(short)
	* GunShotSetsOilOnFire(CVector const*, CVector const*)
	* Init()
	* PrintDebugPoly(CVector*, CVector*, CVector*)
	* RemoveOilInArea(float, float, float, float)
	* RenderExtraPlayerShadows()
	* RenderIndicatorShadow(unsigned int, unsigned char, RwTexture*, CVector*, float, float, float, float, short)
	* RenderStaticShadows(bool)
	* RenderStoredShadows(bool)
	* SetRenderModeForShadowType(unsigned char)
	* Shutdown()
	* StoreCarLightShadow(CVehicle*, int, RwTexture*, CVector*, float, float, float, float, unsigned char, unsigned char, unsigned char, float)
	* StoreRealTimeShadow(CPhysical*, float, float, float, float, float, float)
	* StoreShadowForPedObject(CEntity*, float, float, float, float, float, float)
	* StoreShadowForPole(CEntity*, float, float, float, float, float, unsigned int)
	* StoreShadowForTree(CEntity*)
	* StoreShadowForVehicle(CVehicle*, VEH_SHD_TYPE)
	* StoreShadowToBeRendered(unsigned char, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char)
	* StoreShadowToBeRendered(unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, bool, float, CRealTimeShadow*, bool)
	* StoreStaticShadow(unsigned int, unsigned char, RwTexture*, CVector*, float, float, float, float, short, unsigned char, unsigned char, unsigned char, float, float, float, bool, float)
	* TidyUpShadows()
	* UpdatePermanentShadows()
	* UpdateStaticShadows()

CStaticShadow (0 variables, 1 functions)
Variables list:

Functions list:
	* Free()

RenderBuffer (2 variables, 4 functions)
Variables list:
	* IndicesToBeStored
	* VerticesToBeStored

Functions list:
	* ClearRenderBuffer()
	* RenderStuffInBuffer()
	* StartStoring(int, int, unsigned short**, RxObjSpace3DVertex**)
	* StopStoring()

CSkidmarks (1 variables, 7 functions)
Variables list:
	* aSkidmarks

Functions list:
	* Clear()
	* Init()
	* RegisterOne(unsigned int, CVector const&, float, float, bool*, bool*, float)
	* RegisterOne(unsigned int, CVector const&, float, float, eSkidmarkType, bool*, float)
	* Render()
	* Shutdown()
	* Update()

CSpecialFX (4 variables, 7 functions)
Variables list:
	* SnapShotFrames
	* bLiftCam
	* bSnapShotActive
	* bVideoCam

Functions list:
	* AddWeaponStreak(int)
	* Init()
	* Render()
	* Render2DFXs()
	* ReplayStarted()
	* Shutdown()
	* Update()

CBulletTraces (1 variables, 5 functions)
Variables list:
	* aTraces

Functions list:
	* AddTrace(CVector*, CVector*, float, unsigned int, unsigned char)
	* AddTrace(CVector*, CVector*, int, CEntity*)
	* Init()
	* Render()
	* Update()

CBulletTrace (0 variables, 1 functions)
Variables list:

Functions list:
	* Update()

CMotionBlurStreaks (1 variables, 4 functions)
Variables list:
	* aStreaks

Functions list:
	* Init()
	* RegisterStreak(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, CVector, CVector)
	* Render()
	* Update()

CRegisteredMotionBlurStreak (0 variables, 2 functions)
Variables list:

Functions list:
	* Render()
	* Update()

CBrightLights (2 variables, 4 functions)
Variables list:
	* NumBrightLights
	* aBrightLights

Functions list:
	* Init()
	* RegisterOne(CVector, CVector, CVector, CVector, unsigned char, unsigned char, unsigned char, unsigned char)
	* Render()
	* RenderOutGeometryBuffer()

CShinyTexts (2 variables, 4 functions)
Variables list:
	* NumShinyTexts
	* aShinyTexts

Functions list:
	* Init()
	* RegisterOne(CVector, CVector, CVector, CVector, float, float, float, float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, float)
	* Render()
	* RenderOutGeometryBuffer()

C3dMarker (0 variables, 6 functions)
Variables list:

Functions list:
	* AddMarker(unsigned int, unsigned short, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short)
	* DeleteMarkerObject()
	* IsZCoordinateUpToDate()
	* Render()
	* SetZCoordinateIfNotUpToDate(float)
	* UpdateZCoordinate(CVector, float)

CCheckpoint (0 variables, 1 functions)
Variables list:

Functions list:
	* Render()

CCheckpoints (2 variables, 8 functions)
Variables list:
	* NumActiveCPts
	* m_aCheckPtArray

Functions list:
	* DeleteCP(unsigned int, unsigned short)
	* Init()
	* PlaceMarker(unsigned int, unsigned short, CVector&, CVector&, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short, float, short)
	* Render()
	* SetHeading(unsigned int, float)
	* Shutdown()
	* Update()
	* UpdatePos(unsigned int, CVector&)

CMirrors (9 variables, 10 functions)
Variables list:
	* MirrorFlags
	* MirrorNormal
	* MirrorV
	* TypeOfMirror
	* bRenderingReflection
	* d3dRestored
	* pBuffer
	* pZBuffer
	* reflBuffer

Functions list:
	* BeforeConstructRenderList()
	* BeforeMainRender()
	* BuildCamMatrix(CMatrix*, CVector, CVector)
	* BuildCameraMatrixForScreens(CMatrix*)
	* CreateBuffer()
	* Init()
	* RenderMirrorBuffer(bool)
	* RenderReflBuffer(bool)
	* RenderReflections()
	* ShutDown()

CSprite (4 variables, 22 functions)
Variables list:
	* m_bFlushSpriteBufferSwitchZTest
	* m_f2DFarScreenZ
	* m_f2DNearScreenZ
	* m_fRecipNearClipPlane

Functions list:
	* CalcHorizonCoors()
	* CalcScreenCoors(RwV3d const&, RwV3d*, float*, float*, bool, bool)
	* Draw3DSprite(float, float, float, float, float, float, float, float, float)
	* FlushSpriteBuffer()
	* InitSpriteBuffer()
	* InitSpriteBuffer2D()
	* Initialise()
	* RenderBufferedOneXLUSprite(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, unsigned char)
	* RenderBufferedOneXLUSprite2D(float, float, float, float, RwRGBA const&, short, unsigned char)
	* RenderBufferedOneXLUSprite2D_Rotate_Dimension(float, float, float, float, RwRGBA const&, short, float, unsigned char)
	* RenderBufferedOneXLUSprite_Rotate_2Colours(float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float, float, float, float, unsigned char)
	* RenderBufferedOneXLUSprite_Rotate_Aspect(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char)
	* RenderBufferedOneXLUSprite_Rotate_Dimension(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char)
	* RenderOneXLUSprite(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, unsigned char, unsigned char, unsigned char, float, float)
	* RenderOneXLUSprite2D(float, float, float, float, RwRGBA const&, short, unsigned char)
	* RenderOneXLUSprite2D_Rotate_Dimension(float, float, float, float, RwRGBA const&, short, float, unsigned char)
	* RenderOneXLUSprite_Rotate_2Colours(float, float, float, float, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, float, float, float, float, unsigned char)
	* RenderOneXLUSprite_Rotate_Aspect(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char)
	* RenderOneXLUSprite_Rotate_Dimension(float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, float, unsigned char)
	* RenderOneXLUSprite_Triangle(float, float, float, float, float, float, float, unsigned char, unsigned char, unsigned char, short, float, unsigned char)
	* Set4Vertices2D(RwOpenGLVertex*, CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* Set4Vertices2D(RwOpenGLVertex*, float, float, float, float, float, float, float, float, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)

CSprite2d (5 variables, 40 functions)
Variables list:
	* NearScreenZ
	* RecipNearClip
	* maVertices
	* nextBufferIndex
	* nextBufferVertex

Functions list:
	* AddToBuffer(CRect const&, CRGBA const&, float, float, float, float, float, float, float, float)
	* CSprite2d()
	* Delete()
	* Draw(CRect const&, CRGBA const&)
	* Draw(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* Draw(CRect const&, CRGBA const&, float, float, float, float, float, float, float, float)
	* Draw(float, float, float, float, CRGBA const&)
	* Draw(float, float, float, float, float, float, float, float, CRGBA const&)
	* Draw2DPolygon(float, float, float, float, float, float, float, float, CRGBA const&)
	* DrawAnyRect(float, float, float, float, float, float, float, float, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* DrawBarChart(float, float, unsigned short, unsigned char, float, signed char, unsigned char, unsigned char, CRGBA, CRGBA)
	* DrawCircleAtNearClip(CVector2D const&, float, CRGBA const&, int)
	* DrawRect(CRect const&, CRGBA const&)
	* DrawRect(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* DrawRectXLU(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* DrawRotated(CRect&, float, CRGBA const&)
	* DrawRotated(CVector2D const&, float, float, float, float, float, float, float, float, float, CRGBA const&)
	* DrawTriangle(float*, float*, CRGBA const&)
	* DrawTxRect(CRect const&, CRGBA const&)
	* DrawWithBilinearOffset(CRect const&, CRGBA const&)
	* InitPerFrame()
	* IsVertexBufferEmpty()
	* IsVertexBufferFull()
	* OffsetTexCoordForBilinearFiltering(float, float)
	* RenderVertexBuffer()
	* SetAddressing(RwTextureAddressMode)
	* SetAddressingUV(RwTextureAddressMode, RwTextureAddressMode)
	* SetMaskVertices(int, float*, float)
	* SetRecipNearClip()
	* SetRenderState()
	* SetTexture(char*)
	* SetTexture(char*, char*)
	* SetVertices(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* SetVertices(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&, float, float, float, float, float, float, float, float)
	* SetVertices(RwOpenGLVertex*, CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&, float, float, float, float, float, float, float, float)
	* SetVertices(float, float, float, float, float, float, float, float, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* SetVertices(int, float*, CRGBA*)
	* SetVertices(int, float*, float*, CRGBA const&)
	* SetVerticesForSniper(CRect const&, CRGBA const&, CRGBA const&, CRGBA const&, CRGBA const&)
	* ~CSprite2d()

CWaterCannon (0 variables, 5 functions)
Variables list:

Functions list:
	* Init()
	* PushPeds()
	* Render()
	* Update_NewInput(CVector*, CVector*)
	* Update_OncePerFrame(short)

CWaterCannons (1 variables, 4 functions)
Variables list:
	* aCannons

Functions list:
	* Init()
	* Render()
	* Update()
	* UpdateOne(unsigned int, CVector*, CVector*)

CWeather (43 variables, 15 functions)
Variables list:
	* CloudCoverage
	* CurrentRainParticleStrength
	* Earthquake
	* ExtraSunnyness
	* Foggyness
	* Foggyness_SF
	* ForcedWeatherType
	* HeadLightsSpectrum
	* HeatHaze
	* HeatHazeFXControl
	* InTunnelness
	* InterpolationValue
	* LightningBurst
	* LightningDuration
	* LightningFlash
	* LightningFlashLastChange
	* LightningStart
	* LightningStartX
	* LightningStartY
	* NewWeatherType
	* OldWeatherType
	* Rain
	* Rainbow
	* Sandstorm
	* StreamAfterRainTimer
	* SunGlare
	* TrafficLightsBrightness
	* TwisterIndex
	* TwisterPos
	* UnderWaterness
	* WaterDepth
	* WaterFog
	* WaterFogFXControl
	* Wavyness
	* WeatherRegion
	* WeatherTypeInList
	* WetRoads
	* WhenToPlayLightningSound
	* Wind
	* WindClipped
	* WindDir
	* bScriptsForceRain
	* m_WeatherAudioEntity

Functions list:
	* AddHeatHaze()
	* AddRain()
	* AddSandStormParticles()
	* AddStreamAfterRain()
	* FindWeatherTypesList()
	* ForceWeather(short)
	* ForceWeatherNow(short)
	* ForecastWeather(int, int)
	* Init()
	* ReleaseWeather()
	* RenderRainStreaks()
	* SetWeatherToAppropriateTypeNow()
	* Update()
	* UpdateInTunnelness()
	* UpdateWeatherRegion(CVector*)

CWindModifiers (2 variables, 2 functions)
Variables list:
	* Array
	* Number

Functions list:
	* FindWindModifier(CVector, float*, float*)
	* RegisterOne(CVector, int, float)

CWorldScan (0 variables, 2 functions)
Variables list:

Functions list:
	* ScanWorld(RwV2d*, int, void (*)(int, int))
	* SetExtraRectangleToScan(float, float, float, float)

CCullZones (10 variables, 21 functions)
Variables list:
	* CurrentFlags_Camera
	* CurrentFlags_Player
	* NumAttributeZones
	* NumMirrorAttributeZones
	* NumTunnelAttributeZones
	* aAttributeZones
	* aMirrorAttributeZones
	* aTunnelAttributeZones
	* bMilitaryZonesDisabled
	* bRenderCullzones

Functions list:
	* AddCullZone(CVector const&, float, float, float, float, float, float, unsigned short, short)
	* AddMirrorAttributeZone(CVector const&, float, float, float, float, float, float, unsigned short, float, float, float, float)
	* AddTunnelAttributeZone(CVector const&, float, float, float, float, float, float, unsigned short)
	* Cam1stPersonForPlayer()
	* CamCloseInForPlayer()
	* CamNoRain()
	* CamStairsForPlayer()
	* DoExtraAirResistanceForPlayer()
	* DoINeedToLoadCollision()
	* FewerCars()
	* FewerPeds()
	* FindAttributesForCoors(CVector)
	* FindMirrorAttributesForCoors(CVector)
	* FindTunnelAttributesForCoors(CVector)
	* FindZoneWithStairsAttributeForPlayer()
	* InRoomForAudio()
	* Init()
	* NoPolice()
	* PlayerNoRain()
	* PoliceAbandonCars()
	* Update()

CZoneDef (0 variables, 3 functions)
Variables list:

Functions list:
	* FindBoundingBox(CVector*, CVector*)
	* FindCenter()
	* IsPointWithin(CVector)

CommonSize (0 variables, 3 functions)
Variables list:

Functions list:
	* Free(HeapFreeBlockDesc*)
	* Init(int)
	* Malloc()

HeapBlockDesc (0 variables, 1 functions)
Variables list:

Functions list:
	* InsertHeapBlock(HeapBlockDesc*)

HeapFreeBlockDesc (0 variables, 5 functions)
Variables list:

Functions list:
	* FindSmallestFreeBlock(int)
	* InsertHeapFreeBlock(HeapFreeBlockDesc*)
	* InsertOrderedHeapFreeBlock(HeapFreeBlockDesc*)
	* RemoveHeapFreeBlock()
	* ReplaceHeapFreeBlock(HeapFreeBlockDesc*)

CMemoryHeap (0 variables, 19 functions)
Variables list:

Functions list:
	* CMemoryHeap()
	* FillInBlockData(HeapBlockDesc*, HeapBlockDesc*, unsigned int)
	* Free(void*)
	* GetDebugInfo(void*)
	* GetSizeOfHoles() const
	* Init(void*, unsigned int, bool)
	* IntegrityCheck() const
	* Malloc(unsigned int)
	* MoveHeapBlock(HeapFreeBlockDesc*, HeapBlockDesc*)
	* MoveMemory(void*)
	* MoveMemory(void*, void**, int)
	* ParseHeap() const
	* PrintMemoryLeaks()
	* Realloc(void*, unsigned int)
	* RegisterFree(HeapFreeBlockDesc*)
	* RegisterMalloc(HeapBlockDesc*)
	* SetDebugInfo(void*, unsigned int)
	* Shutdown()
	* WhereShouldMemoryMove(void*)

CMemoryMgr (10 variables, 28 functions)
Variables list:
	* m_bMallocHintDebugging
	* m_blocksUsed
	* m_id
	* m_idCapture
	* m_idStack
	* m_largeAllocation
	* m_memUsed
	* m_minLargeAllocation
	* m_pBlockArray
	* m_pMemUsedArray

Functions list:
	* Calloc(unsigned int, unsigned int)
	* Free(void*)
	* FreeAlign(void*)
	* GetBlocksUsed(int)
	* GetLargestFreeBlock()
	* GetMemoryUsed(int)
	* GetSizeOfHoles()
	* Init()
	* InitMemoryTracking(int)
	* InitScratchPad()
	* InternalMalloc(unsigned int)
	* InternalRealloc(void*, unsigned int)
	* LockScratchPad()
	* Malloc(unsigned int)
	* MallocAlign(unsigned int, unsigned int)
	* MallocAlignFromScratchPad(unsigned int, unsigned int)
	* MallocFromScratchPad(unsigned int)
	* MoveMemory(void*)
	* MoveMemory(void*, void**, int)
	* PopMemId()
	* PrintFrequencies()
	* PushMemId(int)
	* Realloc(void*, unsigned int)
	* RegisterFree(void*)
	* RegisterMalloc(void*)
	* ReleaseScratchPad()
	* SetRestrictMemoryMove(bool)
	* Shutdown()

CTxdStore (6 variables, 26 functions)
Variables list:
	* ms_curDB
	* ms_curName
	* ms_lastSlotFound
	* ms_pTxdPool
	* ms_storedDB
	* ms_storedName

Functions list:
	* AddRef(int)
	* AddTxdSlot(char const*, char const*, bool)
	* Create(int)
	* FindTxdSlot(char const*)
	* FindTxdSlotFromHashKey(int)
	* FinishLoadTxd(int, RwStream*)
	* GameShutdown()
	* GetNumRefs(int)
	* GetSpecialTxdSlot(int)
	* GetTxdParent(RwTexDictionary*)
	* Initialise()
	* LoadTxd(int, RwStream*)
	* LoadTxd(int, char const*)
	* PluginAttach()
	* PopCurrentTxd()
	* PushCurrentTxd()
	* RemoveRef(int)
	* RemoveRefWithoutDelete(int)
	* RemoveTxd(int)
	* RemoveTxdSlot(int)
	* SetCurrentTxd(int, char const*)
	* SetTxdParent(RwTexDictionary*, RwTexDictionary*)
	* SetupTxdParent(int)
	* Shutdown()
	* StartLoadTxd(int, RwStream*)
	* TxdStoreFindCB(char const*)

CVisibilityPlugins (20 variables, 85 functions)
Variables list:
	* m_alphaBoatAtomicList
	* m_alphaEntityList
	* m_alphaList
	* m_alphaReallyDrawLastList
	* m_alphaUnderwaterEntityList
	* ms_atomicPluginOffset
	* ms_bigVehicleLod0Dist
	* ms_clumpPluginOffset
	* ms_cullBigCompsDist
	* ms_cullCompsDist
	* ms_defaultRenderer
	* ms_framePluginOffset
	* ms_pCamera
	* ms_pCameraPosn
	* ms_pedFadeDist
	* ms_pedLodDist
	* ms_vehicleLod0Dist
	* ms_vehicleLod0RenderMultiPassDist
	* ms_vehicleLod1Dist
	* ms_weaponPedsForPC

Functions list:
	* AtomicConstructor(void*, int, int)
	* AtomicCopyConstructor(void*, void const*, int, int)
	* AtomicDestructor(void*, int, int)
	* CalculateFadingAtomicAlpha(CBaseModelInfo*, CEntity*, float)
	* ClearAtomicFlag(RpAtomic*, unsigned short)
	* ClearClumpForAllAtomicsFlag(RpClump*, int)
	* ClumpConstructor(void*, int, int)
	* ClumpCopyConstructor(void*, void const*, int, int)
	* ClumpDestructor(void*, int, int)
	* DefaultVisibilityCB(RpClump*)
	* FrameConstructor(void*, int, int)
	* FrameCopyConstructor(void*, void const*, int, int)
	* FrameDestructor(void*, int, int)
	* FrustumSphereCB(RpClump*)
	* GetAtomicId(RpAtomic*)
	* GetClumpAlpha(RpClump*)
	* GetClumpModelInfo(RpClump*)
	* GetDistanceSquaredFromCamera(RwFrame*)
	* GetDistanceSquaredFromCamera(RwV3d*)
	* GetDotProductWithCameraVector(RwMatrixTag*, RwMatrixTag*, unsigned int)
	* GetFrameHierarchyId(RwFrame*)
	* GetModelInfo(RpAtomic*)
	* GetModelInfoIndex(RpAtomic*)
	* GetUserValue(RpAtomic*)
	* InitAlphaAtomicList()
	* InitAlphaEntityList()
	* Initialise()
	* InsertAtomicIntoBoatSortedList(RpAtomic*, float)
	* InsertAtomicIntoReallyDrawLastList(RpAtomic*, float)
	* InsertAtomicIntoSortedList(RpAtomic*, float)
	* InsertEntityIntoReallyDrawLastList(CEntity*, float)
	* InsertEntityIntoSortedList(CEntity*, float)
	* InsertEntityIntoUnderwaterList(CEntity*, float)
	* InsertObjectIntoSortedList(void*, float, void (*)(void*, float))
	* IsAtomicVisible(RpAtomic*)
	* IsClumpVisible(RpClump*)
	* PluginAttach()
	* RenderAlphaAtomics()
	* RenderAtomic(void*, float)
	* RenderAtomicWithAlpha(RpAtomic*, int)
	* RenderAtomicWithAlphaCB(RpAtomic*, void*)
	* RenderBoatAlphaAtomics()
	* RenderEntity(void*, float)
	* RenderFadingAtomic(CBaseModelInfo*, RpAtomic*, int)
	* RenderFadingClump(CBaseModelInfo*, RpClump*, int)
	* RenderFadingClumpCB(RpAtomic*)
	* RenderFadingEntities()
	* RenderFadingUnderwaterEntities()
	* RenderHeliRotorAlphaCB(RpAtomic*)
	* RenderHeliTailRotorAlphaCB(RpAtomic*)
	* RenderObjNormalAtomic(RpAtomic*)
	* RenderOrderedList(CLinkList<CVisibilityPlugins::AlphaObjectInfo>&)
	* RenderPedCB(RpAtomic*)
	* RenderPlayerCB(RpAtomic*)
	* RenderReallyDrawLastObjects()
	* RenderTrainHiDetailAlphaCB(RpAtomic*)
	* RenderTrainHiDetailCB(RpAtomic*)
	* RenderVehicleHiDetailAlphaCB(RpAtomic*)
	* RenderVehicleHiDetailAlphaCB_BigVehicle(RpAtomic*)
	* RenderVehicleHiDetailAlphaCB_Boat(RpAtomic*)
	* RenderVehicleHiDetailCB(RpAtomic*)
	* RenderVehicleHiDetailCB_BigVehicle(RpAtomic*)
	* RenderVehicleHiDetailCB_Boat(RpAtomic*)
	* RenderVehicleLoDetailCB_Boat(RpAtomic*)
	* RenderVehicleReallyLowDetailCB(RpAtomic*)
	* RenderVehicleReallyLowDetailCB_BigVehicle(RpAtomic*)
	* RenderWeaponCB(RpAtomic*)
	* RenderWeaponPedsForPC()
	* RenderWheelAtomicCB(RpAtomic*)
	* ResetRenderFadingAtomic(CBaseModelInfo*)
	* SetAtomicFlag(RpAtomic*, unsigned short)
	* SetAtomicId(RpAtomic*, int)
	* SetAtomicRenderCallback(RpAtomic*, RpAtomic* (*)(RpAtomic*))
	* SetClumpAlpha(RpClump*, int)
	* SetClumpForAllAtomicsFlag(RpClump*, int)
	* SetClumpModelInfo(RpClump*, CClumpModelInfo*)
	* SetFrameHierarchyId(RwFrame*, int)
	* SetModelInfoIndex(RpAtomic*, int)
	* SetRenderWareCamera(RwCamera*)
	* SetUserValue(RpAtomic*, unsigned short)
	* SetupRenderFadingAtomic(CBaseModelInfo*, int)
	* SetupVehicleVariables(RpClump*)
	* Shutdown()
	* VehicleVisibilityCB(RpClump*)
	* VehicleVisibilityCB_BigVehicle(RpClump*)

CLinkList<CVisibilityPlugins::AlphaObjectInfo> (0 variables, 4 functions)
Variables list:

Functions list:
	* Clear()
	* Init(int)
	* InsertSorted(CVisibilityPlugins::AlphaObjectInfo const&)
	* Shutdown()

CBulletInfo (0 variables, 4 functions)
Variables list:

Functions list:
	* AddBullet(CEntity*, eWeaponType, CVector, CVector)
	* Initialise()
	* Shutdown()
	* Update()

CExplosion (1 variables, 12 functions)
Variables list:
	* m_ExplosionAudioEntity

Functions list:
	* AddExplosion(CEntity*, CEntity*, eExplosionType, CVector, unsigned int, unsigned char, float, unsigned char)
	* ClearAllExplosions()
	* DoesExplosionMakeSound(unsigned char)
	* GetExplosionActiveCounter(unsigned char)
	* GetExplosionPosition(unsigned char)
	* GetExplosionType(unsigned char)
	* Initialise()
	* RemoveAllExplosionsInArea(CVector, float)
	* ResetExplosionActiveCounter(unsigned char)
	* Shutdown()
	* TestForExplosionInArea(int, float, float, float, float, float, float)
	* Update()

CProjectileInfo (1 variables, 12 functions)
Variables list:
	* ms_apProjectile

Functions list:
	* AddProjectile(CEntity*, eWeaponType, CVector, float, CVector*, CEntity*)
	* GetProjectileInfo(int)
	* Initialise()
	* IsProjectileInRange(float, float, float, float, float, float, bool)
	* RemoveAllProjectiles()
	* RemoveDetonatorProjectiles()
	* RemoveFXSystem(unsigned char)
	* RemoveIfThisIsAProjectile(CObject*)
	* RemoveNotAdd(CEntity*, eWeaponType, CVector)
	* RemoveProjectile(CProjectileInfo*, CProjectile*)
	* Shutdown()
	* Update()

CShotInfo (1 variables, 5 functions)
Variables list:
	* ms_afRandTable

Functions list:
	* AddShot(CEntity*, eWeaponType, CVector, CVector)
	* GetPositionOfPossibleFlame(unsigned char, CVector&)
	* Initialise()
	* Shutdown()
	* Update()

CWeapon (5 variables, 41 functions)
Variables list:
	* m_nTakePhotoFrames
	* ms_PelletTestCol
	* ms_bPhotographHasBeenTaken
	* ms_bTakePhoto
	* ms_fExtinguisherAimAngle

Functions list:
	* AddGunshell(CEntity*, CVector const&, CVector2D const&, float)
	* CWeapon(eWeaponType, int)
	* CanBeUsedFor2Player()
	* CanBeUsedFor2Player(eWeaponType)
	* CheckForShootingVehicleOccupant(CEntity**, CColPoint*, eWeaponType, CVector const&, CVector const&)
	* DoBulletImpact(CEntity*, CEntity*, CVector*, CVector*, CColPoint*, int)
	* DoDoomAiming(CEntity*, CVector*, CVector*)                                            #
	* DoDriveByAutoAiming(CEntity*, CVehicle*, CVector*, CVector*, bool)
	* DoTankDoomAiming(CEntity*, CEntity*, CVector*, CVector*)                               #
	* DoWeaponEffect(CVector, CVector)
	* EvaluateTargetForHeatSeekingMissile(CEntity*, CVector&, CVector&, float, bool, CEntity*)
	* FindNearestTargetEntityWithScreenCoors(float, float, float, CVector, float*, float*)
	* Fire(CEntity*, CVector*, CVector*, CEntity*, CVector*, CVector*)
	* FireAreaEffect(CEntity*, CVector*, CEntity*, CVector*)
	* FireFromCar(CVehicle*, bool, bool)
	* FireInstantHit(CEntity*, CVector*, CVector*, CEntity*, CVector*, CVector*, bool, bool)
	* FireInstantHitFromCar(CVehicle*, bool, bool)
	* FireInstantHitFromCar2(CVector, CVector, CVehicle*, CEntity*)
	* FireM16_1stPerson(CPed*)
	* FireProjectile(CEntity*, CVector*, CEntity*, CVector*, float)
	* FireSniper(CPed*, CEntity*, CVector*)
	* GenerateDamageEvent(CPed*, CEntity*, eWeaponType, int, ePedPieceTypes, int)
	* HasWeaponAmmoToBeUsed()
	* Initialise(eWeaponType, int, CPed*)                                                     #
	* InitialiseWeapons()
	* IsType2Handed()
	* IsTypeMelee() const
	* IsTypeProjectile()
	* LaserScopeDot(CVector*, float*)
	* PickTargetForHeatSeekingMissile(CVector, CVector, float, CEntity*, bool, CEntity*)
	* ProcessLineOfSight(CVector const&, CVector const&, CColPoint&, CEntity*&, eWeaponType, CEntity*, bool, bool, bool, bool, bool, bool, bool)    #
	* Reload(CPed*)
	* SetUpPelletCol(int, CEntity*, CEntity*, CVector&, CColPoint&, CMatrix&)               #
	* Shutdown()
	* ShutdownWeapons()
	* StaticUpdate()
	* StopWeaponEffect()
	* TakePhotograph(CEntity*, CVector*)
	* TargetWeaponRangeMultiplier(CEntity*, CEntity*)                                       #
	* Update(CPed*)
	* UpdateWeapons()

CWeaponEffects (0 variables, 12 functions)
Variables list:

Functions list:
	* CWeaponEffects()
	* ClearCrossHair(int)
	* ClearCrossHairImmediately(int)
	* ClearCrossHairs()
	* ClearCrossHairsImmediately()
	* DrawCrossHair(unsigned int, float)
	* Init()
	* IsLockedOn(int)
	* MarkTarget(int, CVector, unsigned char, unsigned char, unsigned char, unsigned char, float, unsigned char)
	* Render()
	* Shutdown()
	* ~CWeaponEffects()

CJoySticks (0 variables, 2 functions)
Variables list:

Functions list:
	* CJoySticks()
	* ClearJoyInfo(int)

CVehicleAnimGroupData (1 variables, 0 functions)
Variables list:
	* m_vehicleAnimGroups

Functions list:

CScrollBar (1 variables, 0 functions)
Variables list:
	* TonightsEvent

Functions list:

CLightFxs (3 variables, 0 functions)
Variables list:
	* NumActiveLightFxs
	* backBufferRas
	* m_aLightFxArray

Functions list: